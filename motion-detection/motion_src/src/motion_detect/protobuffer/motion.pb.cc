// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motion.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "motion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace motion {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_MotionCamera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_MotionCamera_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_MotionMonth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_MotionMonth_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_MotionDay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_MotionDay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Instance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Instance_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Crop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Crop_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_ActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_SocketType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_motion_2eproto() {
  protobuf_AddDesc_motion_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "motion.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, data_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, data_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, serverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, clientip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, recognizing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, motioncamera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, storeimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, storecrop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, codename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, regioncoords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, startrecognitiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, numberofchanges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, matfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, activemat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, cameras_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, activecamera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, xmlfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, xmlfilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, instancecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, imagefilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, currmonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, currday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, packagesize_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_MotionCamera_descriptor_ = Message_descriptor_->nested_type(0);
  static const int Message_MotionCamera_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, motionmonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, camera_),
  };
  Message_MotionCamera_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_MotionCamera_descriptor_,
      Message_MotionCamera::default_instance_,
      Message_MotionCamera_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionCamera, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_MotionCamera));
  Message_MotionMonth_descriptor_ = Message_descriptor_->nested_type(1);
  static const int Message_MotionMonth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionMonth, motionday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionMonth, monthlabel_),
  };
  Message_MotionMonth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_MotionMonth_descriptor_,
      Message_MotionMonth::default_instance_,
      Message_MotionMonth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionMonth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionMonth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_MotionMonth));
  Message_MotionDay_descriptor_ = Message_descriptor_->nested_type(2);
  static const int Message_MotionDay_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDay, daylabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDay, instance_),
  };
  Message_MotionDay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_MotionDay_descriptor_,
      Message_MotionDay::default_instance_,
      Message_MotionDay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_MotionDay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_MotionDay));
  Message_Instance_descriptor_ = Message_descriptor_->nested_type(3);
  static const int Message_Instance_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, idinstance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, instancestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, instanceend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, fileformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, croppedformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, crop_),
  };
  Message_Instance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Instance_descriptor_,
      Message_Instance::default_instance_,
      Message_Instance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Instance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_Instance));
  Message_Image_descriptor_ = Message_descriptor_->nested_type(4);
  static const int Message_Image_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Image, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Image, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Image, imagechanges_),
  };
  Message_Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Image_descriptor_,
      Message_Image::default_instance_,
      Message_Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_Image));
  Message_Crop_descriptor_ = Message_descriptor_->nested_type(5);
  static const int Message_Crop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Crop, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Crop, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Crop, imagefather_),
  };
  Message_Crop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_Crop_descriptor_,
      Message_Crop::default_instance_,
      Message_Crop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Crop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Crop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message_Crop));
  Message_ActionType_descriptor_ = Message_descriptor_->enum_type(0);
  Message_SocketType_descriptor_ = Message_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_motion_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_MotionCamera_descriptor_, &Message_MotionCamera::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_MotionMonth_descriptor_, &Message_MotionMonth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_MotionDay_descriptor_, &Message_MotionDay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Instance_descriptor_, &Message_Instance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Image_descriptor_, &Message_Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_Crop_descriptor_, &Message_Crop::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_motion_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Message_MotionCamera::default_instance_;
  delete Message_MotionCamera_reflection_;
  delete Message_MotionMonth::default_instance_;
  delete Message_MotionMonth_reflection_;
  delete Message_MotionDay::default_instance_;
  delete Message_MotionDay_reflection_;
  delete Message_Instance::default_instance_;
  delete Message_Instance_reflection_;
  delete Message_Image::default_instance_;
  delete Message_Image_reflection_;
  delete Message_Crop::default_instance_;
  delete Message_Crop_reflection_;
}

void protobuf_AddDesc_motion_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014motion.proto\022\006motion\"\226\020\n\007Message\0220\n\004ty"
    "pe\030\001 \002(\0162\032.motion.Message.ActionType:\006EN"
    "GAGE\022\014\n\004time\030\002 \001(\t\022\014\n\004data\030\003 \001(\014\022\023\n\013data"
    "_amount\030\004 \001(\005\022\022\n\ndata_total\030\005 \001(\005\022\020\n\010ser"
    "verip\030\006 \001(\t\022\020\n\010clientip\030\007 \001(\t\022\023\n\013recogni"
    "zing\030\010 \001(\010\0222\n\014motioncamera\030\t \003(\0132\034.motio"
    "n.Message.MotionCamera\022\022\n\nstoreimage\030\n \001"
    "(\010\022\021\n\tstorecrop\030\013 \001(\010\022\020\n\010codename\030\014 \001(\t\022"
    "\024\n\014regioncoords\030\r \001(\014\022\r\n\005delay\030\016 \001(\001\022\021\n\t"
    "starttime\030\017 \001(\t\022\034\n\024startrecognitiontime\030"
    "\020 \001(\t\022\016\n\006region\030\021 \001(\010\022\027\n\017numberofchanges"
    "\030\022 \001(\005\022\016\n\006amount\030\023 \001(\005\022\017\n\007matfile\030\024 \003(\005\022"
    "\021\n\tactivemat\030\025 \001(\005\022\017\n\007cameras\030\026 \001(\t\022\024\n\014a"
    "ctivecamera\030\027 \001(\005\022\023\n\013xmlfilename\030\030 \001(\t\022\023"
    "\n\013xmlfilepath\030\031 \001(\t\022\025\n\rinstancecount\030\032 \001"
    "(\005\022\025\n\rimagefilepath\030\033 \001(\t\022\021\n\tcurrmonth\030\034"
    " \001(\t\022\017\n\007currday\030\035 \001(\t\022\023\n\013packagesize\030\036 \001"
    "(\005\032b\n\014MotionCamera\0220\n\013motionmonth\030\001 \003(\0132"
    "\033.motion.Message.MotionMonth\022\020\n\010cameraid"
    "\030\002 \001(\005\022\016\n\006camera\030\003 \001(\t\032O\n\013MotionMonth\022,\n"
    "\tmotionday\030\001 \003(\0132\031.motion.Message.Motion"
    "Day\022\022\n\nmonthlabel\030\002 \001(\t\032I\n\tMotionDay\022\020\n\010"
    "daylabel\030\001 \001(\t\022*\n\010instance\030\002 \003(\0132\030.motio"
    "n.Message.Instance\032\277\001\n\010Instance\022\022\n\nidins"
    "tance\030\001 \002(\005\022\025\n\rinstancestart\030\002 \001(\t\022\023\n\013in"
    "stanceend\030\003 \001(\t\022\022\n\nfileformat\030\004 \001(\t\022\025\n\rc"
    "roppedformat\030\005 \001(\t\022$\n\005image\030\006 \003(\0132\025.moti"
    "on.Message.Image\022\"\n\004crop\030\007 \003(\0132\024.motion."
    "Message.Crop\0329\n\005Image\022\014\n\004path\030\001 \001(\t\022\014\n\004n"
    "ame\030\002 \001(\t\022\024\n\014imagechanges\030\003 \001(\005\0327\n\004Crop\022"
    "\014\n\004path\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\023\n\013imagefath"
    "er\030\003 \001(\t\"\235\003\n\nActionType\022\013\n\006ENGAGE\020\350\007\022\016\n\t"
    "REC_START\020\352\007\022\020\n\013REC_RUNNING\020\353\007\022\r\n\010REC_ST"
    "OP\020\354\007\022\r\n\010UNENGAGE\020\355\007\022\r\n\010GET_TIME\020\356\007\022\r\n\010S"
    "ET_TIME\020\357\007\022\r\n\010TIME_SET\020\360\007\022\017\n\nSTRM_START\020"
    "\361\007\022\016\n\tSTRM_STOP\020\362\007\022\021\n\014TAKE_PICTURE\020\363\007\022\020\n"
    "\013DISSCONNECT\020\364\007\022\014\n\007REFRESH\020\365\007\022\014\n\007GET_XML"
    "\020\366\007\022\016\n\tGET_IMAGE\020\367\007\022\020\n\013RESPONSE_OK\020\320\017\022\022\n"
    "\rRESPONSE_NEXT\020\332\017\022\021\n\014RESPONSE_END\020\344\017\022\024\n\017"
    "RESPONSE_FINISH\020\356\017\022\024\n\017REC_HAS_CHANGES\020\370\017"
    "\022\025\n\020REC_HAS_INSTANCE\020\202\020\022\023\n\016PROTO_HAS_FIL"
    "E\020\326\027\022\022\n\rPROTO_NO_FILE\020\327\027\"\254\003\n\nSocketType\022"
    "\031\n\025SOCKET_PROTO_TOSTRING\020\n\022\030\n\024SOCKET_PRO"
    "TO_TOARRAY\020\013\022\025\n\021SOCKET_PLAIN_TEXT\020\014\022\024\n\020S"
    "PLITTED_MESSAGE\020\r\022\022\n\016SINGLE_MESSAGE\020\016\022\034\n"
    "\027SOCKET_BUFFER_NANO_SIZE\020\200\010\022\034\n\027SOCKET_BU"
    "FFER_MINI_SIZE\020\200\020\022\035\n\030SOCKET_BUFFER_MICRO"
    "_SIZE\020\200 \022\035\n\030SOCKET_BUFFER_SMALL_SIZE\020\204@\022"
    " \n\032SOCKET_BUFFER_REGULAR_SIZE\020\210\200\001\022\037\n\031SOC"
    "KET_BUFFER_MEDIUM_SIZE\020\220\200\002\022\034\n\026SOCKET_BUF"
    "FER_BIG_SIZE\020\240\200\004\022\022\n\rTCP_ECHO_PORT\020\222\'\022\027\n\022"
    "TCP_STREAMING_PORT\020\234\'\022\r\n\010UDP_PORT\020\246\'\022\021\n\014"
    "TCP_MSG_PORT\020\260\'", 2095);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "motion.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Message_MotionCamera::default_instance_ = new Message_MotionCamera();
  Message_MotionMonth::default_instance_ = new Message_MotionMonth();
  Message_MotionDay::default_instance_ = new Message_MotionDay();
  Message_Instance::default_instance_ = new Message_Instance();
  Message_Image::default_instance_ = new Message_Image();
  Message_Crop::default_instance_ = new Message_Crop();
  Message::default_instance_->InitAsDefaultInstance();
  Message_MotionCamera::default_instance_->InitAsDefaultInstance();
  Message_MotionMonth::default_instance_->InitAsDefaultInstance();
  Message_MotionDay::default_instance_->InitAsDefaultInstance();
  Message_Instance::default_instance_->InitAsDefaultInstance();
  Message_Image::default_instance_->InitAsDefaultInstance();
  Message_Crop::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_motion_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_motion_2eproto {
  StaticDescriptorInitializer_motion_2eproto() {
    protobuf_AddDesc_motion_2eproto();
  }
} static_descriptor_initializer_motion_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_ActionType_descriptor_;
}
bool Message_ActionType_IsValid(int value) {
  switch(value) {
    case 1000:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 2000:
    case 2010:
    case 2020:
    case 2030:
    case 2040:
    case 2050:
    case 3030:
    case 3031:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_ActionType Message::ENGAGE;
const Message_ActionType Message::REC_START;
const Message_ActionType Message::REC_RUNNING;
const Message_ActionType Message::REC_STOP;
const Message_ActionType Message::UNENGAGE;
const Message_ActionType Message::GET_TIME;
const Message_ActionType Message::SET_TIME;
const Message_ActionType Message::TIME_SET;
const Message_ActionType Message::STRM_START;
const Message_ActionType Message::STRM_STOP;
const Message_ActionType Message::TAKE_PICTURE;
const Message_ActionType Message::DISSCONNECT;
const Message_ActionType Message::REFRESH;
const Message_ActionType Message::GET_XML;
const Message_ActionType Message::GET_IMAGE;
const Message_ActionType Message::RESPONSE_OK;
const Message_ActionType Message::RESPONSE_NEXT;
const Message_ActionType Message::RESPONSE_END;
const Message_ActionType Message::RESPONSE_FINISH;
const Message_ActionType Message::REC_HAS_CHANGES;
const Message_ActionType Message::REC_HAS_INSTANCE;
const Message_ActionType Message::PROTO_HAS_FILE;
const Message_ActionType Message::PROTO_NO_FILE;
const Message_ActionType Message::ActionType_MIN;
const Message_ActionType Message::ActionType_MAX;
const int Message::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Message_SocketType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_SocketType_descriptor_;
}
bool Message_SocketType_IsValid(int value) {
  switch(value) {
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 1024:
    case 2048:
    case 4096:
    case 5010:
    case 5020:
    case 5030:
    case 5040:
    case 8196:
    case 16392:
    case 32784:
    case 65568:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_SocketType Message::SOCKET_PROTO_TOSTRING;
const Message_SocketType Message::SOCKET_PROTO_TOARRAY;
const Message_SocketType Message::SOCKET_PLAIN_TEXT;
const Message_SocketType Message::SPLITTED_MESSAGE;
const Message_SocketType Message::SINGLE_MESSAGE;
const Message_SocketType Message::SOCKET_BUFFER_NANO_SIZE;
const Message_SocketType Message::SOCKET_BUFFER_MINI_SIZE;
const Message_SocketType Message::SOCKET_BUFFER_MICRO_SIZE;
const Message_SocketType Message::SOCKET_BUFFER_SMALL_SIZE;
const Message_SocketType Message::SOCKET_BUFFER_REGULAR_SIZE;
const Message_SocketType Message::SOCKET_BUFFER_MEDIUM_SIZE;
const Message_SocketType Message::SOCKET_BUFFER_BIG_SIZE;
const Message_SocketType Message::TCP_ECHO_PORT;
const Message_SocketType Message::TCP_STREAMING_PORT;
const Message_SocketType Message::UDP_PORT;
const Message_SocketType Message::TCP_MSG_PORT;
const Message_SocketType Message::SocketType_MIN;
const Message_SocketType Message::SocketType_MAX;
const int Message::SocketType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message_MotionCamera::kMotionmonthFieldNumber;
const int Message_MotionCamera::kCameraidFieldNumber;
const int Message_MotionCamera::kCameraFieldNumber;
#endif  // !_MSC_VER

Message_MotionCamera::Message_MotionCamera()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.MotionCamera)
}

void Message_MotionCamera::InitAsDefaultInstance() {
}

Message_MotionCamera::Message_MotionCamera(const Message_MotionCamera& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.MotionCamera)
}

void Message_MotionCamera::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cameraid_ = 0;
  camera_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_MotionCamera::~Message_MotionCamera() {
  // @@protoc_insertion_point(destructor:motion.Message.MotionCamera)
  SharedDtor();
}

void Message_MotionCamera::SharedDtor() {
  if (camera_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera_;
  }
  if (this != default_instance_) {
  }
}

void Message_MotionCamera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_MotionCamera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MotionCamera_descriptor_;
}

const Message_MotionCamera& Message_MotionCamera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_MotionCamera* Message_MotionCamera::default_instance_ = NULL;

Message_MotionCamera* Message_MotionCamera::New() const {
  return new Message_MotionCamera;
}

void Message_MotionCamera::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    cameraid_ = 0;
    if (has_camera()) {
      if (camera_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        camera_->clear();
      }
    }
  }
  motionmonth_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_MotionCamera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.MotionCamera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .motion.Message.MotionMonth motionmonth = 1;
      case 1: {
        if (tag == 10) {
         parse_motionmonth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motionmonth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_motionmonth;
        if (input->ExpectTag(16)) goto parse_cameraid;
        break;
      }

      // optional int32 cameraid = 2;
      case 2: {
        if (tag == 16) {
         parse_cameraid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cameraid_)));
          set_has_cameraid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_camera;
        break;
      }

      // optional string camera = 3;
      case 3: {
        if (tag == 26) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera().data(), this->camera().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "camera");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.MotionCamera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.MotionCamera)
  return false;
#undef DO_
}

void Message_MotionCamera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.MotionCamera)
  // repeated .motion.Message.MotionMonth motionmonth = 1;
  for (int i = 0; i < this->motionmonth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->motionmonth(i), output);
  }

  // optional int32 cameraid = 2;
  if (has_cameraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cameraid(), output);
  }

  // optional string camera = 3;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera().data(), this->camera().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->camera(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.MotionCamera)
}

::google::protobuf::uint8* Message_MotionCamera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.MotionCamera)
  // repeated .motion.Message.MotionMonth motionmonth = 1;
  for (int i = 0; i < this->motionmonth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->motionmonth(i), target);
  }

  // optional int32 cameraid = 2;
  if (has_cameraid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cameraid(), target);
  }

  // optional string camera = 3;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera().data(), this->camera().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->camera(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.MotionCamera)
  return target;
}

int Message_MotionCamera::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 cameraid = 2;
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cameraid());
    }

    // optional string camera = 3;
    if (has_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera());
    }

  }
  // repeated .motion.Message.MotionMonth motionmonth = 1;
  total_size += 1 * this->motionmonth_size();
  for (int i = 0; i < this->motionmonth_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motionmonth(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_MotionCamera::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_MotionCamera* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_MotionCamera*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_MotionCamera::MergeFrom(const Message_MotionCamera& from) {
  GOOGLE_CHECK_NE(&from, this);
  motionmonth_.MergeFrom(from.motionmonth_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cameraid()) {
      set_cameraid(from.cameraid());
    }
    if (from.has_camera()) {
      set_camera(from.camera());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_MotionCamera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_MotionCamera::CopyFrom(const Message_MotionCamera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MotionCamera::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->motionmonth())) return false;
  return true;
}

void Message_MotionCamera::Swap(Message_MotionCamera* other) {
  if (other != this) {
    motionmonth_.Swap(&other->motionmonth_);
    std::swap(cameraid_, other->cameraid_);
    std::swap(camera_, other->camera_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_MotionCamera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_MotionCamera_descriptor_;
  metadata.reflection = Message_MotionCamera_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_MotionMonth::kMotiondayFieldNumber;
const int Message_MotionMonth::kMonthlabelFieldNumber;
#endif  // !_MSC_VER

Message_MotionMonth::Message_MotionMonth()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.MotionMonth)
}

void Message_MotionMonth::InitAsDefaultInstance() {
}

Message_MotionMonth::Message_MotionMonth(const Message_MotionMonth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.MotionMonth)
}

void Message_MotionMonth::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  monthlabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_MotionMonth::~Message_MotionMonth() {
  // @@protoc_insertion_point(destructor:motion.Message.MotionMonth)
  SharedDtor();
}

void Message_MotionMonth::SharedDtor() {
  if (monthlabel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete monthlabel_;
  }
  if (this != default_instance_) {
  }
}

void Message_MotionMonth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_MotionMonth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MotionMonth_descriptor_;
}

const Message_MotionMonth& Message_MotionMonth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_MotionMonth* Message_MotionMonth::default_instance_ = NULL;

Message_MotionMonth* Message_MotionMonth::New() const {
  return new Message_MotionMonth;
}

void Message_MotionMonth::Clear() {
  if (has_monthlabel()) {
    if (monthlabel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      monthlabel_->clear();
    }
  }
  motionday_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_MotionMonth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.MotionMonth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .motion.Message.MotionDay motionday = 1;
      case 1: {
        if (tag == 10) {
         parse_motionday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motionday()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_motionday;
        if (input->ExpectTag(18)) goto parse_monthlabel;
        break;
      }

      // optional string monthlabel = 2;
      case 2: {
        if (tag == 18) {
         parse_monthlabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monthlabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->monthlabel().data(), this->monthlabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "monthlabel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.MotionMonth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.MotionMonth)
  return false;
#undef DO_
}

void Message_MotionMonth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.MotionMonth)
  // repeated .motion.Message.MotionDay motionday = 1;
  for (int i = 0; i < this->motionday_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->motionday(i), output);
  }

  // optional string monthlabel = 2;
  if (has_monthlabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monthlabel().data(), this->monthlabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "monthlabel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->monthlabel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.MotionMonth)
}

::google::protobuf::uint8* Message_MotionMonth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.MotionMonth)
  // repeated .motion.Message.MotionDay motionday = 1;
  for (int i = 0; i < this->motionday_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->motionday(i), target);
  }

  // optional string monthlabel = 2;
  if (has_monthlabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monthlabel().data(), this->monthlabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "monthlabel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->monthlabel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.MotionMonth)
  return target;
}

int Message_MotionMonth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string monthlabel = 2;
    if (has_monthlabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monthlabel());
    }

  }
  // repeated .motion.Message.MotionDay motionday = 1;
  total_size += 1 * this->motionday_size();
  for (int i = 0; i < this->motionday_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motionday(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_MotionMonth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_MotionMonth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_MotionMonth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_MotionMonth::MergeFrom(const Message_MotionMonth& from) {
  GOOGLE_CHECK_NE(&from, this);
  motionday_.MergeFrom(from.motionday_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_monthlabel()) {
      set_monthlabel(from.monthlabel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_MotionMonth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_MotionMonth::CopyFrom(const Message_MotionMonth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MotionMonth::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->motionday())) return false;
  return true;
}

void Message_MotionMonth::Swap(Message_MotionMonth* other) {
  if (other != this) {
    motionday_.Swap(&other->motionday_);
    std::swap(monthlabel_, other->monthlabel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_MotionMonth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_MotionMonth_descriptor_;
  metadata.reflection = Message_MotionMonth_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_MotionDay::kDaylabelFieldNumber;
const int Message_MotionDay::kInstanceFieldNumber;
#endif  // !_MSC_VER

Message_MotionDay::Message_MotionDay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.MotionDay)
}

void Message_MotionDay::InitAsDefaultInstance() {
}

Message_MotionDay::Message_MotionDay(const Message_MotionDay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.MotionDay)
}

void Message_MotionDay::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  daylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_MotionDay::~Message_MotionDay() {
  // @@protoc_insertion_point(destructor:motion.Message.MotionDay)
  SharedDtor();
}

void Message_MotionDay::SharedDtor() {
  if (daylabel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete daylabel_;
  }
  if (this != default_instance_) {
  }
}

void Message_MotionDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_MotionDay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MotionDay_descriptor_;
}

const Message_MotionDay& Message_MotionDay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_MotionDay* Message_MotionDay::default_instance_ = NULL;

Message_MotionDay* Message_MotionDay::New() const {
  return new Message_MotionDay;
}

void Message_MotionDay::Clear() {
  if (has_daylabel()) {
    if (daylabel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      daylabel_->clear();
    }
  }
  instance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_MotionDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.MotionDay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string daylabel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_daylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->daylabel().data(), this->daylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "daylabel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_instance;
        break;
      }

      // repeated .motion.Message.Instance instance = 2;
      case 2: {
        if (tag == 18) {
         parse_instance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_instance;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.MotionDay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.MotionDay)
  return false;
#undef DO_
}

void Message_MotionDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.MotionDay)
  // optional string daylabel = 1;
  if (has_daylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->daylabel().data(), this->daylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "daylabel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->daylabel(), output);
  }

  // repeated .motion.Message.Instance instance = 2;
  for (int i = 0; i < this->instance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instance(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.MotionDay)
}

::google::protobuf::uint8* Message_MotionDay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.MotionDay)
  // optional string daylabel = 1;
  if (has_daylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->daylabel().data(), this->daylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "daylabel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->daylabel(), target);
  }

  // repeated .motion.Message.Instance instance = 2;
  for (int i = 0; i < this->instance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instance(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.MotionDay)
  return target;
}

int Message_MotionDay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string daylabel = 1;
    if (has_daylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->daylabel());
    }

  }
  // repeated .motion.Message.Instance instance = 2;
  total_size += 1 * this->instance_size();
  for (int i = 0; i < this->instance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instance(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_MotionDay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_MotionDay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_MotionDay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_MotionDay::MergeFrom(const Message_MotionDay& from) {
  GOOGLE_CHECK_NE(&from, this);
  instance_.MergeFrom(from.instance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daylabel()) {
      set_daylabel(from.daylabel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_MotionDay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_MotionDay::CopyFrom(const Message_MotionDay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MotionDay::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->instance())) return false;
  return true;
}

void Message_MotionDay::Swap(Message_MotionDay* other) {
  if (other != this) {
    std::swap(daylabel_, other->daylabel_);
    instance_.Swap(&other->instance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_MotionDay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_MotionDay_descriptor_;
  metadata.reflection = Message_MotionDay_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_Instance::kIdinstanceFieldNumber;
const int Message_Instance::kInstancestartFieldNumber;
const int Message_Instance::kInstanceendFieldNumber;
const int Message_Instance::kFileformatFieldNumber;
const int Message_Instance::kCroppedformatFieldNumber;
const int Message_Instance::kImageFieldNumber;
const int Message_Instance::kCropFieldNumber;
#endif  // !_MSC_VER

Message_Instance::Message_Instance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.Instance)
}

void Message_Instance::InitAsDefaultInstance() {
}

Message_Instance::Message_Instance(const Message_Instance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.Instance)
}

void Message_Instance::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  idinstance_ = 0;
  instancestart_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instanceend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileformat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  croppedformat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_Instance::~Message_Instance() {
  // @@protoc_insertion_point(destructor:motion.Message.Instance)
  SharedDtor();
}

void Message_Instance::SharedDtor() {
  if (instancestart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instancestart_;
  }
  if (instanceend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instanceend_;
  }
  if (fileformat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fileformat_;
  }
  if (croppedformat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete croppedformat_;
  }
  if (this != default_instance_) {
  }
}

void Message_Instance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Instance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Instance_descriptor_;
}

const Message_Instance& Message_Instance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_Instance* Message_Instance::default_instance_ = NULL;

Message_Instance* Message_Instance::New() const {
  return new Message_Instance;
}

void Message_Instance::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    idinstance_ = 0;
    if (has_instancestart()) {
      if (instancestart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        instancestart_->clear();
      }
    }
    if (has_instanceend()) {
      if (instanceend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        instanceend_->clear();
      }
    }
    if (has_fileformat()) {
      if (fileformat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fileformat_->clear();
      }
    }
    if (has_croppedformat()) {
      if (croppedformat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        croppedformat_->clear();
      }
    }
  }
  image_.Clear();
  crop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Instance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.Instance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 idinstance = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idinstance_)));
          set_has_idinstance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_instancestart;
        break;
      }

      // optional string instancestart = 2;
      case 2: {
        if (tag == 18) {
         parse_instancestart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instancestart()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instancestart().data(), this->instancestart().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "instancestart");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_instanceend;
        break;
      }

      // optional string instanceend = 3;
      case 3: {
        if (tag == 26) {
         parse_instanceend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instanceend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instanceend().data(), this->instanceend().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "instanceend");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fileformat;
        break;
      }

      // optional string fileformat = 4;
      case 4: {
        if (tag == 34) {
         parse_fileformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileformat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fileformat().data(), this->fileformat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fileformat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_croppedformat;
        break;
      }

      // optional string croppedformat = 5;
      case 5: {
        if (tag == 42) {
         parse_croppedformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_croppedformat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->croppedformat().data(), this->croppedformat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "croppedformat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_image;
        break;
      }

      // repeated .motion.Message.Image image = 6;
      case 6: {
        if (tag == 50) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_image;
        if (input->ExpectTag(58)) goto parse_crop;
        break;
      }

      // repeated .motion.Message.Crop crop = 7;
      case 7: {
        if (tag == 58) {
         parse_crop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_crop;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.Instance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.Instance)
  return false;
#undef DO_
}

void Message_Instance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.Instance)
  // required int32 idinstance = 1;
  if (has_idinstance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idinstance(), output);
  }

  // optional string instancestart = 2;
  if (has_instancestart()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instancestart().data(), this->instancestart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instancestart");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instancestart(), output);
  }

  // optional string instanceend = 3;
  if (has_instanceend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instanceend().data(), this->instanceend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instanceend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->instanceend(), output);
  }

  // optional string fileformat = 4;
  if (has_fileformat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileformat().data(), this->fileformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileformat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fileformat(), output);
  }

  // optional string croppedformat = 5;
  if (has_croppedformat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->croppedformat().data(), this->croppedformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "croppedformat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->croppedformat(), output);
  }

  // repeated .motion.Message.Image image = 6;
  for (int i = 0; i < this->image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->image(i), output);
  }

  // repeated .motion.Message.Crop crop = 7;
  for (int i = 0; i < this->crop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->crop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.Instance)
}

::google::protobuf::uint8* Message_Instance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.Instance)
  // required int32 idinstance = 1;
  if (has_idinstance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idinstance(), target);
  }

  // optional string instancestart = 2;
  if (has_instancestart()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instancestart().data(), this->instancestart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instancestart");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instancestart(), target);
  }

  // optional string instanceend = 3;
  if (has_instanceend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instanceend().data(), this->instanceend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instanceend");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instanceend(), target);
  }

  // optional string fileformat = 4;
  if (has_fileformat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileformat().data(), this->fileformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileformat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fileformat(), target);
  }

  // optional string croppedformat = 5;
  if (has_croppedformat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->croppedformat().data(), this->croppedformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "croppedformat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->croppedformat(), target);
  }

  // repeated .motion.Message.Image image = 6;
  for (int i = 0; i < this->image_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->image(i), target);
  }

  // repeated .motion.Message.Crop crop = 7;
  for (int i = 0; i < this->crop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->crop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.Instance)
  return target;
}

int Message_Instance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 idinstance = 1;
    if (has_idinstance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idinstance());
    }

    // optional string instancestart = 2;
    if (has_instancestart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instancestart());
    }

    // optional string instanceend = 3;
    if (has_instanceend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instanceend());
    }

    // optional string fileformat = 4;
    if (has_fileformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileformat());
    }

    // optional string croppedformat = 5;
    if (has_croppedformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->croppedformat());
    }

  }
  // repeated .motion.Message.Image image = 6;
  total_size += 1 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image(i));
  }

  // repeated .motion.Message.Crop crop = 7;
  total_size += 1 * this->crop_size();
  for (int i = 0; i < this->crop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->crop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Instance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Instance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Instance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Instance::MergeFrom(const Message_Instance& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_.MergeFrom(from.image_);
  crop_.MergeFrom(from.crop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idinstance()) {
      set_idinstance(from.idinstance());
    }
    if (from.has_instancestart()) {
      set_instancestart(from.instancestart());
    }
    if (from.has_instanceend()) {
      set_instanceend(from.instanceend());
    }
    if (from.has_fileformat()) {
      set_fileformat(from.fileformat());
    }
    if (from.has_croppedformat()) {
      set_croppedformat(from.croppedformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Instance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Instance::CopyFrom(const Message_Instance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Instance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Message_Instance::Swap(Message_Instance* other) {
  if (other != this) {
    std::swap(idinstance_, other->idinstance_);
    std::swap(instancestart_, other->instancestart_);
    std::swap(instanceend_, other->instanceend_);
    std::swap(fileformat_, other->fileformat_);
    std::swap(croppedformat_, other->croppedformat_);
    image_.Swap(&other->image_);
    crop_.Swap(&other->crop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_Instance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_Instance_descriptor_;
  metadata.reflection = Message_Instance_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_Image::kPathFieldNumber;
const int Message_Image::kNameFieldNumber;
const int Message_Image::kImagechangesFieldNumber;
#endif  // !_MSC_VER

Message_Image::Message_Image()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.Image)
}

void Message_Image::InitAsDefaultInstance() {
}

Message_Image::Message_Image(const Message_Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.Image)
}

void Message_Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagechanges_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_Image::~Message_Image() {
  // @@protoc_insertion_point(destructor:motion.Message.Image)
  SharedDtor();
}

void Message_Image::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Message_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Image_descriptor_;
}

const Message_Image& Message_Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_Image* Message_Image::default_instance_ = NULL;

Message_Image* Message_Image::New() const {
  return new Message_Image;
}

void Message_Image::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    imagechanges_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_imagechanges;
        break;
      }

      // optional int32 imagechanges = 3;
      case 3: {
        if (tag == 24) {
         parse_imagechanges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagechanges_)));
          set_has_imagechanges();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.Image)
  return false;
#undef DO_
}

void Message_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.Image)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 imagechanges = 3;
  if (has_imagechanges()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->imagechanges(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.Image)
}

::google::protobuf::uint8* Message_Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.Image)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 imagechanges = 3;
  if (has_imagechanges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->imagechanges(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.Image)
  return target;
}

int Message_Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 imagechanges = 3;
    if (has_imagechanges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imagechanges());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Image::MergeFrom(const Message_Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_imagechanges()) {
      set_imagechanges(from.imagechanges());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Image::CopyFrom(const Message_Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Image::IsInitialized() const {

  return true;
}

void Message_Image::Swap(Message_Image* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(name_, other->name_);
    std::swap(imagechanges_, other->imagechanges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_Image_descriptor_;
  metadata.reflection = Message_Image_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message_Crop::kPathFieldNumber;
const int Message_Crop::kNameFieldNumber;
const int Message_Crop::kImagefatherFieldNumber;
#endif  // !_MSC_VER

Message_Crop::Message_Crop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message.Crop)
}

void Message_Crop::InitAsDefaultInstance() {
}

Message_Crop::Message_Crop(const Message_Crop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message.Crop)
}

void Message_Crop::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagefather_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_Crop::~Message_Crop() {
  // @@protoc_insertion_point(destructor:motion.Message.Crop)
  SharedDtor();
}

void Message_Crop::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (imagefather_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagefather_;
  }
  if (this != default_instance_) {
  }
}

void Message_Crop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Crop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Crop_descriptor_;
}

const Message_Crop& Message_Crop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message_Crop* Message_Crop::default_instance_ = NULL;

Message_Crop* Message_Crop::New() const {
  return new Message_Crop;
}

void Message_Crop::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_imagefather()) {
      if (imagefather_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imagefather_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message_Crop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message.Crop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_imagefather;
        break;
      }

      // optional string imagefather = 3;
      case 3: {
        if (tag == 26) {
         parse_imagefather:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagefather()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imagefather().data(), this->imagefather().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imagefather");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message.Crop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message.Crop)
  return false;
#undef DO_
}

void Message_Crop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message.Crop)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string imagefather = 3;
  if (has_imagefather()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagefather().data(), this->imagefather().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imagefather");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->imagefather(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message.Crop)
}

::google::protobuf::uint8* Message_Crop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message.Crop)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string imagefather = 3;
  if (has_imagefather()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagefather().data(), this->imagefather().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imagefather");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->imagefather(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message.Crop)
  return target;
}

int Message_Crop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string imagefather = 3;
    if (has_imagefather()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagefather());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Crop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message_Crop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message_Crop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message_Crop::MergeFrom(const Message_Crop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_imagefather()) {
      set_imagefather(from.imagefather());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message_Crop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Crop::CopyFrom(const Message_Crop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Crop::IsInitialized() const {

  return true;
}

void Message_Crop::Swap(Message_Crop* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(name_, other->name_);
    std::swap(imagefather_, other->imagefather_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message_Crop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_Crop_descriptor_;
  metadata.reflection = Message_Crop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Message::kTypeFieldNumber;
const int Message::kTimeFieldNumber;
const int Message::kDataFieldNumber;
const int Message::kDataAmountFieldNumber;
const int Message::kDataTotalFieldNumber;
const int Message::kServeripFieldNumber;
const int Message::kClientipFieldNumber;
const int Message::kRecognizingFieldNumber;
const int Message::kMotioncameraFieldNumber;
const int Message::kStoreimageFieldNumber;
const int Message::kStorecropFieldNumber;
const int Message::kCodenameFieldNumber;
const int Message::kRegioncoordsFieldNumber;
const int Message::kDelayFieldNumber;
const int Message::kStarttimeFieldNumber;
const int Message::kStartrecognitiontimeFieldNumber;
const int Message::kRegionFieldNumber;
const int Message::kNumberofchangesFieldNumber;
const int Message::kAmountFieldNumber;
const int Message::kMatfileFieldNumber;
const int Message::kActivematFieldNumber;
const int Message::kCamerasFieldNumber;
const int Message::kActivecameraFieldNumber;
const int Message::kXmlfilenameFieldNumber;
const int Message::kXmlfilepathFieldNumber;
const int Message::kInstancecountFieldNumber;
const int Message::kImagefilepathFieldNumber;
const int Message::kCurrmonthFieldNumber;
const int Message::kCurrdayFieldNumber;
const int Message::kPackagesizeFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message)
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message)
}

void Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1000;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_amount_ = 0;
  data_total_ = 0;
  serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recognizing_ = false;
  storeimage_ = false;
  storecrop_ = false;
  codename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regioncoords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delay_ = 0;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startrecognitiontime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_ = false;
  numberofchanges_ = 0;
  amount_ = 0;
  activemat_ = 0;
  cameras_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activecamera_ = 0;
  xmlfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xmlfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instancecount_ = 0;
  imagefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currmonth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currday_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packagesize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:motion.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (serverip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverip_;
  }
  if (clientip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientip_;
  }
  if (codename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codename_;
  }
  if (regioncoords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete regioncoords_;
  }
  if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starttime_;
  }
  if (startrecognitiontime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete startrecognitiontime_;
  }
  if (cameras_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cameras_;
  }
  if (xmlfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xmlfilename_;
  }
  if (xmlfilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xmlfilepath_;
  }
  if (imagefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagefilepath_;
  }
  if (currmonth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currmonth_;
  }
  if (currday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currday_;
  }
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Message*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(data_total_, recognizing_);
    type_ = 1000;
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    data_amount_ = 0;
    if (has_serverip()) {
      if (serverip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverip_->clear();
      }
    }
    if (has_clientip()) {
      if (clientip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65024) {
    ZR_(storeimage_, storecrop_);
    if (has_codename()) {
      if (codename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        codename_->clear();
      }
    }
    if (has_regioncoords()) {
      if (regioncoords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        regioncoords_->clear();
      }
    }
    delay_ = 0;
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        starttime_->clear();
      }
    }
    if (has_startrecognitiontime()) {
      if (startrecognitiontime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        startrecognitiontime_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16187392) {
    ZR_(numberofchanges_, amount_);
    ZR_(activemat_, activecamera_);
    region_ = false;
    if (has_cameras()) {
      if (cameras_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cameras_->clear();
      }
    }
    if (has_xmlfilename()) {
      if (xmlfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        xmlfilename_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 1056964608) {
    ZR_(instancecount_, packagesize_);
    if (has_xmlfilepath()) {
      if (xmlfilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        xmlfilepath_->clear();
      }
    }
    if (has_imagefilepath()) {
      if (imagefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imagefilepath_->clear();
      }
    }
    if (has_currmonth()) {
      if (currmonth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currmonth_->clear();
      }
    }
    if (has_currday()) {
      if (currday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currday_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  motioncamera_.Clear();
  matfile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .motion.Message.ActionType type = 1 [default = ENGAGE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::motion::Message_ActionType_IsValid(value)) {
            set_type(static_cast< ::motion::Message_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // optional string time = 2;
      case 2: {
        if (tag == 18) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_data_amount;
        break;
      }

      // optional int32 data_amount = 4;
      case 4: {
        if (tag == 32) {
         parse_data_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_amount_)));
          set_has_data_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_data_total;
        break;
      }

      // optional int32 data_total = 5;
      case 5: {
        if (tag == 40) {
         parse_data_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_total_)));
          set_has_data_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_serverip;
        break;
      }

      // optional string serverip = 6;
      case 6: {
        if (tag == 50) {
         parse_serverip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverip().data(), this->serverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_clientip;
        break;
      }

      // optional string clientip = 7;
      case 7: {
        if (tag == 58) {
         parse_clientip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientip().data(), this->clientip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_recognizing;
        break;
      }

      // optional bool recognizing = 8;
      case 8: {
        if (tag == 64) {
         parse_recognizing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recognizing_)));
          set_has_recognizing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_motioncamera;
        break;
      }

      // repeated .motion.Message.MotionCamera motioncamera = 9;
      case 9: {
        if (tag == 74) {
         parse_motioncamera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motioncamera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_motioncamera;
        if (input->ExpectTag(80)) goto parse_storeimage;
        break;
      }

      // optional bool storeimage = 10;
      case 10: {
        if (tag == 80) {
         parse_storeimage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &storeimage_)));
          set_has_storeimage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_storecrop;
        break;
      }

      // optional bool storecrop = 11;
      case 11: {
        if (tag == 88) {
         parse_storecrop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &storecrop_)));
          set_has_storecrop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_codename;
        break;
      }

      // optional string codename = 12;
      case 12: {
        if (tag == 98) {
         parse_codename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codename().data(), this->codename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "codename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_regioncoords;
        break;
      }

      // optional bytes regioncoords = 13;
      case 13: {
        if (tag == 106) {
         parse_regioncoords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_regioncoords()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_delay;
        break;
      }

      // optional double delay = 14;
      case 14: {
        if (tag == 113) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_starttime;
        break;
      }

      // optional string starttime = 15;
      case 15: {
        if (tag == 122) {
         parse_starttime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "starttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_startrecognitiontime;
        break;
      }

      // optional string startrecognitiontime = 16;
      case 16: {
        if (tag == 130) {
         parse_startrecognitiontime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startrecognitiontime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->startrecognitiontime().data(), this->startrecognitiontime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "startrecognitiontime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_region;
        break;
      }

      // optional bool region = 17;
      case 17: {
        if (tag == 136) {
         parse_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_numberofchanges;
        break;
      }

      // optional int32 numberofchanges = 18;
      case 18: {
        if (tag == 144) {
         parse_numberofchanges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofchanges_)));
          set_has_numberofchanges();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_amount;
        break;
      }

      // optional int32 amount = 19;
      case 19: {
        if (tag == 152) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_matfile;
        break;
      }

      // repeated int32 matfile = 20;
      case 20: {
        if (tag == 160) {
         parse_matfile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_matfile())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_matfile())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_matfile;
        if (input->ExpectTag(168)) goto parse_activemat;
        break;
      }

      // optional int32 activemat = 21;
      case 21: {
        if (tag == 168) {
         parse_activemat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activemat_)));
          set_has_activemat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_cameras;
        break;
      }

      // optional string cameras = 22;
      case 22: {
        if (tag == 178) {
         parse_cameras:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cameras()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cameras().data(), this->cameras().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cameras");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_activecamera;
        break;
      }

      // optional int32 activecamera = 23;
      case 23: {
        if (tag == 184) {
         parse_activecamera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activecamera_)));
          set_has_activecamera();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_xmlfilename;
        break;
      }

      // optional string xmlfilename = 24;
      case 24: {
        if (tag == 194) {
         parse_xmlfilename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xmlfilename().data(), this->xmlfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xmlfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_xmlfilepath;
        break;
      }

      // optional string xmlfilepath = 25;
      case 25: {
        if (tag == 202) {
         parse_xmlfilepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlfilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xmlfilepath().data(), this->xmlfilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xmlfilepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_instancecount;
        break;
      }

      // optional int32 instancecount = 26;
      case 26: {
        if (tag == 208) {
         parse_instancecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instancecount_)));
          set_has_instancecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_imagefilepath;
        break;
      }

      // optional string imagefilepath = 27;
      case 27: {
        if (tag == 218) {
         parse_imagefilepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagefilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imagefilepath().data(), this->imagefilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imagefilepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_currmonth;
        break;
      }

      // optional string currmonth = 28;
      case 28: {
        if (tag == 226) {
         parse_currmonth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currmonth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currmonth().data(), this->currmonth().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currmonth");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_currday;
        break;
      }

      // optional string currday = 29;
      case 29: {
        if (tag == 234) {
         parse_currday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currday().data(), this->currday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_packagesize;
        break;
      }

      // optional int32 packagesize = 30;
      case 30: {
        if (tag == 240) {
         parse_packagesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packagesize_)));
          set_has_packagesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message)
  // required .motion.Message.ActionType type = 1 [default = ENGAGE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->time(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional int32 data_amount = 4;
  if (has_data_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->data_amount(), output);
  }

  // optional int32 data_total = 5;
  if (has_data_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->data_total(), output);
  }

  // optional string serverip = 6;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->serverip(), output);
  }

  // optional string clientip = 7;
  if (has_clientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientip().data(), this->clientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->clientip(), output);
  }

  // optional bool recognizing = 8;
  if (has_recognizing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->recognizing(), output);
  }

  // repeated .motion.Message.MotionCamera motioncamera = 9;
  for (int i = 0; i < this->motioncamera_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->motioncamera(i), output);
  }

  // optional bool storeimage = 10;
  if (has_storeimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->storeimage(), output);
  }

  // optional bool storecrop = 11;
  if (has_storecrop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->storecrop(), output);
  }

  // optional string codename = 12;
  if (has_codename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codename().data(), this->codename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->codename(), output);
  }

  // optional bytes regioncoords = 13;
  if (has_regioncoords()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->regioncoords(), output);
  }

  // optional double delay = 14;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->delay(), output);
  }

  // optional string starttime = 15;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->starttime(), output);
  }

  // optional string startrecognitiontime = 16;
  if (has_startrecognitiontime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startrecognitiontime().data(), this->startrecognitiontime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "startrecognitiontime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->startrecognitiontime(), output);
  }

  // optional bool region = 17;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->region(), output);
  }

  // optional int32 numberofchanges = 18;
  if (has_numberofchanges()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->numberofchanges(), output);
  }

  // optional int32 amount = 19;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->amount(), output);
  }

  // repeated int32 matfile = 20;
  for (int i = 0; i < this->matfile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->matfile(i), output);
  }

  // optional int32 activemat = 21;
  if (has_activemat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->activemat(), output);
  }

  // optional string cameras = 22;
  if (has_cameras()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cameras().data(), this->cameras().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cameras");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->cameras(), output);
  }

  // optional int32 activecamera = 23;
  if (has_activecamera()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->activecamera(), output);
  }

  // optional string xmlfilename = 24;
  if (has_xmlfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xmlfilename().data(), this->xmlfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xmlfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->xmlfilename(), output);
  }

  // optional string xmlfilepath = 25;
  if (has_xmlfilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xmlfilepath().data(), this->xmlfilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xmlfilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->xmlfilepath(), output);
  }

  // optional int32 instancecount = 26;
  if (has_instancecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->instancecount(), output);
  }

  // optional string imagefilepath = 27;
  if (has_imagefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagefilepath().data(), this->imagefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imagefilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->imagefilepath(), output);
  }

  // optional string currmonth = 28;
  if (has_currmonth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currmonth().data(), this->currmonth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currmonth");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->currmonth(), output);
  }

  // optional string currday = 29;
  if (has_currday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currday().data(), this->currday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->currday(), output);
  }

  // optional int32 packagesize = 30;
  if (has_packagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->packagesize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message)
  // required .motion.Message.ActionType type = 1 [default = ENGAGE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional int32 data_amount = 4;
  if (has_data_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->data_amount(), target);
  }

  // optional int32 data_total = 5;
  if (has_data_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->data_total(), target);
  }

  // optional string serverip = 6;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->serverip(), target);
  }

  // optional string clientip = 7;
  if (has_clientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientip().data(), this->clientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->clientip(), target);
  }

  // optional bool recognizing = 8;
  if (has_recognizing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->recognizing(), target);
  }

  // repeated .motion.Message.MotionCamera motioncamera = 9;
  for (int i = 0; i < this->motioncamera_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->motioncamera(i), target);
  }

  // optional bool storeimage = 10;
  if (has_storeimage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->storeimage(), target);
  }

  // optional bool storecrop = 11;
  if (has_storecrop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->storecrop(), target);
  }

  // optional string codename = 12;
  if (has_codename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codename().data(), this->codename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->codename(), target);
  }

  // optional bytes regioncoords = 13;
  if (has_regioncoords()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->regioncoords(), target);
  }

  // optional double delay = 14;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->delay(), target);
  }

  // optional string starttime = 15;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starttime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->starttime(), target);
  }

  // optional string startrecognitiontime = 16;
  if (has_startrecognitiontime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startrecognitiontime().data(), this->startrecognitiontime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "startrecognitiontime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->startrecognitiontime(), target);
  }

  // optional bool region = 17;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->region(), target);
  }

  // optional int32 numberofchanges = 18;
  if (has_numberofchanges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->numberofchanges(), target);
  }

  // optional int32 amount = 19;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->amount(), target);
  }

  // repeated int32 matfile = 20;
  for (int i = 0; i < this->matfile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->matfile(i), target);
  }

  // optional int32 activemat = 21;
  if (has_activemat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->activemat(), target);
  }

  // optional string cameras = 22;
  if (has_cameras()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cameras().data(), this->cameras().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cameras");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->cameras(), target);
  }

  // optional int32 activecamera = 23;
  if (has_activecamera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->activecamera(), target);
  }

  // optional string xmlfilename = 24;
  if (has_xmlfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xmlfilename().data(), this->xmlfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xmlfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->xmlfilename(), target);
  }

  // optional string xmlfilepath = 25;
  if (has_xmlfilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xmlfilepath().data(), this->xmlfilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xmlfilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->xmlfilepath(), target);
  }

  // optional int32 instancecount = 26;
  if (has_instancecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->instancecount(), target);
  }

  // optional string imagefilepath = 27;
  if (has_imagefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagefilepath().data(), this->imagefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imagefilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->imagefilepath(), target);
  }

  // optional string currmonth = 28;
  if (has_currmonth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currmonth().data(), this->currmonth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currmonth");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->currmonth(), target);
  }

  // optional string currday = 29;
  if (has_currday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currday().data(), this->currday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->currday(), target);
  }

  // optional int32 packagesize = 30;
  if (has_packagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->packagesize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .motion.Message.ActionType type = 1 [default = ENGAGE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 data_amount = 4;
    if (has_data_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_amount());
    }

    // optional int32 data_total = 5;
    if (has_data_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_total());
    }

    // optional string serverip = 6;
    if (has_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverip());
    }

    // optional string clientip = 7;
    if (has_clientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientip());
    }

    // optional bool recognizing = 8;
    if (has_recognizing()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool storeimage = 10;
    if (has_storeimage()) {
      total_size += 1 + 1;
    }

    // optional bool storecrop = 11;
    if (has_storecrop()) {
      total_size += 1 + 1;
    }

    // optional string codename = 12;
    if (has_codename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codename());
    }

    // optional bytes regioncoords = 13;
    if (has_regioncoords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->regioncoords());
    }

    // optional double delay = 14;
    if (has_delay()) {
      total_size += 1 + 8;
    }

    // optional string starttime = 15;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // optional string startrecognitiontime = 16;
    if (has_startrecognitiontime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startrecognitiontime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool region = 17;
    if (has_region()) {
      total_size += 2 + 1;
    }

    // optional int32 numberofchanges = 18;
    if (has_numberofchanges()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberofchanges());
    }

    // optional int32 amount = 19;
    if (has_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // optional int32 activemat = 21;
    if (has_activemat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activemat());
    }

    // optional string cameras = 22;
    if (has_cameras()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cameras());
    }

    // optional int32 activecamera = 23;
    if (has_activecamera()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activecamera());
    }

    // optional string xmlfilename = 24;
    if (has_xmlfilename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlfilename());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string xmlfilepath = 25;
    if (has_xmlfilepath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlfilepath());
    }

    // optional int32 instancecount = 26;
    if (has_instancecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instancecount());
    }

    // optional string imagefilepath = 27;
    if (has_imagefilepath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagefilepath());
    }

    // optional string currmonth = 28;
    if (has_currmonth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currmonth());
    }

    // optional string currday = 29;
    if (has_currday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currday());
    }

    // optional int32 packagesize = 30;
    if (has_packagesize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packagesize());
    }

  }
  // repeated .motion.Message.MotionCamera motioncamera = 9;
  total_size += 1 * this->motioncamera_size();
  for (int i = 0; i < this->motioncamera_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motioncamera(i));
  }

  // repeated int32 matfile = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->matfile_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->matfile(i));
    }
    total_size += 2 * this->matfile_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  motioncamera_.MergeFrom(from.motioncamera_);
  matfile_.MergeFrom(from.matfile_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_data_amount()) {
      set_data_amount(from.data_amount());
    }
    if (from.has_data_total()) {
      set_data_total(from.data_total());
    }
    if (from.has_serverip()) {
      set_serverip(from.serverip());
    }
    if (from.has_clientip()) {
      set_clientip(from.clientip());
    }
    if (from.has_recognizing()) {
      set_recognizing(from.recognizing());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_storeimage()) {
      set_storeimage(from.storeimage());
    }
    if (from.has_storecrop()) {
      set_storecrop(from.storecrop());
    }
    if (from.has_codename()) {
      set_codename(from.codename());
    }
    if (from.has_regioncoords()) {
      set_regioncoords(from.regioncoords());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_startrecognitiontime()) {
      set_startrecognitiontime(from.startrecognitiontime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_numberofchanges()) {
      set_numberofchanges(from.numberofchanges());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_activemat()) {
      set_activemat(from.activemat());
    }
    if (from.has_cameras()) {
      set_cameras(from.cameras());
    }
    if (from.has_activecamera()) {
      set_activecamera(from.activecamera());
    }
    if (from.has_xmlfilename()) {
      set_xmlfilename(from.xmlfilename());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_xmlfilepath()) {
      set_xmlfilepath(from.xmlfilepath());
    }
    if (from.has_instancecount()) {
      set_instancecount(from.instancecount());
    }
    if (from.has_imagefilepath()) {
      set_imagefilepath(from.imagefilepath());
    }
    if (from.has_currmonth()) {
      set_currmonth(from.currmonth());
    }
    if (from.has_currday()) {
      set_currday(from.currday());
    }
    if (from.has_packagesize()) {
      set_packagesize(from.packagesize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->motioncamera())) return false;
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(data_, other->data_);
    std::swap(data_amount_, other->data_amount_);
    std::swap(data_total_, other->data_total_);
    std::swap(serverip_, other->serverip_);
    std::swap(clientip_, other->clientip_);
    std::swap(recognizing_, other->recognizing_);
    motioncamera_.Swap(&other->motioncamera_);
    std::swap(storeimage_, other->storeimage_);
    std::swap(storecrop_, other->storecrop_);
    std::swap(codename_, other->codename_);
    std::swap(regioncoords_, other->regioncoords_);
    std::swap(delay_, other->delay_);
    std::swap(starttime_, other->starttime_);
    std::swap(startrecognitiontime_, other->startrecognitiontime_);
    std::swap(region_, other->region_);
    std::swap(numberofchanges_, other->numberofchanges_);
    std::swap(amount_, other->amount_);
    matfile_.Swap(&other->matfile_);
    std::swap(activemat_, other->activemat_);
    std::swap(cameras_, other->cameras_);
    std::swap(activecamera_, other->activecamera_);
    std::swap(xmlfilename_, other->xmlfilename_);
    std::swap(xmlfilepath_, other->xmlfilepath_);
    std::swap(instancecount_, other->instancecount_);
    std::swap(imagefilepath_, other->imagefilepath_);
    std::swap(currmonth_, other->currmonth_);
    std::swap(currday_, other->currday_);
    std::swap(packagesize_, other->packagesize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace motion

// @@protoc_insertion_point(global_scope)
