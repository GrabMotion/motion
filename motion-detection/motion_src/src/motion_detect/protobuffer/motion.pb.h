// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motion.proto

#ifndef PROTOBUF_motion_2eproto__INCLUDED
#define PROTOBUF_motion_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace motion {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_motion_2eproto();
void protobuf_AssignDesc_motion_2eproto();
void protobuf_ShutdownFile_motion_2eproto();

class Message;
class Message_MotionCamera;
class Message_MotionRecognition;
class Message_MotionMonth;
class Message_MotionDay;
class Message_Instance;
class Message_Image;
class Message_Crop;
class Message_Video;

enum Message_ActionType {
  Message_ActionType_ENGAGE = 1000,
  Message_ActionType_REC_START = 1002,
  Message_ActionType_REC_RUNNING = 1003,
  Message_ActionType_REC_STOP = 1004,
  Message_ActionType_UNENGAGE = 1005,
  Message_ActionType_GET_TIME = 1006,
  Message_ActionType_SET_TIME = 1007,
  Message_ActionType_TIME_SET = 1008,
  Message_ActionType_STRM_START = 1009,
  Message_ActionType_STRM_STOP = 1010,
  Message_ActionType_TAKE_PICTURE = 1011,
  Message_ActionType_DISSCONNECT = 1012,
  Message_ActionType_REFRESH = 1013,
  Message_ActionType_GET_XML = 1014,
  Message_ActionType_GET_IMAGE = 1015,
  Message_ActionType_GET_VIDEO = 1016,
  Message_ActionType_RESPONSE_OK = 2000,
  Message_ActionType_RESPONSE_NEXT = 2010,
  Message_ActionType_RESPONSE_END = 2020,
  Message_ActionType_RESPONSE_FINISH = 2030,
  Message_ActionType_REC_HAS_CHANGES = 2040,
  Message_ActionType_REC_HAS_INSTANCE = 2050,
  Message_ActionType_PROTO_HAS_FILE = 3030,
  Message_ActionType_PROTO_NO_FILE = 3031
};
bool Message_ActionType_IsValid(int value);
const Message_ActionType Message_ActionType_ActionType_MIN = Message_ActionType_ENGAGE;
const Message_ActionType Message_ActionType_ActionType_MAX = Message_ActionType_PROTO_NO_FILE;
const int Message_ActionType_ActionType_ARRAYSIZE = Message_ActionType_ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_ActionType_descriptor();
inline const ::std::string& Message_ActionType_Name(Message_ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_ActionType_descriptor(), value);
}
inline bool Message_ActionType_Parse(
    const ::std::string& name, Message_ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_ActionType>(
    Message_ActionType_descriptor(), name, value);
}
enum Message_SocketType {
  Message_SocketType_SOCKET_PROTO_TOSTRING = 10,
  Message_SocketType_SOCKET_PROTO_TOARRAY = 11,
  Message_SocketType_SOCKET_PLAIN_TEXT = 12,
  Message_SocketType_SPLITTED_MESSAGE = 13,
  Message_SocketType_SINGLE_MESSAGE = 14,
  Message_SocketType_SOCKET_BUFFER_NANO_SIZE = 1024,
  Message_SocketType_SOCKET_BUFFER_MINI_SIZE = 2048,
  Message_SocketType_SOCKET_BUFFER_MICRO_SIZE = 4096,
  Message_SocketType_SOCKET_BUFFER_SMALL_SIZE = 8196,
  Message_SocketType_SOCKET_BUFFER_REGULAR_SIZE = 16392,
  Message_SocketType_SOCKET_BUFFER_MEDIUM_SIZE = 32784,
  Message_SocketType_SOCKET_BUFFER_BIG_SIZE = 65568,
  Message_SocketType_TCP_ECHO_PORT = 5010,
  Message_SocketType_TCP_STREAMING_PORT = 5020,
  Message_SocketType_UDP_PORT = 5030,
  Message_SocketType_TCP_MSG_PORT = 5040
};
bool Message_SocketType_IsValid(int value);
const Message_SocketType Message_SocketType_SocketType_MIN = Message_SocketType_SOCKET_PROTO_TOSTRING;
const Message_SocketType Message_SocketType_SocketType_MAX = Message_SocketType_SOCKET_BUFFER_BIG_SIZE;
const int Message_SocketType_SocketType_ARRAYSIZE = Message_SocketType_SocketType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_SocketType_descriptor();
inline const ::std::string& Message_SocketType_Name(Message_SocketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_SocketType_descriptor(), value);
}
inline bool Message_SocketType_Parse(
    const ::std::string& name, Message_SocketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_SocketType>(
    Message_SocketType_descriptor(), name, value);
}
enum Message_ProcessType {
  Message_ProcessType_PROCESS_PEOPLE_COUNT = 4001,
  Message_ProcessType_PROCESS_FACE_DETECT = 4002,
  Message_ProcessType_PROCESS_WALK_DIRECTION = 4003
};
bool Message_ProcessType_IsValid(int value);
const Message_ProcessType Message_ProcessType_ProcessType_MIN = Message_ProcessType_PROCESS_PEOPLE_COUNT;
const Message_ProcessType Message_ProcessType_ProcessType_MAX = Message_ProcessType_PROCESS_WALK_DIRECTION;
const int Message_ProcessType_ProcessType_ARRAYSIZE = Message_ProcessType_ProcessType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_ProcessType_descriptor();
inline const ::std::string& Message_ProcessType_Name(Message_ProcessType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_ProcessType_descriptor(), value);
}
inline bool Message_ProcessType_Parse(
    const ::std::string& name, Message_ProcessType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_ProcessType>(
    Message_ProcessType_descriptor(), name, value);
}
// ===================================================================

class Message_MotionCamera : public ::google::protobuf::Message {
 public:
  Message_MotionCamera();
  virtual ~Message_MotionCamera();

  Message_MotionCamera(const Message_MotionCamera& from);

  inline Message_MotionCamera& operator=(const Message_MotionCamera& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_MotionCamera& default_instance();

  void Swap(Message_MotionCamera* other);

  // implements Message ----------------------------------------------

  Message_MotionCamera* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_MotionCamera& from);
  void MergeFrom(const Message_MotionCamera& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .motion.Message.MotionMonth motionmonth = 1;
  inline int motionmonth_size() const;
  inline void clear_motionmonth();
  static const int kMotionmonthFieldNumber = 1;
  inline const ::motion::Message_MotionMonth& motionmonth(int index) const;
  inline ::motion::Message_MotionMonth* mutable_motionmonth(int index);
  inline ::motion::Message_MotionMonth* add_motionmonth();
  inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionMonth >&
      motionmonth() const;
  inline ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionMonth >*
      mutable_motionmonth();

  // repeated .motion.Message.MotionRecognition motionrec = 2;
  inline int motionrec_size() const;
  inline void clear_motionrec();
  static const int kMotionrecFieldNumber = 2;
  inline const ::motion::Message_MotionRecognition& motionrec(int index) const;
  inline ::motion::Message_MotionRecognition* mutable_motionrec(int index);
  inline ::motion::Message_MotionRecognition* add_motionrec();
  inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionRecognition >&
      motionrec() const;
  inline ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionRecognition >*
      mutable_motionrec();

  // optional int32 cameraid = 3 [default = 0];
  inline bool has_cameraid() const;
  inline void clear_cameraid();
  static const int kCameraidFieldNumber = 3;
  inline ::google::protobuf::int32 cameraid() const;
  inline void set_cameraid(::google::protobuf::int32 value);

  // optional int32 cameranumber = 4;
  inline bool has_cameranumber() const;
  inline void clear_cameranumber();
  static const int kCameranumberFieldNumber = 4;
  inline ::google::protobuf::int32 cameranumber() const;
  inline void set_cameranumber(::google::protobuf::int32 value);

  // optional string cameraname = 5;
  inline bool has_cameraname() const;
  inline void clear_cameraname();
  static const int kCameranameFieldNumber = 5;
  inline const ::std::string& cameraname() const;
  inline void set_cameraname(const ::std::string& value);
  inline void set_cameraname(const char* value);
  inline void set_cameraname(const char* value, size_t size);
  inline ::std::string* mutable_cameraname();
  inline ::std::string* release_cameraname();
  inline void set_allocated_cameraname(::std::string* cameraname);

  // optional string timestart = 6;
  inline bool has_timestart() const;
  inline void clear_timestart();
  static const int kTimestartFieldNumber = 6;
  inline const ::std::string& timestart() const;
  inline void set_timestart(const ::std::string& value);
  inline void set_timestart(const char* value);
  inline void set_timestart(const char* value, size_t size);
  inline ::std::string* mutable_timestart();
  inline ::std::string* release_timestart();
  inline void set_allocated_timestart(::std::string* timestart);

  // optional string timeend = 7;
  inline bool has_timeend() const;
  inline void clear_timeend();
  static const int kTimeendFieldNumber = 7;
  inline const ::std::string& timeend() const;
  inline void set_timeend(const ::std::string& value);
  inline void set_timeend(const char* value);
  inline void set_timeend(const char* value, size_t size);
  inline ::std::string* mutable_timeend();
  inline ::std::string* release_timeend();
  inline void set_allocated_timeend(::std::string* timeend);

  // optional string name = 8;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 8;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool recognizing = 9;
  inline bool has_recognizing() const;
  inline void clear_recognizing();
  static const int kRecognizingFieldNumber = 9;
  inline bool recognizing() const;
  inline void set_recognizing(bool value);

  // optional string camerasince = 10;
  inline bool has_camerasince() const;
  inline void clear_camerasince();
  static const int kCamerasinceFieldNumber = 10;
  inline const ::std::string& camerasince() const;
  inline void set_camerasince(const ::std::string& value);
  inline void set_camerasince(const char* value);
  inline void set_camerasince(const char* value, size_t size);
  inline ::std::string* mutable_camerasince();
  inline ::std::string* release_camerasince();
  inline void set_allocated_camerasince(::std::string* camerasince);

  // optional bool storeimage = 11;
  inline bool has_storeimage() const;
  inline void clear_storeimage();
  static const int kStoreimageFieldNumber = 11;
  inline bool storeimage() const;
  inline void set_storeimage(bool value);

  // optional bool storevideo = 12;
  inline bool has_storevideo() const;
  inline void clear_storevideo();
  static const int kStorevideoFieldNumber = 12;
  inline bool storevideo() const;
  inline void set_storevideo(bool value);

  // optional string codename = 14;
  inline bool has_codename() const;
  inline void clear_codename();
  static const int kCodenameFieldNumber = 14;
  inline const ::std::string& codename() const;
  inline void set_codename(const ::std::string& value);
  inline void set_codename(const char* value);
  inline void set_codename(const char* value, size_t size);
  inline ::std::string* mutable_codename();
  inline ::std::string* release_codename();
  inline void set_allocated_codename(::std::string* codename);

  // optional bool hasregion = 15;
  inline bool has_hasregion() const;
  inline void clear_hasregion();
  static const int kHasregionFieldNumber = 15;
  inline bool hasregion() const;
  inline void set_hasregion(bool value);

  // optional string coordinates = 16;
  inline bool has_coordinates() const;
  inline void clear_coordinates();
  static const int kCoordinatesFieldNumber = 16;
  inline const ::std::string& coordinates() const;
  inline void set_coordinates(const ::std::string& value);
  inline void set_coordinates(const char* value);
  inline void set_coordinates(const char* value, size_t size);
  inline ::std::string* mutable_coordinates();
  inline ::std::string* release_coordinates();
  inline void set_allocated_coordinates(::std::string* coordinates);

  // optional int32 delay = 17;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 17;
  inline ::google::protobuf::int32 delay() const;
  inline void set_delay(::google::protobuf::int32 value);

  // optional string startrectime = 18;
  inline bool has_startrectime() const;
  inline void clear_startrectime();
  static const int kStartrectimeFieldNumber = 18;
  inline const ::std::string& startrectime() const;
  inline void set_startrectime(const ::std::string& value);
  inline void set_startrectime(const char* value);
  inline void set_startrectime(const char* value, size_t size);
  inline ::std::string* mutable_startrectime();
  inline ::std::string* release_startrectime();
  inline void set_allocated_startrectime(::std::string* startrectime);

  // optional string stoprectime = 19;
  inline bool has_stoprectime() const;
  inline void clear_stoprectime();
  static const int kStoprectimeFieldNumber = 19;
  inline const ::std::string& stoprectime() const;
  inline void set_stoprectime(const ::std::string& value);
  inline void set_stoprectime(const char* value);
  inline void set_stoprectime(const char* value, size_t size);
  inline ::std::string* mutable_stoprectime();
  inline ::std::string* release_stoprectime();
  inline void set_allocated_stoprectime(::std::string* stoprectime);

  // optional bool runatstartup = 20;
  inline bool has_runatstartup() const;
  inline void clear_runatstartup();
  static const int kRunatstartupFieldNumber = 20;
  inline bool runatstartup() const;
  inline void set_runatstartup(bool value);

  // optional int32 activemat = 21;
  inline bool has_activemat() const;
  inline void clear_activemat();
  static const int kActivematFieldNumber = 21;
  inline ::google::protobuf::int32 activemat() const;
  inline void set_activemat(::google::protobuf::int32 value);

  // optional bool recognizing_flag = 22;
  inline bool has_recognizing_flag() const;
  inline void clear_recognizing_flag();
  static const int kRecognizingFlagFieldNumber = 22;
  inline bool recognizing_flag() const;
  inline void set_recognizing_flag(bool value);

  // optional int32 db_idcamera = 23;
  inline bool has_db_idcamera() const;
  inline void clear_db_idcamera();
  static const int kDbIdcameraFieldNumber = 23;
  inline ::google::protobuf::int32 db_idcamera() const;
  inline void set_db_idcamera(::google::protobuf::int32 value);

  // optional int32 db_idmat = 24;
  inline bool has_db_idmat() const;
  inline void clear_db_idmat();
  static const int kDbIdmatFieldNumber = 24;
  inline ::google::protobuf::int32 db_idmat() const;
  inline void set_db_idmat(::google::protobuf::int32 value);

  // optional int32 matcols = 25;
  inline bool has_matcols() const;
  inline void clear_matcols();
  static const int kMatcolsFieldNumber = 25;
  inline ::google::protobuf::int32 matcols() const;
  inline void set_matcols(::google::protobuf::int32 value);

  // optional int32 matrows = 26;
  inline bool has_matrows() const;
  inline void clear_matrows();
  static const int kMatrowsFieldNumber = 26;
  inline ::google::protobuf::int32 matrows() const;
  inline void set_matrows(::google::protobuf::int32 value);

  // optional int32 matwidth = 27;
  inline bool has_matwidth() const;
  inline void clear_matwidth();
  static const int kMatwidthFieldNumber = 27;
  inline ::google::protobuf::int32 matwidth() const;
  inline void set_matwidth(::google::protobuf::int32 value);

  // optional int32 matheight = 28;
  inline bool has_matheight() const;
  inline void clear_matheight();
  static const int kMatheightFieldNumber = 28;
  inline ::google::protobuf::int32 matheight() const;
  inline void set_matheight(::google::protobuf::int32 value);

  // optional bool fromdatabase = 29;
  inline bool has_fromdatabase() const;
  inline void clear_fromdatabase();
  static const int kFromdatabaseFieldNumber = 29;
  inline bool fromdatabase() const;
  inline void set_fromdatabase(bool value);

  // optional string lastinstance = 30;
  inline bool has_lastinstance() const;
  inline void clear_lastinstance();
  static const int kLastinstanceFieldNumber = 30;
  inline const ::std::string& lastinstance() const;
  inline void set_lastinstance(const ::std::string& value);
  inline void set_lastinstance(const char* value);
  inline void set_lastinstance(const char* value, size_t size);
  inline ::std::string* mutable_lastinstance();
  inline ::std::string* release_lastinstance();
  inline void set_allocated_lastinstance(::std::string* lastinstance);

  // @@protoc_insertion_point(class_scope:motion.Message.MotionCamera)
 private:
  inline void set_has_cameraid();
  inline void clear_has_cameraid();
  inline void set_has_cameranumber();
  inline void clear_has_cameranumber();
  inline void set_has_cameraname();
  inline void clear_has_cameraname();
  inline void set_has_timestart();
  inline void clear_has_timestart();
  inline void set_has_timeend();
  inline void clear_has_timeend();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_recognizing();
  inline void clear_has_recognizing();
  inline void set_has_camerasince();
  inline void clear_has_camerasince();
  inline void set_has_storeimage();
  inline void clear_has_storeimage();
  inline void set_has_storevideo();
  inline void clear_has_storevideo();
  inline void set_has_codename();
  inline void clear_has_codename();
  inline void set_has_hasregion();
  inline void clear_has_hasregion();
  inline void set_has_coordinates();
  inline void clear_has_coordinates();
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_startrectime();
  inline void clear_has_startrectime();
  inline void set_has_stoprectime();
  inline void clear_has_stoprectime();
  inline void set_has_runatstartup();
  inline void clear_has_runatstartup();
  inline void set_has_activemat();
  inline void clear_has_activemat();
  inline void set_has_recognizing_flag();
  inline void clear_has_recognizing_flag();
  inline void set_has_db_idcamera();
  inline void clear_has_db_idcamera();
  inline void set_has_db_idmat();
  inline void clear_has_db_idmat();
  inline void set_has_matcols();
  inline void clear_has_matcols();
  inline void set_has_matrows();
  inline void clear_has_matrows();
  inline void set_has_matwidth();
  inline void clear_has_matwidth();
  inline void set_has_matheight();
  inline void clear_has_matheight();
  inline void set_has_fromdatabase();
  inline void clear_has_fromdatabase();
  inline void set_has_lastinstance();
  inline void clear_has_lastinstance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionMonth > motionmonth_;
  ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionRecognition > motionrec_;
  ::google::protobuf::int32 cameraid_;
  ::google::protobuf::int32 cameranumber_;
  ::std::string* cameraname_;
  ::std::string* timestart_;
  ::std::string* timeend_;
  ::std::string* name_;
  ::std::string* camerasince_;
  bool recognizing_;
  bool storeimage_;
  bool storevideo_;
  bool hasregion_;
  ::google::protobuf::int32 delay_;
  ::std::string* codename_;
  ::std::string* coordinates_;
  ::std::string* startrectime_;
  ::std::string* stoprectime_;
  ::google::protobuf::int32 activemat_;
  ::google::protobuf::int32 db_idcamera_;
  bool runatstartup_;
  bool recognizing_flag_;
  bool fromdatabase_;
  ::google::protobuf::int32 db_idmat_;
  ::google::protobuf::int32 matcols_;
  ::google::protobuf::int32 matrows_;
  ::google::protobuf::int32 matwidth_;
  ::google::protobuf::int32 matheight_;
  ::std::string* lastinstance_;
  friend void  protobuf_AddDesc_motion_2eproto();
  friend void protobuf_AssignDesc_motion_2eproto();
  friend void protobuf_ShutdownFile_motion_2eproto();

  void InitAsDefaultInstance();
  static Message_MotionCamera* default_instance_;
};
// -------------------------------------------------------------------

class Message_MotionRecognition : public ::google::protobuf::Message {
 public:
  Message_MotionRecognition();
  virtual ~Message_MotionRecognition();

  Message_MotionRecognition(const Message_MotionRecognition& from);

  inline Message_MotionRecognition& operator=(const Message_MotionRecognition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_MotionRecognition& default_instance();

  void Swap(Message_MotionRecognition* other);

  // implements Message ----------------------------------------------

  Message_MotionRecognition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_MotionRecognition& from);
  void MergeFrom(const Message_MotionRecognition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 db_idrec = 2;
  inline bool has_db_idrec() const;
  inline void clear_db_idrec();
  static const int kDbIdrecFieldNumber = 2;
  inline ::google::protobuf::int32 db_idrec() const;
  inline void set_db_idrec(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:motion.Message.MotionRecognition)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_db_idrec();
  inline void clear_has_db_idrec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 db_idrec_;
  friend void  protobuf_AddDesc_motion_2eproto();
  friend void protobuf_AssignDesc_motion_2eproto();
  friend void protobuf_ShutdownFile_motion_2eproto();

  void InitAsDefaultInstance();
  static Message_MotionRecognition* default_instance_;
};
// -------------------------------------------------------------------

class Message_MotionMonth : public ::google::protobuf::Message {
 public:
  Message_MotionMonth();
  virtual ~Message_MotionMonth();

  Message_MotionMonth(const Message_MotionMonth& from);

  inline Message_MotionMonth& operator=(const Message_MotionMonth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_MotionMonth& default_instance();

  void Swap(Message_MotionMonth* other);

  // implements Message ----------------------------------------------

  Message_MotionMonth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_MotionMonth& from);
  void MergeFrom(const Message_MotionMonth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .motion.Message.MotionDay motionday = 1;
  inline int motionday_size() const;
  inline void clear_motionday();
  static const int kMotiondayFieldNumber = 1;
  inline const ::motion::Message_MotionDay& motionday(int index) const;
  inline ::motion::Message_MotionDay* mutable_motionday(int index);
  inline ::motion::Message_MotionDay* add_motionday();
  inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionDay >&
      motionday() const;
  inline ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionDay >*
      mutable_motionday();

  // optional string monthlabel = 2;
  inline bool has_monthlabel() const;
  inline void clear_monthlabel();
  static const int kMonthlabelFieldNumber = 2;
  inline const ::std::string& monthlabel() const;
  inline void set_monthlabel(const ::std::string& value);
  inline void set_monthlabel(const char* value);
  inline void set_monthlabel(const char* value, size_t size);
  inline ::std::string* mutable_monthlabel();
  inline ::std::string* release_monthlabel();
  inline void set_allocated_monthlabel(::std::string* monthlabel);

  // @@protoc_insertion_point(class_scope:motion.Message.MotionMonth)
 private:
  inline void set_has_monthlabel();
  inline void clear_has_monthlabel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionDay > motionday_;
  ::std::string* monthlabel_;
  friend void  protobuf_AddDesc_motion_2eproto();
  friend void protobuf_AssignDesc_motion_2eproto();
  friend void protobuf_ShutdownFile_motion_2eproto();

  void InitAsDefaultInstance();
  static Message_MotionMonth* default_instance_;
};
// -------------------------------------------------------------------

class Message_MotionDay : public ::google::protobuf::Message {
 public:
  Message_MotionDay();
  virtual ~Message_MotionDay();

  Message_MotionDay(const Message_MotionDay& from);

  inline Message_MotionDay& operator=(const Message_MotionDay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_MotionDay& default_instance();

  void Swap(Message_MotionDay* other);

  // implements Message ----------------------------------------------

  Message_MotionDay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_MotionDay& from);
  void MergeFrom(const Message_MotionDay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .motion.Message.Instance instance = 1;
  inline int instance_size() const;
  inline void clear_instance();
  static const int kInstanceFieldNumber = 1;
  inline const ::motion::Message_Instance& instance(int index) const;
  inline ::motion::Message_Instance* mutable_instance(int index);
  inline ::motion::Message_Instance* add_instance();
  inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_Instance >&
      instance() const;
  inline ::google::protobuf::RepeatedPtrField< ::motion::Message_Instance >*
      mutable_instance();

  // optional string daylabel = 2;
  inline bool has_daylabel() const;
  inline void clear_daylabel();
  static const int kDaylabelFieldNumber = 2;
  inline const ::std::string& daylabel() const;
  inline void set_daylabel(const ::std::string& value);
  inline void set_daylabel(const char* value);
  inline void set_daylabel(const char* value, size_t size);
  inline ::std::string* mutable_daylabel();
  inline ::std::string* release_daylabel();
  inline void set_allocated_daylabel(::std::string* daylabel);

  // optional int32 db_dayid = 3;
  inline bool has_db_dayid() const;
  inline void clear_db_dayid();
  static const int kDbDayidFieldNumber = 3;
  inline ::google::protobuf::int32 db_dayid() const;
  inline void set_db_dayid(::google::protobuf::int32 value);

  // optional int32 db_recognitionsetupid = 4;
  inline bool has_db_recognitionsetupid() const;
  inline void clear_db_recognitionsetupid();
  static const int kDbRecognitionsetupidFieldNumber = 4;
  inline ::google::protobuf::int32 db_recognitionsetupid() const;
  inline void set_db_recognitionsetupid(::google::protobuf::int32 value);

  // optional string xmlfilename = 5;
  inline bool has_xmlfilename() const;
  inline void clear_xmlfilename();
  static const int kXmlfilenameFieldNumber = 5;
  inline const ::std::string& xmlfilename() const;
  inline void set_xmlfilename(const ::std::string& value);
  inline void set_xmlfilename(const char* value);
  inline void set_xmlfilename(const char* value, size_t size);
  inline ::std::string* mutable_xmlfilename();
  inline ::std::string* release_xmlfilename();
  inline void set_allocated_xmlfilename(::std::string* xmlfilename);

  // optional string xmlfilepath = 6;
  inline bool has_xmlfilepath() const;
  inline void clear_xmlfilepath();
  static const int kXmlfilepathFieldNumber = 6;
  inline const ::std::string& xmlfilepath() const;
  inline void set_xmlfilepath(const ::std::string& value);
  inline void set_xmlfilepath(const char* value);
  inline void set_xmlfilepath(const char* value, size_t size);
  inline ::std::string* mutable_xmlfilepath();
  inline ::std::string* release_xmlfilepath();
  inline void set_allocated_xmlfilepath(::std::string* xmlfilepath);

  // @@protoc_insertion_point(class_scope:motion.Message.MotionDay)
 private:
  inline void set_has_daylabel();
  inline void clear_has_daylabel();
  inline void set_has_db_dayid();
  inline void clear_has_db_dayid();
  inline void set_has_db_recognitionsetupid();
  inline void clear_has_db_recognitionsetupid();
  inline void set_has_xmlfilename();
  inline void clear_has_xmlfilename();
  inline void set_has_xmlfilepath();
  inline void clear_has_xmlfilepath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::motion::Message_Instance > instance_;
  ::std::string* daylabel_;
  ::google::protobuf::int32 db_dayid_;
  ::google::protobuf::int32 db_recognitionsetupid_;
  ::std::string* xmlfilename_;
  ::std::string* xmlfilepath_;
  friend void  protobuf_AddDesc_motion_2eproto();
  friend void protobuf_AssignDesc_motion_2eproto();
  friend void protobuf_ShutdownFile_motion_2eproto();

  void InitAsDefaultInstance();
  static Message_MotionDay* default_instance_;
};
// -------------------------------------------------------------------

class Message_Instance : public ::google::protobuf::Message {
 public:
  Message_Instance();
  virtual ~Message_Instance();

  Message_Instance(const Message_Instance& from);

  inline Message_Instance& operator=(const Message_Instance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_Instance& default_instance();

  void Swap(Message_Instance* other);

  // implements Message ----------------------------------------------

  Message_Instance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_Instance& from);
  void MergeFrom(const Message_Instance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 idinstance = 1;
  inline bool has_idinstance() const;
  inline void clear_idinstance();
  static const int kIdinstanceFieldNumber = 1;
  inline ::google::protobuf::int32 idinstance() const;
  inline void set_idinstance(::google::protobuf::int32 value);

  // optional string instancestart = 2;
  inline bool has_instancestart() const;
  inline void clear_instancestart();
  static const int kInstancestartFieldNumber = 2;
  inline const ::std::string& instancestart() const;
  inline void set_instancestart(const ::std::string& value);
  inline void set_instancestart(const char* value);
  inline void set_instancestart(const char* value, size_t size);
  inline ::std::string* mutable_instancestart();
  inline ::std::string* release_instancestart();
  inline void set_allocated_instancestart(::std::string* instancestart);

  // optional string instanceend = 3;
  inline bool has_instanceend() const;
  inline void clear_instanceend();
  static const int kInstanceendFieldNumber = 3;
  inline const ::std::string& instanceend() const;
  inline void set_instanceend(const ::std::string& value);
  inline void set_instanceend(const char* value);
  inline void set_instanceend(const char* value, size_t size);
  inline ::std::string* mutable_instanceend();
  inline ::std::string* release_instanceend();
  inline void set_allocated_instanceend(::std::string* instanceend);

  // optional string fileformat = 4;
  inline bool has_fileformat() const;
  inline void clear_fileformat();
  static const int kFileformatFieldNumber = 4;
  inline const ::std::string& fileformat() const;
  inline void set_fileformat(const ::std::string& value);
  inline void set_fileformat(const char* value);
  inline void set_fileformat(const char* value, size_t size);
  inline ::std::string* mutable_fileformat();
  inline ::std::string* release_fileformat();
  inline void set_allocated_fileformat(::std::string* fileformat);

  // repeated .motion.Message.Image image = 5;
  inline int image_size() const;
  inline void clear_image();
  static const int kImageFieldNumber = 5;
  inline const ::motion::Message_Image& image(int index) const;
  inline ::motion::Message_Image* mutable_image(int index);
  inline ::motion::Message_Image* add_image();
  inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_Image >&
      image() const;
  inline ::google::protobuf::RepeatedPtrField< ::motion::Message_Image >*
      mutable_image();

  // repeated .motion.Message.Crop crop = 6;
  inline int crop_size() const;
  inline void clear_crop();
  static const int kCropFieldNumber = 6;
  inline const ::motion::Message_Crop& crop(int index) const;
  inline ::motion::Message_Crop* mutable_crop(int index);
  inline ::motion::Message_Crop* add_crop();
  inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_Crop >&
      crop() const;
  inline ::google::protobuf::RepeatedPtrField< ::motion::Message_Crop >*
      mutable_crop();

  // optional .motion.Message.Video video = 7;
  inline bool has_video() const;
  inline void clear_video();
  static const int kVideoFieldNumber = 7;
  inline const ::motion::Message_Video& video() const;
  inline ::motion::Message_Video* mutable_video();
  inline ::motion::Message_Video* release_video();
  inline void set_allocated_video(::motion::Message_Video* video);

  // @@protoc_insertion_point(class_scope:motion.Message.Instance)
 private:
  inline void set_has_idinstance();
  inline void clear_has_idinstance();
  inline void set_has_instancestart();
  inline void clear_has_instancestart();
  inline void set_has_instanceend();
  inline void clear_has_instanceend();
  inline void set_has_fileformat();
  inline void clear_has_fileformat();
  inline void set_has_video();
  inline void clear_has_video();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* instancestart_;
  ::std::string* instanceend_;
  ::std::string* fileformat_;
  ::google::protobuf::RepeatedPtrField< ::motion::Message_Image > image_;
  ::google::protobuf::RepeatedPtrField< ::motion::Message_Crop > crop_;
  ::motion::Message_Video* video_;
  ::google::protobuf::int32 idinstance_;
  friend void  protobuf_AddDesc_motion_2eproto();
  friend void protobuf_AssignDesc_motion_2eproto();
  friend void protobuf_ShutdownFile_motion_2eproto();

  void InitAsDefaultInstance();
  static Message_Instance* default_instance_;
};
// -------------------------------------------------------------------

class Message_Image : public ::google::protobuf::Message {
 public:
  Message_Image();
  virtual ~Message_Image();

  Message_Image(const Message_Image& from);

  inline Message_Image& operator=(const Message_Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_Image& default_instance();

  void Swap(Message_Image* other);

  // implements Message ----------------------------------------------

  Message_Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_Image& from);
  void MergeFrom(const Message_Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 imagechanges = 3;
  inline bool has_imagechanges() const;
  inline void clear_imagechanges();
  static const int kImagechangesFieldNumber = 3;
  inline ::google::protobuf::int32 imagechanges() const;
  inline void set_imagechanges(::google::protobuf::int32 value);

  // optional string time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // @@protoc_insertion_point(class_scope:motion.Message.Image)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_imagechanges();
  inline void clear_has_imagechanges();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  ::std::string* name_;
  ::std::string* time_;
  ::google::protobuf::int32 imagechanges_;
  friend void  protobuf_AddDesc_motion_2eproto();
  friend void protobuf_AssignDesc_motion_2eproto();
  friend void protobuf_ShutdownFile_motion_2eproto();

  void InitAsDefaultInstance();
  static Message_Image* default_instance_;
};
// -------------------------------------------------------------------

class Message_Crop : public ::google::protobuf::Message {
 public:
  Message_Crop();
  virtual ~Message_Crop();

  Message_Crop(const Message_Crop& from);

  inline Message_Crop& operator=(const Message_Crop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_Crop& default_instance();

  void Swap(Message_Crop* other);

  // implements Message ----------------------------------------------

  Message_Crop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_Crop& from);
  void MergeFrom(const Message_Crop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string rect = 1;
  inline bool has_rect() const;
  inline void clear_rect();
  static const int kRectFieldNumber = 1;
  inline const ::std::string& rect() const;
  inline void set_rect(const ::std::string& value);
  inline void set_rect(const char* value);
  inline void set_rect(const char* value, size_t size);
  inline ::std::string* mutable_rect();
  inline ::std::string* release_rect();
  inline void set_allocated_rect(::std::string* rect);

  // optional int32 db_imagefatherid = 2;
  inline bool has_db_imagefatherid() const;
  inline void clear_db_imagefatherid();
  static const int kDbImagefatheridFieldNumber = 2;
  inline ::google::protobuf::int32 db_imagefatherid() const;
  inline void set_db_imagefatherid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:motion.Message.Crop)
 private:
  inline void set_has_rect();
  inline void clear_has_rect();
  inline void set_has_db_imagefatherid();
  inline void clear_has_db_imagefatherid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* rect_;
  ::google::protobuf::int32 db_imagefatherid_;
  friend void  protobuf_AddDesc_motion_2eproto();
  friend void protobuf_AssignDesc_motion_2eproto();
  friend void protobuf_ShutdownFile_motion_2eproto();

  void InitAsDefaultInstance();
  static Message_Crop* default_instance_;
};
// -------------------------------------------------------------------

class Message_Video : public ::google::protobuf::Message {
 public:
  Message_Video();
  virtual ~Message_Video();

  Message_Video(const Message_Video& from);

  inline Message_Video& operator=(const Message_Video& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_Video& default_instance();

  void Swap(Message_Video* other);

  // implements Message ----------------------------------------------

  Message_Video* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_Video& from);
  void MergeFrom(const Message_Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string instancefolder = 3;
  inline bool has_instancefolder() const;
  inline void clear_instancefolder();
  static const int kInstancefolderFieldNumber = 3;
  inline const ::std::string& instancefolder() const;
  inline void set_instancefolder(const ::std::string& value);
  inline void set_instancefolder(const char* value);
  inline void set_instancefolder(const char* value, size_t size);
  inline ::std::string* mutable_instancefolder();
  inline ::std::string* release_instancefolder();
  inline void set_allocated_instancefolder(::std::string* instancefolder);

  // @@protoc_insertion_point(class_scope:motion.Message.Video)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_instancefolder();
  inline void clear_has_instancefolder();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  ::std::string* name_;
  ::std::string* instancefolder_;
  friend void  protobuf_AddDesc_motion_2eproto();
  friend void protobuf_AssignDesc_motion_2eproto();
  friend void protobuf_ShutdownFile_motion_2eproto();

  void InitAsDefaultInstance();
  static Message_Video* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Message_MotionCamera MotionCamera;
  typedef Message_MotionRecognition MotionRecognition;
  typedef Message_MotionMonth MotionMonth;
  typedef Message_MotionDay MotionDay;
  typedef Message_Instance Instance;
  typedef Message_Image Image;
  typedef Message_Crop Crop;
  typedef Message_Video Video;

  typedef Message_ActionType ActionType;
  static const ActionType ENGAGE = Message_ActionType_ENGAGE;
  static const ActionType REC_START = Message_ActionType_REC_START;
  static const ActionType REC_RUNNING = Message_ActionType_REC_RUNNING;
  static const ActionType REC_STOP = Message_ActionType_REC_STOP;
  static const ActionType UNENGAGE = Message_ActionType_UNENGAGE;
  static const ActionType GET_TIME = Message_ActionType_GET_TIME;
  static const ActionType SET_TIME = Message_ActionType_SET_TIME;
  static const ActionType TIME_SET = Message_ActionType_TIME_SET;
  static const ActionType STRM_START = Message_ActionType_STRM_START;
  static const ActionType STRM_STOP = Message_ActionType_STRM_STOP;
  static const ActionType TAKE_PICTURE = Message_ActionType_TAKE_PICTURE;
  static const ActionType DISSCONNECT = Message_ActionType_DISSCONNECT;
  static const ActionType REFRESH = Message_ActionType_REFRESH;
  static const ActionType GET_XML = Message_ActionType_GET_XML;
  static const ActionType GET_IMAGE = Message_ActionType_GET_IMAGE;
  static const ActionType GET_VIDEO = Message_ActionType_GET_VIDEO;
  static const ActionType RESPONSE_OK = Message_ActionType_RESPONSE_OK;
  static const ActionType RESPONSE_NEXT = Message_ActionType_RESPONSE_NEXT;
  static const ActionType RESPONSE_END = Message_ActionType_RESPONSE_END;
  static const ActionType RESPONSE_FINISH = Message_ActionType_RESPONSE_FINISH;
  static const ActionType REC_HAS_CHANGES = Message_ActionType_REC_HAS_CHANGES;
  static const ActionType REC_HAS_INSTANCE = Message_ActionType_REC_HAS_INSTANCE;
  static const ActionType PROTO_HAS_FILE = Message_ActionType_PROTO_HAS_FILE;
  static const ActionType PROTO_NO_FILE = Message_ActionType_PROTO_NO_FILE;
  static inline bool ActionType_IsValid(int value) {
    return Message_ActionType_IsValid(value);
  }
  static const ActionType ActionType_MIN =
    Message_ActionType_ActionType_MIN;
  static const ActionType ActionType_MAX =
    Message_ActionType_ActionType_MAX;
  static const int ActionType_ARRAYSIZE =
    Message_ActionType_ActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionType_descriptor() {
    return Message_ActionType_descriptor();
  }
  static inline const ::std::string& ActionType_Name(ActionType value) {
    return Message_ActionType_Name(value);
  }
  static inline bool ActionType_Parse(const ::std::string& name,
      ActionType* value) {
    return Message_ActionType_Parse(name, value);
  }

  typedef Message_SocketType SocketType;
  static const SocketType SOCKET_PROTO_TOSTRING = Message_SocketType_SOCKET_PROTO_TOSTRING;
  static const SocketType SOCKET_PROTO_TOARRAY = Message_SocketType_SOCKET_PROTO_TOARRAY;
  static const SocketType SOCKET_PLAIN_TEXT = Message_SocketType_SOCKET_PLAIN_TEXT;
  static const SocketType SPLITTED_MESSAGE = Message_SocketType_SPLITTED_MESSAGE;
  static const SocketType SINGLE_MESSAGE = Message_SocketType_SINGLE_MESSAGE;
  static const SocketType SOCKET_BUFFER_NANO_SIZE = Message_SocketType_SOCKET_BUFFER_NANO_SIZE;
  static const SocketType SOCKET_BUFFER_MINI_SIZE = Message_SocketType_SOCKET_BUFFER_MINI_SIZE;
  static const SocketType SOCKET_BUFFER_MICRO_SIZE = Message_SocketType_SOCKET_BUFFER_MICRO_SIZE;
  static const SocketType SOCKET_BUFFER_SMALL_SIZE = Message_SocketType_SOCKET_BUFFER_SMALL_SIZE;
  static const SocketType SOCKET_BUFFER_REGULAR_SIZE = Message_SocketType_SOCKET_BUFFER_REGULAR_SIZE;
  static const SocketType SOCKET_BUFFER_MEDIUM_SIZE = Message_SocketType_SOCKET_BUFFER_MEDIUM_SIZE;
  static const SocketType SOCKET_BUFFER_BIG_SIZE = Message_SocketType_SOCKET_BUFFER_BIG_SIZE;
  static const SocketType TCP_ECHO_PORT = Message_SocketType_TCP_ECHO_PORT;
  static const SocketType TCP_STREAMING_PORT = Message_SocketType_TCP_STREAMING_PORT;
  static const SocketType UDP_PORT = Message_SocketType_UDP_PORT;
  static const SocketType TCP_MSG_PORT = Message_SocketType_TCP_MSG_PORT;
  static inline bool SocketType_IsValid(int value) {
    return Message_SocketType_IsValid(value);
  }
  static const SocketType SocketType_MIN =
    Message_SocketType_SocketType_MIN;
  static const SocketType SocketType_MAX =
    Message_SocketType_SocketType_MAX;
  static const int SocketType_ARRAYSIZE =
    Message_SocketType_SocketType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SocketType_descriptor() {
    return Message_SocketType_descriptor();
  }
  static inline const ::std::string& SocketType_Name(SocketType value) {
    return Message_SocketType_Name(value);
  }
  static inline bool SocketType_Parse(const ::std::string& name,
      SocketType* value) {
    return Message_SocketType_Parse(name, value);
  }

  typedef Message_ProcessType ProcessType;
  static const ProcessType PROCESS_PEOPLE_COUNT = Message_ProcessType_PROCESS_PEOPLE_COUNT;
  static const ProcessType PROCESS_FACE_DETECT = Message_ProcessType_PROCESS_FACE_DETECT;
  static const ProcessType PROCESS_WALK_DIRECTION = Message_ProcessType_PROCESS_WALK_DIRECTION;
  static inline bool ProcessType_IsValid(int value) {
    return Message_ProcessType_IsValid(value);
  }
  static const ProcessType ProcessType_MIN =
    Message_ProcessType_ProcessType_MIN;
  static const ProcessType ProcessType_MAX =
    Message_ProcessType_ProcessType_MAX;
  static const int ProcessType_ARRAYSIZE =
    Message_ProcessType_ProcessType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProcessType_descriptor() {
    return Message_ProcessType_descriptor();
  }
  static inline const ::std::string& ProcessType_Name(ProcessType value) {
    return Message_ProcessType_Name(value);
  }
  static inline bool ProcessType_Parse(const ::std::string& name,
      ProcessType* value) {
    return Message_ProcessType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 activecam = 1;
  inline bool has_activecam() const;
  inline void clear_activecam();
  static const int kActivecamFieldNumber = 1;
  inline ::google::protobuf::int32 activecam() const;
  inline void set_activecam(::google::protobuf::int32 value);

  // required .motion.Message.ActionType type = 2 [default = ENGAGE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::motion::Message_ActionType type() const;
  inline void set_type(::motion::Message_ActionType value);

  // optional string time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int32 data_amount = 5;
  inline bool has_data_amount() const;
  inline void clear_data_amount();
  static const int kDataAmountFieldNumber = 5;
  inline ::google::protobuf::int32 data_amount() const;
  inline void set_data_amount(::google::protobuf::int32 value);

  // optional int32 data_total = 6;
  inline bool has_data_total() const;
  inline void clear_data_total();
  static const int kDataTotalFieldNumber = 6;
  inline ::google::protobuf::int32 data_total() const;
  inline void set_data_total(::google::protobuf::int32 value);

  // optional string serverip = 7;
  inline bool has_serverip() const;
  inline void clear_serverip();
  static const int kServeripFieldNumber = 7;
  inline const ::std::string& serverip() const;
  inline void set_serverip(const ::std::string& value);
  inline void set_serverip(const char* value);
  inline void set_serverip(const char* value, size_t size);
  inline ::std::string* mutable_serverip();
  inline ::std::string* release_serverip();
  inline void set_allocated_serverip(::std::string* serverip);

  // optional string clientip = 8;
  inline bool has_clientip() const;
  inline void clear_clientip();
  static const int kClientipFieldNumber = 8;
  inline const ::std::string& clientip() const;
  inline void set_clientip(const ::std::string& value);
  inline void set_clientip(const char* value);
  inline void set_clientip(const char* value, size_t size);
  inline ::std::string* mutable_clientip();
  inline ::std::string* release_clientip();
  inline void set_allocated_clientip(::std::string* clientip);

  // optional string devicestarttime = 9;
  inline bool has_devicestarttime() const;
  inline void clear_devicestarttime();
  static const int kDevicestarttimeFieldNumber = 9;
  inline const ::std::string& devicestarttime() const;
  inline void set_devicestarttime(const ::std::string& value);
  inline void set_devicestarttime(const char* value);
  inline void set_devicestarttime(const char* value, size_t size);
  inline ::std::string* mutable_devicestarttime();
  inline ::std::string* release_devicestarttime();
  inline void set_allocated_devicestarttime(::std::string* devicestarttime);

  // repeated .motion.Message.MotionCamera motioncamera = 10;
  inline int motioncamera_size() const;
  inline void clear_motioncamera();
  static const int kMotioncameraFieldNumber = 10;
  inline const ::motion::Message_MotionCamera& motioncamera(int index) const;
  inline ::motion::Message_MotionCamera* mutable_motioncamera(int index);
  inline ::motion::Message_MotionCamera* add_motioncamera();
  inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionCamera >&
      motioncamera() const;
  inline ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionCamera >*
      mutable_motioncamera();

  // optional string currmonth = 11;
  inline bool has_currmonth() const;
  inline void clear_currmonth();
  static const int kCurrmonthFieldNumber = 11;
  inline const ::std::string& currmonth() const;
  inline void set_currmonth(const ::std::string& value);
  inline void set_currmonth(const char* value);
  inline void set_currmonth(const char* value, size_t size);
  inline ::std::string* mutable_currmonth();
  inline ::std::string* release_currmonth();
  inline void set_allocated_currmonth(::std::string* currmonth);

  // optional string currday = 12;
  inline bool has_currday() const;
  inline void clear_currday();
  static const int kCurrdayFieldNumber = 12;
  inline const ::std::string& currday() const;
  inline void set_currday(const ::std::string& value);
  inline void set_currday(const char* value);
  inline void set_currday(const char* value, size_t size);
  inline ::std::string* mutable_currday();
  inline ::std::string* release_currday();
  inline void set_allocated_currday(::std::string* currday);

  // optional int32 currcam = 13;
  inline bool has_currcam() const;
  inline void clear_currcam();
  static const int kCurrcamFieldNumber = 13;
  inline ::google::protobuf::int32 currcam() const;
  inline void set_currcam(::google::protobuf::int32 value);

  // optional int32 packagesize = 14;
  inline bool has_packagesize() const;
  inline void clear_packagesize();
  static const int kPackagesizeFieldNumber = 14;
  inline ::google::protobuf::int32 packagesize() const;
  inline void set_packagesize(::google::protobuf::int32 value);

  // optional string imagefilepath = 15;
  inline bool has_imagefilepath() const;
  inline void clear_imagefilepath();
  static const int kImagefilepathFieldNumber = 15;
  inline const ::std::string& imagefilepath() const;
  inline void set_imagefilepath(const ::std::string& value);
  inline void set_imagefilepath(const char* value);
  inline void set_imagefilepath(const char* value, size_t size);
  inline ::std::string* mutable_imagefilepath();
  inline ::std::string* release_imagefilepath();
  inline void set_allocated_imagefilepath(::std::string* imagefilepath);

  // optional string videofilepath = 16;
  inline bool has_videofilepath() const;
  inline void clear_videofilepath();
  static const int kVideofilepathFieldNumber = 16;
  inline const ::std::string& videofilepath() const;
  inline void set_videofilepath(const ::std::string& value);
  inline void set_videofilepath(const char* value);
  inline void set_videofilepath(const char* value, size_t size);
  inline ::std::string* mutable_videofilepath();
  inline ::std::string* release_videofilepath();
  inline void set_allocated_videofilepath(::std::string* videofilepath);

  // @@protoc_insertion_point(class_scope:motion.Message)
 private:
  inline void set_has_activecam();
  inline void clear_has_activecam();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_data_amount();
  inline void clear_has_data_amount();
  inline void set_has_data_total();
  inline void clear_has_data_total();
  inline void set_has_serverip();
  inline void clear_has_serverip();
  inline void set_has_clientip();
  inline void clear_has_clientip();
  inline void set_has_devicestarttime();
  inline void clear_has_devicestarttime();
  inline void set_has_currmonth();
  inline void clear_has_currmonth();
  inline void set_has_currday();
  inline void clear_has_currday();
  inline void set_has_currcam();
  inline void clear_has_currcam();
  inline void set_has_packagesize();
  inline void clear_has_packagesize();
  inline void set_has_imagefilepath();
  inline void clear_has_imagefilepath();
  inline void set_has_videofilepath();
  inline void clear_has_videofilepath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 activecam_;
  int type_;
  ::std::string* time_;
  ::std::string* data_;
  ::google::protobuf::int32 data_amount_;
  ::google::protobuf::int32 data_total_;
  ::std::string* serverip_;
  ::std::string* clientip_;
  ::std::string* devicestarttime_;
  ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionCamera > motioncamera_;
  ::std::string* currmonth_;
  ::std::string* currday_;
  ::google::protobuf::int32 currcam_;
  ::google::protobuf::int32 packagesize_;
  ::std::string* imagefilepath_;
  ::std::string* videofilepath_;
  friend void  protobuf_AddDesc_motion_2eproto();
  friend void protobuf_AssignDesc_motion_2eproto();
  friend void protobuf_ShutdownFile_motion_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Message_MotionCamera

// repeated .motion.Message.MotionMonth motionmonth = 1;
inline int Message_MotionCamera::motionmonth_size() const {
  return motionmonth_.size();
}
inline void Message_MotionCamera::clear_motionmonth() {
  motionmonth_.Clear();
}
inline const ::motion::Message_MotionMonth& Message_MotionCamera::motionmonth(int index) const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.motionmonth)
  return motionmonth_.Get(index);
}
inline ::motion::Message_MotionMonth* Message_MotionCamera::mutable_motionmonth(int index) {
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionCamera.motionmonth)
  return motionmonth_.Mutable(index);
}
inline ::motion::Message_MotionMonth* Message_MotionCamera::add_motionmonth() {
  // @@protoc_insertion_point(field_add:motion.Message.MotionCamera.motionmonth)
  return motionmonth_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionMonth >&
Message_MotionCamera::motionmonth() const {
  // @@protoc_insertion_point(field_list:motion.Message.MotionCamera.motionmonth)
  return motionmonth_;
}
inline ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionMonth >*
Message_MotionCamera::mutable_motionmonth() {
  // @@protoc_insertion_point(field_mutable_list:motion.Message.MotionCamera.motionmonth)
  return &motionmonth_;
}

// repeated .motion.Message.MotionRecognition motionrec = 2;
inline int Message_MotionCamera::motionrec_size() const {
  return motionrec_.size();
}
inline void Message_MotionCamera::clear_motionrec() {
  motionrec_.Clear();
}
inline const ::motion::Message_MotionRecognition& Message_MotionCamera::motionrec(int index) const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.motionrec)
  return motionrec_.Get(index);
}
inline ::motion::Message_MotionRecognition* Message_MotionCamera::mutable_motionrec(int index) {
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionCamera.motionrec)
  return motionrec_.Mutable(index);
}
inline ::motion::Message_MotionRecognition* Message_MotionCamera::add_motionrec() {
  // @@protoc_insertion_point(field_add:motion.Message.MotionCamera.motionrec)
  return motionrec_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionRecognition >&
Message_MotionCamera::motionrec() const {
  // @@protoc_insertion_point(field_list:motion.Message.MotionCamera.motionrec)
  return motionrec_;
}
inline ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionRecognition >*
Message_MotionCamera::mutable_motionrec() {
  // @@protoc_insertion_point(field_mutable_list:motion.Message.MotionCamera.motionrec)
  return &motionrec_;
}

// optional int32 cameraid = 3 [default = 0];
inline bool Message_MotionCamera::has_cameraid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message_MotionCamera::set_has_cameraid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message_MotionCamera::clear_has_cameraid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message_MotionCamera::clear_cameraid() {
  cameraid_ = 0;
  clear_has_cameraid();
}
inline ::google::protobuf::int32 Message_MotionCamera::cameraid() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.cameraid)
  return cameraid_;
}
inline void Message_MotionCamera::set_cameraid(::google::protobuf::int32 value) {
  set_has_cameraid();
  cameraid_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.cameraid)
}

// optional int32 cameranumber = 4;
inline bool Message_MotionCamera::has_cameranumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message_MotionCamera::set_has_cameranumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message_MotionCamera::clear_has_cameranumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message_MotionCamera::clear_cameranumber() {
  cameranumber_ = 0;
  clear_has_cameranumber();
}
inline ::google::protobuf::int32 Message_MotionCamera::cameranumber() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.cameranumber)
  return cameranumber_;
}
inline void Message_MotionCamera::set_cameranumber(::google::protobuf::int32 value) {
  set_has_cameranumber();
  cameranumber_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.cameranumber)
}

// optional string cameraname = 5;
inline bool Message_MotionCamera::has_cameraname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message_MotionCamera::set_has_cameraname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message_MotionCamera::clear_has_cameraname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message_MotionCamera::clear_cameraname() {
  if (cameraname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cameraname_->clear();
  }
  clear_has_cameraname();
}
inline const ::std::string& Message_MotionCamera::cameraname() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.cameraname)
  return *cameraname_;
}
inline void Message_MotionCamera::set_cameraname(const ::std::string& value) {
  set_has_cameraname();
  if (cameraname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cameraname_ = new ::std::string;
  }
  cameraname_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.cameraname)
}
inline void Message_MotionCamera::set_cameraname(const char* value) {
  set_has_cameraname();
  if (cameraname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cameraname_ = new ::std::string;
  }
  cameraname_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionCamera.cameraname)
}
inline void Message_MotionCamera::set_cameraname(const char* value, size_t size) {
  set_has_cameraname();
  if (cameraname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cameraname_ = new ::std::string;
  }
  cameraname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionCamera.cameraname)
}
inline ::std::string* Message_MotionCamera::mutable_cameraname() {
  set_has_cameraname();
  if (cameraname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cameraname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionCamera.cameraname)
  return cameraname_;
}
inline ::std::string* Message_MotionCamera::release_cameraname() {
  clear_has_cameraname();
  if (cameraname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cameraname_;
    cameraname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionCamera::set_allocated_cameraname(::std::string* cameraname) {
  if (cameraname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cameraname_;
  }
  if (cameraname) {
    set_has_cameraname();
    cameraname_ = cameraname;
  } else {
    clear_has_cameraname();
    cameraname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionCamera.cameraname)
}

// optional string timestart = 6;
inline bool Message_MotionCamera::has_timestart() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message_MotionCamera::set_has_timestart() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message_MotionCamera::clear_has_timestart() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message_MotionCamera::clear_timestart() {
  if (timestart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestart_->clear();
  }
  clear_has_timestart();
}
inline const ::std::string& Message_MotionCamera::timestart() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.timestart)
  return *timestart_;
}
inline void Message_MotionCamera::set_timestart(const ::std::string& value) {
  set_has_timestart();
  if (timestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestart_ = new ::std::string;
  }
  timestart_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.timestart)
}
inline void Message_MotionCamera::set_timestart(const char* value) {
  set_has_timestart();
  if (timestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestart_ = new ::std::string;
  }
  timestart_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionCamera.timestart)
}
inline void Message_MotionCamera::set_timestart(const char* value, size_t size) {
  set_has_timestart();
  if (timestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestart_ = new ::std::string;
  }
  timestart_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionCamera.timestart)
}
inline ::std::string* Message_MotionCamera::mutable_timestart() {
  set_has_timestart();
  if (timestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestart_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionCamera.timestart)
  return timestart_;
}
inline ::std::string* Message_MotionCamera::release_timestart() {
  clear_has_timestart();
  if (timestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = timestart_;
    timestart_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionCamera::set_allocated_timestart(::std::string* timestart) {
  if (timestart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestart_;
  }
  if (timestart) {
    set_has_timestart();
    timestart_ = timestart;
  } else {
    clear_has_timestart();
    timestart_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionCamera.timestart)
}

// optional string timeend = 7;
inline bool Message_MotionCamera::has_timeend() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Message_MotionCamera::set_has_timeend() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Message_MotionCamera::clear_has_timeend() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Message_MotionCamera::clear_timeend() {
  if (timeend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timeend_->clear();
  }
  clear_has_timeend();
}
inline const ::std::string& Message_MotionCamera::timeend() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.timeend)
  return *timeend_;
}
inline void Message_MotionCamera::set_timeend(const ::std::string& value) {
  set_has_timeend();
  if (timeend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timeend_ = new ::std::string;
  }
  timeend_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.timeend)
}
inline void Message_MotionCamera::set_timeend(const char* value) {
  set_has_timeend();
  if (timeend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timeend_ = new ::std::string;
  }
  timeend_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionCamera.timeend)
}
inline void Message_MotionCamera::set_timeend(const char* value, size_t size) {
  set_has_timeend();
  if (timeend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timeend_ = new ::std::string;
  }
  timeend_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionCamera.timeend)
}
inline ::std::string* Message_MotionCamera::mutable_timeend() {
  set_has_timeend();
  if (timeend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timeend_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionCamera.timeend)
  return timeend_;
}
inline ::std::string* Message_MotionCamera::release_timeend() {
  clear_has_timeend();
  if (timeend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = timeend_;
    timeend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionCamera::set_allocated_timeend(::std::string* timeend) {
  if (timeend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timeend_;
  }
  if (timeend) {
    set_has_timeend();
    timeend_ = timeend;
  } else {
    clear_has_timeend();
    timeend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionCamera.timeend)
}

// optional string name = 8;
inline bool Message_MotionCamera::has_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Message_MotionCamera::set_has_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Message_MotionCamera::clear_has_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Message_MotionCamera::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Message_MotionCamera::name() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.name)
  return *name_;
}
inline void Message_MotionCamera::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.name)
}
inline void Message_MotionCamera::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionCamera.name)
}
inline void Message_MotionCamera::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionCamera.name)
}
inline ::std::string* Message_MotionCamera::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionCamera.name)
  return name_;
}
inline ::std::string* Message_MotionCamera::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionCamera::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionCamera.name)
}

// optional bool recognizing = 9;
inline bool Message_MotionCamera::has_recognizing() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Message_MotionCamera::set_has_recognizing() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Message_MotionCamera::clear_has_recognizing() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Message_MotionCamera::clear_recognizing() {
  recognizing_ = false;
  clear_has_recognizing();
}
inline bool Message_MotionCamera::recognizing() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.recognizing)
  return recognizing_;
}
inline void Message_MotionCamera::set_recognizing(bool value) {
  set_has_recognizing();
  recognizing_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.recognizing)
}

// optional string camerasince = 10;
inline bool Message_MotionCamera::has_camerasince() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Message_MotionCamera::set_has_camerasince() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Message_MotionCamera::clear_has_camerasince() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Message_MotionCamera::clear_camerasince() {
  if (camerasince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camerasince_->clear();
  }
  clear_has_camerasince();
}
inline const ::std::string& Message_MotionCamera::camerasince() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.camerasince)
  return *camerasince_;
}
inline void Message_MotionCamera::set_camerasince(const ::std::string& value) {
  set_has_camerasince();
  if (camerasince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camerasince_ = new ::std::string;
  }
  camerasince_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.camerasince)
}
inline void Message_MotionCamera::set_camerasince(const char* value) {
  set_has_camerasince();
  if (camerasince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camerasince_ = new ::std::string;
  }
  camerasince_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionCamera.camerasince)
}
inline void Message_MotionCamera::set_camerasince(const char* value, size_t size) {
  set_has_camerasince();
  if (camerasince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camerasince_ = new ::std::string;
  }
  camerasince_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionCamera.camerasince)
}
inline ::std::string* Message_MotionCamera::mutable_camerasince() {
  set_has_camerasince();
  if (camerasince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camerasince_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionCamera.camerasince)
  return camerasince_;
}
inline ::std::string* Message_MotionCamera::release_camerasince() {
  clear_has_camerasince();
  if (camerasince_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = camerasince_;
    camerasince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionCamera::set_allocated_camerasince(::std::string* camerasince) {
  if (camerasince_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camerasince_;
  }
  if (camerasince) {
    set_has_camerasince();
    camerasince_ = camerasince;
  } else {
    clear_has_camerasince();
    camerasince_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionCamera.camerasince)
}

// optional bool storeimage = 11;
inline bool Message_MotionCamera::has_storeimage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Message_MotionCamera::set_has_storeimage() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Message_MotionCamera::clear_has_storeimage() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Message_MotionCamera::clear_storeimage() {
  storeimage_ = false;
  clear_has_storeimage();
}
inline bool Message_MotionCamera::storeimage() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.storeimage)
  return storeimage_;
}
inline void Message_MotionCamera::set_storeimage(bool value) {
  set_has_storeimage();
  storeimage_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.storeimage)
}

// optional bool storevideo = 12;
inline bool Message_MotionCamera::has_storevideo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Message_MotionCamera::set_has_storevideo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Message_MotionCamera::clear_has_storevideo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Message_MotionCamera::clear_storevideo() {
  storevideo_ = false;
  clear_has_storevideo();
}
inline bool Message_MotionCamera::storevideo() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.storevideo)
  return storevideo_;
}
inline void Message_MotionCamera::set_storevideo(bool value) {
  set_has_storevideo();
  storevideo_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.storevideo)
}

// optional string codename = 14;
inline bool Message_MotionCamera::has_codename() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Message_MotionCamera::set_has_codename() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Message_MotionCamera::clear_has_codename() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Message_MotionCamera::clear_codename() {
  if (codename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codename_->clear();
  }
  clear_has_codename();
}
inline const ::std::string& Message_MotionCamera::codename() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.codename)
  return *codename_;
}
inline void Message_MotionCamera::set_codename(const ::std::string& value) {
  set_has_codename();
  if (codename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codename_ = new ::std::string;
  }
  codename_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.codename)
}
inline void Message_MotionCamera::set_codename(const char* value) {
  set_has_codename();
  if (codename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codename_ = new ::std::string;
  }
  codename_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionCamera.codename)
}
inline void Message_MotionCamera::set_codename(const char* value, size_t size) {
  set_has_codename();
  if (codename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codename_ = new ::std::string;
  }
  codename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionCamera.codename)
}
inline ::std::string* Message_MotionCamera::mutable_codename() {
  set_has_codename();
  if (codename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionCamera.codename)
  return codename_;
}
inline ::std::string* Message_MotionCamera::release_codename() {
  clear_has_codename();
  if (codename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = codename_;
    codename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionCamera::set_allocated_codename(::std::string* codename) {
  if (codename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codename_;
  }
  if (codename) {
    set_has_codename();
    codename_ = codename;
  } else {
    clear_has_codename();
    codename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionCamera.codename)
}

// optional bool hasregion = 15;
inline bool Message_MotionCamera::has_hasregion() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Message_MotionCamera::set_has_hasregion() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Message_MotionCamera::clear_has_hasregion() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Message_MotionCamera::clear_hasregion() {
  hasregion_ = false;
  clear_has_hasregion();
}
inline bool Message_MotionCamera::hasregion() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.hasregion)
  return hasregion_;
}
inline void Message_MotionCamera::set_hasregion(bool value) {
  set_has_hasregion();
  hasregion_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.hasregion)
}

// optional string coordinates = 16;
inline bool Message_MotionCamera::has_coordinates() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Message_MotionCamera::set_has_coordinates() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Message_MotionCamera::clear_has_coordinates() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Message_MotionCamera::clear_coordinates() {
  if (coordinates_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coordinates_->clear();
  }
  clear_has_coordinates();
}
inline const ::std::string& Message_MotionCamera::coordinates() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.coordinates)
  return *coordinates_;
}
inline void Message_MotionCamera::set_coordinates(const ::std::string& value) {
  set_has_coordinates();
  if (coordinates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coordinates_ = new ::std::string;
  }
  coordinates_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.coordinates)
}
inline void Message_MotionCamera::set_coordinates(const char* value) {
  set_has_coordinates();
  if (coordinates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coordinates_ = new ::std::string;
  }
  coordinates_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionCamera.coordinates)
}
inline void Message_MotionCamera::set_coordinates(const char* value, size_t size) {
  set_has_coordinates();
  if (coordinates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coordinates_ = new ::std::string;
  }
  coordinates_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionCamera.coordinates)
}
inline ::std::string* Message_MotionCamera::mutable_coordinates() {
  set_has_coordinates();
  if (coordinates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    coordinates_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionCamera.coordinates)
  return coordinates_;
}
inline ::std::string* Message_MotionCamera::release_coordinates() {
  clear_has_coordinates();
  if (coordinates_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = coordinates_;
    coordinates_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionCamera::set_allocated_coordinates(::std::string* coordinates) {
  if (coordinates_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete coordinates_;
  }
  if (coordinates) {
    set_has_coordinates();
    coordinates_ = coordinates;
  } else {
    clear_has_coordinates();
    coordinates_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionCamera.coordinates)
}

// optional int32 delay = 17;
inline bool Message_MotionCamera::has_delay() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Message_MotionCamera::set_has_delay() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Message_MotionCamera::clear_has_delay() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Message_MotionCamera::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline ::google::protobuf::int32 Message_MotionCamera::delay() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.delay)
  return delay_;
}
inline void Message_MotionCamera::set_delay(::google::protobuf::int32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.delay)
}

// optional string startrectime = 18;
inline bool Message_MotionCamera::has_startrectime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Message_MotionCamera::set_has_startrectime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Message_MotionCamera::clear_has_startrectime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Message_MotionCamera::clear_startrectime() {
  if (startrectime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    startrectime_->clear();
  }
  clear_has_startrectime();
}
inline const ::std::string& Message_MotionCamera::startrectime() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.startrectime)
  return *startrectime_;
}
inline void Message_MotionCamera::set_startrectime(const ::std::string& value) {
  set_has_startrectime();
  if (startrectime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    startrectime_ = new ::std::string;
  }
  startrectime_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.startrectime)
}
inline void Message_MotionCamera::set_startrectime(const char* value) {
  set_has_startrectime();
  if (startrectime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    startrectime_ = new ::std::string;
  }
  startrectime_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionCamera.startrectime)
}
inline void Message_MotionCamera::set_startrectime(const char* value, size_t size) {
  set_has_startrectime();
  if (startrectime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    startrectime_ = new ::std::string;
  }
  startrectime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionCamera.startrectime)
}
inline ::std::string* Message_MotionCamera::mutable_startrectime() {
  set_has_startrectime();
  if (startrectime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    startrectime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionCamera.startrectime)
  return startrectime_;
}
inline ::std::string* Message_MotionCamera::release_startrectime() {
  clear_has_startrectime();
  if (startrectime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = startrectime_;
    startrectime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionCamera::set_allocated_startrectime(::std::string* startrectime) {
  if (startrectime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete startrectime_;
  }
  if (startrectime) {
    set_has_startrectime();
    startrectime_ = startrectime;
  } else {
    clear_has_startrectime();
    startrectime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionCamera.startrectime)
}

// optional string stoprectime = 19;
inline bool Message_MotionCamera::has_stoprectime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Message_MotionCamera::set_has_stoprectime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Message_MotionCamera::clear_has_stoprectime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Message_MotionCamera::clear_stoprectime() {
  if (stoprectime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stoprectime_->clear();
  }
  clear_has_stoprectime();
}
inline const ::std::string& Message_MotionCamera::stoprectime() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.stoprectime)
  return *stoprectime_;
}
inline void Message_MotionCamera::set_stoprectime(const ::std::string& value) {
  set_has_stoprectime();
  if (stoprectime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stoprectime_ = new ::std::string;
  }
  stoprectime_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.stoprectime)
}
inline void Message_MotionCamera::set_stoprectime(const char* value) {
  set_has_stoprectime();
  if (stoprectime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stoprectime_ = new ::std::string;
  }
  stoprectime_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionCamera.stoprectime)
}
inline void Message_MotionCamera::set_stoprectime(const char* value, size_t size) {
  set_has_stoprectime();
  if (stoprectime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stoprectime_ = new ::std::string;
  }
  stoprectime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionCamera.stoprectime)
}
inline ::std::string* Message_MotionCamera::mutable_stoprectime() {
  set_has_stoprectime();
  if (stoprectime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stoprectime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionCamera.stoprectime)
  return stoprectime_;
}
inline ::std::string* Message_MotionCamera::release_stoprectime() {
  clear_has_stoprectime();
  if (stoprectime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stoprectime_;
    stoprectime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionCamera::set_allocated_stoprectime(::std::string* stoprectime) {
  if (stoprectime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stoprectime_;
  }
  if (stoprectime) {
    set_has_stoprectime();
    stoprectime_ = stoprectime;
  } else {
    clear_has_stoprectime();
    stoprectime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionCamera.stoprectime)
}

// optional bool runatstartup = 20;
inline bool Message_MotionCamera::has_runatstartup() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Message_MotionCamera::set_has_runatstartup() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Message_MotionCamera::clear_has_runatstartup() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Message_MotionCamera::clear_runatstartup() {
  runatstartup_ = false;
  clear_has_runatstartup();
}
inline bool Message_MotionCamera::runatstartup() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.runatstartup)
  return runatstartup_;
}
inline void Message_MotionCamera::set_runatstartup(bool value) {
  set_has_runatstartup();
  runatstartup_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.runatstartup)
}

// optional int32 activemat = 21;
inline bool Message_MotionCamera::has_activemat() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Message_MotionCamera::set_has_activemat() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Message_MotionCamera::clear_has_activemat() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Message_MotionCamera::clear_activemat() {
  activemat_ = 0;
  clear_has_activemat();
}
inline ::google::protobuf::int32 Message_MotionCamera::activemat() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.activemat)
  return activemat_;
}
inline void Message_MotionCamera::set_activemat(::google::protobuf::int32 value) {
  set_has_activemat();
  activemat_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.activemat)
}

// optional bool recognizing_flag = 22;
inline bool Message_MotionCamera::has_recognizing_flag() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Message_MotionCamera::set_has_recognizing_flag() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Message_MotionCamera::clear_has_recognizing_flag() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Message_MotionCamera::clear_recognizing_flag() {
  recognizing_flag_ = false;
  clear_has_recognizing_flag();
}
inline bool Message_MotionCamera::recognizing_flag() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.recognizing_flag)
  return recognizing_flag_;
}
inline void Message_MotionCamera::set_recognizing_flag(bool value) {
  set_has_recognizing_flag();
  recognizing_flag_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.recognizing_flag)
}

// optional int32 db_idcamera = 23;
inline bool Message_MotionCamera::has_db_idcamera() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Message_MotionCamera::set_has_db_idcamera() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Message_MotionCamera::clear_has_db_idcamera() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Message_MotionCamera::clear_db_idcamera() {
  db_idcamera_ = 0;
  clear_has_db_idcamera();
}
inline ::google::protobuf::int32 Message_MotionCamera::db_idcamera() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.db_idcamera)
  return db_idcamera_;
}
inline void Message_MotionCamera::set_db_idcamera(::google::protobuf::int32 value) {
  set_has_db_idcamera();
  db_idcamera_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.db_idcamera)
}

// optional int32 db_idmat = 24;
inline bool Message_MotionCamera::has_db_idmat() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Message_MotionCamera::set_has_db_idmat() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Message_MotionCamera::clear_has_db_idmat() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Message_MotionCamera::clear_db_idmat() {
  db_idmat_ = 0;
  clear_has_db_idmat();
}
inline ::google::protobuf::int32 Message_MotionCamera::db_idmat() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.db_idmat)
  return db_idmat_;
}
inline void Message_MotionCamera::set_db_idmat(::google::protobuf::int32 value) {
  set_has_db_idmat();
  db_idmat_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.db_idmat)
}

// optional int32 matcols = 25;
inline bool Message_MotionCamera::has_matcols() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Message_MotionCamera::set_has_matcols() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Message_MotionCamera::clear_has_matcols() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Message_MotionCamera::clear_matcols() {
  matcols_ = 0;
  clear_has_matcols();
}
inline ::google::protobuf::int32 Message_MotionCamera::matcols() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.matcols)
  return matcols_;
}
inline void Message_MotionCamera::set_matcols(::google::protobuf::int32 value) {
  set_has_matcols();
  matcols_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.matcols)
}

// optional int32 matrows = 26;
inline bool Message_MotionCamera::has_matrows() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Message_MotionCamera::set_has_matrows() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Message_MotionCamera::clear_has_matrows() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Message_MotionCamera::clear_matrows() {
  matrows_ = 0;
  clear_has_matrows();
}
inline ::google::protobuf::int32 Message_MotionCamera::matrows() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.matrows)
  return matrows_;
}
inline void Message_MotionCamera::set_matrows(::google::protobuf::int32 value) {
  set_has_matrows();
  matrows_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.matrows)
}

// optional int32 matwidth = 27;
inline bool Message_MotionCamera::has_matwidth() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Message_MotionCamera::set_has_matwidth() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Message_MotionCamera::clear_has_matwidth() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Message_MotionCamera::clear_matwidth() {
  matwidth_ = 0;
  clear_has_matwidth();
}
inline ::google::protobuf::int32 Message_MotionCamera::matwidth() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.matwidth)
  return matwidth_;
}
inline void Message_MotionCamera::set_matwidth(::google::protobuf::int32 value) {
  set_has_matwidth();
  matwidth_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.matwidth)
}

// optional int32 matheight = 28;
inline bool Message_MotionCamera::has_matheight() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Message_MotionCamera::set_has_matheight() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Message_MotionCamera::clear_has_matheight() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Message_MotionCamera::clear_matheight() {
  matheight_ = 0;
  clear_has_matheight();
}
inline ::google::protobuf::int32 Message_MotionCamera::matheight() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.matheight)
  return matheight_;
}
inline void Message_MotionCamera::set_matheight(::google::protobuf::int32 value) {
  set_has_matheight();
  matheight_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.matheight)
}

// optional bool fromdatabase = 29;
inline bool Message_MotionCamera::has_fromdatabase() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Message_MotionCamera::set_has_fromdatabase() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Message_MotionCamera::clear_has_fromdatabase() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Message_MotionCamera::clear_fromdatabase() {
  fromdatabase_ = false;
  clear_has_fromdatabase();
}
inline bool Message_MotionCamera::fromdatabase() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.fromdatabase)
  return fromdatabase_;
}
inline void Message_MotionCamera::set_fromdatabase(bool value) {
  set_has_fromdatabase();
  fromdatabase_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.fromdatabase)
}

// optional string lastinstance = 30;
inline bool Message_MotionCamera::has_lastinstance() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Message_MotionCamera::set_has_lastinstance() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Message_MotionCamera::clear_has_lastinstance() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Message_MotionCamera::clear_lastinstance() {
  if (lastinstance_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastinstance_->clear();
  }
  clear_has_lastinstance();
}
inline const ::std::string& Message_MotionCamera::lastinstance() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionCamera.lastinstance)
  return *lastinstance_;
}
inline void Message_MotionCamera::set_lastinstance(const ::std::string& value) {
  set_has_lastinstance();
  if (lastinstance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastinstance_ = new ::std::string;
  }
  lastinstance_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionCamera.lastinstance)
}
inline void Message_MotionCamera::set_lastinstance(const char* value) {
  set_has_lastinstance();
  if (lastinstance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastinstance_ = new ::std::string;
  }
  lastinstance_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionCamera.lastinstance)
}
inline void Message_MotionCamera::set_lastinstance(const char* value, size_t size) {
  set_has_lastinstance();
  if (lastinstance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastinstance_ = new ::std::string;
  }
  lastinstance_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionCamera.lastinstance)
}
inline ::std::string* Message_MotionCamera::mutable_lastinstance() {
  set_has_lastinstance();
  if (lastinstance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastinstance_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionCamera.lastinstance)
  return lastinstance_;
}
inline ::std::string* Message_MotionCamera::release_lastinstance() {
  clear_has_lastinstance();
  if (lastinstance_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lastinstance_;
    lastinstance_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionCamera::set_allocated_lastinstance(::std::string* lastinstance) {
  if (lastinstance_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastinstance_;
  }
  if (lastinstance) {
    set_has_lastinstance();
    lastinstance_ = lastinstance;
  } else {
    clear_has_lastinstance();
    lastinstance_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionCamera.lastinstance)
}

// -------------------------------------------------------------------

// Message_MotionRecognition

// optional string name = 1;
inline bool Message_MotionRecognition::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_MotionRecognition::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_MotionRecognition::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_MotionRecognition::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Message_MotionRecognition::name() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionRecognition.name)
  return *name_;
}
inline void Message_MotionRecognition::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionRecognition.name)
}
inline void Message_MotionRecognition::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionRecognition.name)
}
inline void Message_MotionRecognition::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionRecognition.name)
}
inline ::std::string* Message_MotionRecognition::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionRecognition.name)
  return name_;
}
inline ::std::string* Message_MotionRecognition::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionRecognition::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionRecognition.name)
}

// optional int32 db_idrec = 2;
inline bool Message_MotionRecognition::has_db_idrec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_MotionRecognition::set_has_db_idrec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_MotionRecognition::clear_has_db_idrec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_MotionRecognition::clear_db_idrec() {
  db_idrec_ = 0;
  clear_has_db_idrec();
}
inline ::google::protobuf::int32 Message_MotionRecognition::db_idrec() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionRecognition.db_idrec)
  return db_idrec_;
}
inline void Message_MotionRecognition::set_db_idrec(::google::protobuf::int32 value) {
  set_has_db_idrec();
  db_idrec_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionRecognition.db_idrec)
}

// -------------------------------------------------------------------

// Message_MotionMonth

// repeated .motion.Message.MotionDay motionday = 1;
inline int Message_MotionMonth::motionday_size() const {
  return motionday_.size();
}
inline void Message_MotionMonth::clear_motionday() {
  motionday_.Clear();
}
inline const ::motion::Message_MotionDay& Message_MotionMonth::motionday(int index) const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionMonth.motionday)
  return motionday_.Get(index);
}
inline ::motion::Message_MotionDay* Message_MotionMonth::mutable_motionday(int index) {
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionMonth.motionday)
  return motionday_.Mutable(index);
}
inline ::motion::Message_MotionDay* Message_MotionMonth::add_motionday() {
  // @@protoc_insertion_point(field_add:motion.Message.MotionMonth.motionday)
  return motionday_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionDay >&
Message_MotionMonth::motionday() const {
  // @@protoc_insertion_point(field_list:motion.Message.MotionMonth.motionday)
  return motionday_;
}
inline ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionDay >*
Message_MotionMonth::mutable_motionday() {
  // @@protoc_insertion_point(field_mutable_list:motion.Message.MotionMonth.motionday)
  return &motionday_;
}

// optional string monthlabel = 2;
inline bool Message_MotionMonth::has_monthlabel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_MotionMonth::set_has_monthlabel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_MotionMonth::clear_has_monthlabel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_MotionMonth::clear_monthlabel() {
  if (monthlabel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    monthlabel_->clear();
  }
  clear_has_monthlabel();
}
inline const ::std::string& Message_MotionMonth::monthlabel() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionMonth.monthlabel)
  return *monthlabel_;
}
inline void Message_MotionMonth::set_monthlabel(const ::std::string& value) {
  set_has_monthlabel();
  if (monthlabel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    monthlabel_ = new ::std::string;
  }
  monthlabel_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionMonth.monthlabel)
}
inline void Message_MotionMonth::set_monthlabel(const char* value) {
  set_has_monthlabel();
  if (monthlabel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    monthlabel_ = new ::std::string;
  }
  monthlabel_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionMonth.monthlabel)
}
inline void Message_MotionMonth::set_monthlabel(const char* value, size_t size) {
  set_has_monthlabel();
  if (monthlabel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    monthlabel_ = new ::std::string;
  }
  monthlabel_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionMonth.monthlabel)
}
inline ::std::string* Message_MotionMonth::mutable_monthlabel() {
  set_has_monthlabel();
  if (monthlabel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    monthlabel_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionMonth.monthlabel)
  return monthlabel_;
}
inline ::std::string* Message_MotionMonth::release_monthlabel() {
  clear_has_monthlabel();
  if (monthlabel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = monthlabel_;
    monthlabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionMonth::set_allocated_monthlabel(::std::string* monthlabel) {
  if (monthlabel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete monthlabel_;
  }
  if (monthlabel) {
    set_has_monthlabel();
    monthlabel_ = monthlabel;
  } else {
    clear_has_monthlabel();
    monthlabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionMonth.monthlabel)
}

// -------------------------------------------------------------------

// Message_MotionDay

// repeated .motion.Message.Instance instance = 1;
inline int Message_MotionDay::instance_size() const {
  return instance_.size();
}
inline void Message_MotionDay::clear_instance() {
  instance_.Clear();
}
inline const ::motion::Message_Instance& Message_MotionDay::instance(int index) const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionDay.instance)
  return instance_.Get(index);
}
inline ::motion::Message_Instance* Message_MotionDay::mutable_instance(int index) {
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionDay.instance)
  return instance_.Mutable(index);
}
inline ::motion::Message_Instance* Message_MotionDay::add_instance() {
  // @@protoc_insertion_point(field_add:motion.Message.MotionDay.instance)
  return instance_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_Instance >&
Message_MotionDay::instance() const {
  // @@protoc_insertion_point(field_list:motion.Message.MotionDay.instance)
  return instance_;
}
inline ::google::protobuf::RepeatedPtrField< ::motion::Message_Instance >*
Message_MotionDay::mutable_instance() {
  // @@protoc_insertion_point(field_mutable_list:motion.Message.MotionDay.instance)
  return &instance_;
}

// optional string daylabel = 2;
inline bool Message_MotionDay::has_daylabel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_MotionDay::set_has_daylabel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_MotionDay::clear_has_daylabel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_MotionDay::clear_daylabel() {
  if (daylabel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    daylabel_->clear();
  }
  clear_has_daylabel();
}
inline const ::std::string& Message_MotionDay::daylabel() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionDay.daylabel)
  return *daylabel_;
}
inline void Message_MotionDay::set_daylabel(const ::std::string& value) {
  set_has_daylabel();
  if (daylabel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    daylabel_ = new ::std::string;
  }
  daylabel_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionDay.daylabel)
}
inline void Message_MotionDay::set_daylabel(const char* value) {
  set_has_daylabel();
  if (daylabel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    daylabel_ = new ::std::string;
  }
  daylabel_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionDay.daylabel)
}
inline void Message_MotionDay::set_daylabel(const char* value, size_t size) {
  set_has_daylabel();
  if (daylabel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    daylabel_ = new ::std::string;
  }
  daylabel_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionDay.daylabel)
}
inline ::std::string* Message_MotionDay::mutable_daylabel() {
  set_has_daylabel();
  if (daylabel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    daylabel_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionDay.daylabel)
  return daylabel_;
}
inline ::std::string* Message_MotionDay::release_daylabel() {
  clear_has_daylabel();
  if (daylabel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = daylabel_;
    daylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionDay::set_allocated_daylabel(::std::string* daylabel) {
  if (daylabel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete daylabel_;
  }
  if (daylabel) {
    set_has_daylabel();
    daylabel_ = daylabel;
  } else {
    clear_has_daylabel();
    daylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionDay.daylabel)
}

// optional int32 db_dayid = 3;
inline bool Message_MotionDay::has_db_dayid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message_MotionDay::set_has_db_dayid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message_MotionDay::clear_has_db_dayid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message_MotionDay::clear_db_dayid() {
  db_dayid_ = 0;
  clear_has_db_dayid();
}
inline ::google::protobuf::int32 Message_MotionDay::db_dayid() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionDay.db_dayid)
  return db_dayid_;
}
inline void Message_MotionDay::set_db_dayid(::google::protobuf::int32 value) {
  set_has_db_dayid();
  db_dayid_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionDay.db_dayid)
}

// optional int32 db_recognitionsetupid = 4;
inline bool Message_MotionDay::has_db_recognitionsetupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message_MotionDay::set_has_db_recognitionsetupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message_MotionDay::clear_has_db_recognitionsetupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message_MotionDay::clear_db_recognitionsetupid() {
  db_recognitionsetupid_ = 0;
  clear_has_db_recognitionsetupid();
}
inline ::google::protobuf::int32 Message_MotionDay::db_recognitionsetupid() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionDay.db_recognitionsetupid)
  return db_recognitionsetupid_;
}
inline void Message_MotionDay::set_db_recognitionsetupid(::google::protobuf::int32 value) {
  set_has_db_recognitionsetupid();
  db_recognitionsetupid_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.MotionDay.db_recognitionsetupid)
}

// optional string xmlfilename = 5;
inline bool Message_MotionDay::has_xmlfilename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message_MotionDay::set_has_xmlfilename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message_MotionDay::clear_has_xmlfilename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message_MotionDay::clear_xmlfilename() {
  if (xmlfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xmlfilename_->clear();
  }
  clear_has_xmlfilename();
}
inline const ::std::string& Message_MotionDay::xmlfilename() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionDay.xmlfilename)
  return *xmlfilename_;
}
inline void Message_MotionDay::set_xmlfilename(const ::std::string& value) {
  set_has_xmlfilename();
  if (xmlfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xmlfilename_ = new ::std::string;
  }
  xmlfilename_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionDay.xmlfilename)
}
inline void Message_MotionDay::set_xmlfilename(const char* value) {
  set_has_xmlfilename();
  if (xmlfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xmlfilename_ = new ::std::string;
  }
  xmlfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionDay.xmlfilename)
}
inline void Message_MotionDay::set_xmlfilename(const char* value, size_t size) {
  set_has_xmlfilename();
  if (xmlfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xmlfilename_ = new ::std::string;
  }
  xmlfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionDay.xmlfilename)
}
inline ::std::string* Message_MotionDay::mutable_xmlfilename() {
  set_has_xmlfilename();
  if (xmlfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xmlfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionDay.xmlfilename)
  return xmlfilename_;
}
inline ::std::string* Message_MotionDay::release_xmlfilename() {
  clear_has_xmlfilename();
  if (xmlfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = xmlfilename_;
    xmlfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionDay::set_allocated_xmlfilename(::std::string* xmlfilename) {
  if (xmlfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xmlfilename_;
  }
  if (xmlfilename) {
    set_has_xmlfilename();
    xmlfilename_ = xmlfilename;
  } else {
    clear_has_xmlfilename();
    xmlfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionDay.xmlfilename)
}

// optional string xmlfilepath = 6;
inline bool Message_MotionDay::has_xmlfilepath() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message_MotionDay::set_has_xmlfilepath() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message_MotionDay::clear_has_xmlfilepath() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message_MotionDay::clear_xmlfilepath() {
  if (xmlfilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xmlfilepath_->clear();
  }
  clear_has_xmlfilepath();
}
inline const ::std::string& Message_MotionDay::xmlfilepath() const {
  // @@protoc_insertion_point(field_get:motion.Message.MotionDay.xmlfilepath)
  return *xmlfilepath_;
}
inline void Message_MotionDay::set_xmlfilepath(const ::std::string& value) {
  set_has_xmlfilepath();
  if (xmlfilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xmlfilepath_ = new ::std::string;
  }
  xmlfilepath_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.MotionDay.xmlfilepath)
}
inline void Message_MotionDay::set_xmlfilepath(const char* value) {
  set_has_xmlfilepath();
  if (xmlfilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xmlfilepath_ = new ::std::string;
  }
  xmlfilepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.MotionDay.xmlfilepath)
}
inline void Message_MotionDay::set_xmlfilepath(const char* value, size_t size) {
  set_has_xmlfilepath();
  if (xmlfilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xmlfilepath_ = new ::std::string;
  }
  xmlfilepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.MotionDay.xmlfilepath)
}
inline ::std::string* Message_MotionDay::mutable_xmlfilepath() {
  set_has_xmlfilepath();
  if (xmlfilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xmlfilepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.MotionDay.xmlfilepath)
  return xmlfilepath_;
}
inline ::std::string* Message_MotionDay::release_xmlfilepath() {
  clear_has_xmlfilepath();
  if (xmlfilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = xmlfilepath_;
    xmlfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_MotionDay::set_allocated_xmlfilepath(::std::string* xmlfilepath) {
  if (xmlfilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xmlfilepath_;
  }
  if (xmlfilepath) {
    set_has_xmlfilepath();
    xmlfilepath_ = xmlfilepath;
  } else {
    clear_has_xmlfilepath();
    xmlfilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.MotionDay.xmlfilepath)
}

// -------------------------------------------------------------------

// Message_Instance

// required int32 idinstance = 1;
inline bool Message_Instance::has_idinstance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_Instance::set_has_idinstance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_Instance::clear_has_idinstance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_Instance::clear_idinstance() {
  idinstance_ = 0;
  clear_has_idinstance();
}
inline ::google::protobuf::int32 Message_Instance::idinstance() const {
  // @@protoc_insertion_point(field_get:motion.Message.Instance.idinstance)
  return idinstance_;
}
inline void Message_Instance::set_idinstance(::google::protobuf::int32 value) {
  set_has_idinstance();
  idinstance_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.Instance.idinstance)
}

// optional string instancestart = 2;
inline bool Message_Instance::has_instancestart() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_Instance::set_has_instancestart() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_Instance::clear_has_instancestart() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_Instance::clear_instancestart() {
  if (instancestart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancestart_->clear();
  }
  clear_has_instancestart();
}
inline const ::std::string& Message_Instance::instancestart() const {
  // @@protoc_insertion_point(field_get:motion.Message.Instance.instancestart)
  return *instancestart_;
}
inline void Message_Instance::set_instancestart(const ::std::string& value) {
  set_has_instancestart();
  if (instancestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancestart_ = new ::std::string;
  }
  instancestart_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.Instance.instancestart)
}
inline void Message_Instance::set_instancestart(const char* value) {
  set_has_instancestart();
  if (instancestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancestart_ = new ::std::string;
  }
  instancestart_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.Instance.instancestart)
}
inline void Message_Instance::set_instancestart(const char* value, size_t size) {
  set_has_instancestart();
  if (instancestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancestart_ = new ::std::string;
  }
  instancestart_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.Instance.instancestart)
}
inline ::std::string* Message_Instance::mutable_instancestart() {
  set_has_instancestart();
  if (instancestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancestart_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.Instance.instancestart)
  return instancestart_;
}
inline ::std::string* Message_Instance::release_instancestart() {
  clear_has_instancestart();
  if (instancestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = instancestart_;
    instancestart_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_Instance::set_allocated_instancestart(::std::string* instancestart) {
  if (instancestart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instancestart_;
  }
  if (instancestart) {
    set_has_instancestart();
    instancestart_ = instancestart;
  } else {
    clear_has_instancestart();
    instancestart_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Instance.instancestart)
}

// optional string instanceend = 3;
inline bool Message_Instance::has_instanceend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message_Instance::set_has_instanceend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message_Instance::clear_has_instanceend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message_Instance::clear_instanceend() {
  if (instanceend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instanceend_->clear();
  }
  clear_has_instanceend();
}
inline const ::std::string& Message_Instance::instanceend() const {
  // @@protoc_insertion_point(field_get:motion.Message.Instance.instanceend)
  return *instanceend_;
}
inline void Message_Instance::set_instanceend(const ::std::string& value) {
  set_has_instanceend();
  if (instanceend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instanceend_ = new ::std::string;
  }
  instanceend_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.Instance.instanceend)
}
inline void Message_Instance::set_instanceend(const char* value) {
  set_has_instanceend();
  if (instanceend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instanceend_ = new ::std::string;
  }
  instanceend_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.Instance.instanceend)
}
inline void Message_Instance::set_instanceend(const char* value, size_t size) {
  set_has_instanceend();
  if (instanceend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instanceend_ = new ::std::string;
  }
  instanceend_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.Instance.instanceend)
}
inline ::std::string* Message_Instance::mutable_instanceend() {
  set_has_instanceend();
  if (instanceend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instanceend_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.Instance.instanceend)
  return instanceend_;
}
inline ::std::string* Message_Instance::release_instanceend() {
  clear_has_instanceend();
  if (instanceend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = instanceend_;
    instanceend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_Instance::set_allocated_instanceend(::std::string* instanceend) {
  if (instanceend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instanceend_;
  }
  if (instanceend) {
    set_has_instanceend();
    instanceend_ = instanceend;
  } else {
    clear_has_instanceend();
    instanceend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Instance.instanceend)
}

// optional string fileformat = 4;
inline bool Message_Instance::has_fileformat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message_Instance::set_has_fileformat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message_Instance::clear_has_fileformat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message_Instance::clear_fileformat() {
  if (fileformat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileformat_->clear();
  }
  clear_has_fileformat();
}
inline const ::std::string& Message_Instance::fileformat() const {
  // @@protoc_insertion_point(field_get:motion.Message.Instance.fileformat)
  return *fileformat_;
}
inline void Message_Instance::set_fileformat(const ::std::string& value) {
  set_has_fileformat();
  if (fileformat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileformat_ = new ::std::string;
  }
  fileformat_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.Instance.fileformat)
}
inline void Message_Instance::set_fileformat(const char* value) {
  set_has_fileformat();
  if (fileformat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileformat_ = new ::std::string;
  }
  fileformat_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.Instance.fileformat)
}
inline void Message_Instance::set_fileformat(const char* value, size_t size) {
  set_has_fileformat();
  if (fileformat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileformat_ = new ::std::string;
  }
  fileformat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.Instance.fileformat)
}
inline ::std::string* Message_Instance::mutable_fileformat() {
  set_has_fileformat();
  if (fileformat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileformat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.Instance.fileformat)
  return fileformat_;
}
inline ::std::string* Message_Instance::release_fileformat() {
  clear_has_fileformat();
  if (fileformat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fileformat_;
    fileformat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_Instance::set_allocated_fileformat(::std::string* fileformat) {
  if (fileformat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fileformat_;
  }
  if (fileformat) {
    set_has_fileformat();
    fileformat_ = fileformat;
  } else {
    clear_has_fileformat();
    fileformat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Instance.fileformat)
}

// repeated .motion.Message.Image image = 5;
inline int Message_Instance::image_size() const {
  return image_.size();
}
inline void Message_Instance::clear_image() {
  image_.Clear();
}
inline const ::motion::Message_Image& Message_Instance::image(int index) const {
  // @@protoc_insertion_point(field_get:motion.Message.Instance.image)
  return image_.Get(index);
}
inline ::motion::Message_Image* Message_Instance::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:motion.Message.Instance.image)
  return image_.Mutable(index);
}
inline ::motion::Message_Image* Message_Instance::add_image() {
  // @@protoc_insertion_point(field_add:motion.Message.Instance.image)
  return image_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_Image >&
Message_Instance::image() const {
  // @@protoc_insertion_point(field_list:motion.Message.Instance.image)
  return image_;
}
inline ::google::protobuf::RepeatedPtrField< ::motion::Message_Image >*
Message_Instance::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:motion.Message.Instance.image)
  return &image_;
}

// repeated .motion.Message.Crop crop = 6;
inline int Message_Instance::crop_size() const {
  return crop_.size();
}
inline void Message_Instance::clear_crop() {
  crop_.Clear();
}
inline const ::motion::Message_Crop& Message_Instance::crop(int index) const {
  // @@protoc_insertion_point(field_get:motion.Message.Instance.crop)
  return crop_.Get(index);
}
inline ::motion::Message_Crop* Message_Instance::mutable_crop(int index) {
  // @@protoc_insertion_point(field_mutable:motion.Message.Instance.crop)
  return crop_.Mutable(index);
}
inline ::motion::Message_Crop* Message_Instance::add_crop() {
  // @@protoc_insertion_point(field_add:motion.Message.Instance.crop)
  return crop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_Crop >&
Message_Instance::crop() const {
  // @@protoc_insertion_point(field_list:motion.Message.Instance.crop)
  return crop_;
}
inline ::google::protobuf::RepeatedPtrField< ::motion::Message_Crop >*
Message_Instance::mutable_crop() {
  // @@protoc_insertion_point(field_mutable_list:motion.Message.Instance.crop)
  return &crop_;
}

// optional .motion.Message.Video video = 7;
inline bool Message_Instance::has_video() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Message_Instance::set_has_video() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Message_Instance::clear_has_video() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Message_Instance::clear_video() {
  if (video_ != NULL) video_->::motion::Message_Video::Clear();
  clear_has_video();
}
inline const ::motion::Message_Video& Message_Instance::video() const {
  // @@protoc_insertion_point(field_get:motion.Message.Instance.video)
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
inline ::motion::Message_Video* Message_Instance::mutable_video() {
  set_has_video();
  if (video_ == NULL) video_ = new ::motion::Message_Video;
  // @@protoc_insertion_point(field_mutable:motion.Message.Instance.video)
  return video_;
}
inline ::motion::Message_Video* Message_Instance::release_video() {
  clear_has_video();
  ::motion::Message_Video* temp = video_;
  video_ = NULL;
  return temp;
}
inline void Message_Instance::set_allocated_video(::motion::Message_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Instance.video)
}

// -------------------------------------------------------------------

// Message_Image

// optional string path = 1;
inline bool Message_Image::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_Image::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_Image::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_Image::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& Message_Image::path() const {
  // @@protoc_insertion_point(field_get:motion.Message.Image.path)
  return *path_;
}
inline void Message_Image::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.Image.path)
}
inline void Message_Image::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.Image.path)
}
inline void Message_Image::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.Image.path)
}
inline ::std::string* Message_Image::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.Image.path)
  return path_;
}
inline ::std::string* Message_Image::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_Image::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Image.path)
}

// optional string name = 2;
inline bool Message_Image::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_Image::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_Image::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_Image::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Message_Image::name() const {
  // @@protoc_insertion_point(field_get:motion.Message.Image.name)
  return *name_;
}
inline void Message_Image::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.Image.name)
}
inline void Message_Image::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.Image.name)
}
inline void Message_Image::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.Image.name)
}
inline ::std::string* Message_Image::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.Image.name)
  return name_;
}
inline ::std::string* Message_Image::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_Image::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Image.name)
}

// optional int32 imagechanges = 3;
inline bool Message_Image::has_imagechanges() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message_Image::set_has_imagechanges() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message_Image::clear_has_imagechanges() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message_Image::clear_imagechanges() {
  imagechanges_ = 0;
  clear_has_imagechanges();
}
inline ::google::protobuf::int32 Message_Image::imagechanges() const {
  // @@protoc_insertion_point(field_get:motion.Message.Image.imagechanges)
  return imagechanges_;
}
inline void Message_Image::set_imagechanges(::google::protobuf::int32 value) {
  set_has_imagechanges();
  imagechanges_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.Image.imagechanges)
}

// optional string time = 4;
inline bool Message_Image::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message_Image::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message_Image::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message_Image::clear_time() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& Message_Image::time() const {
  // @@protoc_insertion_point(field_get:motion.Message.Image.time)
  return *time_;
}
inline void Message_Image::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.Image.time)
}
inline void Message_Image::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.Image.time)
}
inline void Message_Image::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.Image.time)
}
inline ::std::string* Message_Image::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.Image.time)
  return time_;
}
inline ::std::string* Message_Image::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_Image::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Image.time)
}

// -------------------------------------------------------------------

// Message_Crop

// optional string rect = 1;
inline bool Message_Crop::has_rect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_Crop::set_has_rect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_Crop::clear_has_rect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_Crop::clear_rect() {
  if (rect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rect_->clear();
  }
  clear_has_rect();
}
inline const ::std::string& Message_Crop::rect() const {
  // @@protoc_insertion_point(field_get:motion.Message.Crop.rect)
  return *rect_;
}
inline void Message_Crop::set_rect(const ::std::string& value) {
  set_has_rect();
  if (rect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rect_ = new ::std::string;
  }
  rect_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.Crop.rect)
}
inline void Message_Crop::set_rect(const char* value) {
  set_has_rect();
  if (rect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rect_ = new ::std::string;
  }
  rect_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.Crop.rect)
}
inline void Message_Crop::set_rect(const char* value, size_t size) {
  set_has_rect();
  if (rect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rect_ = new ::std::string;
  }
  rect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.Crop.rect)
}
inline ::std::string* Message_Crop::mutable_rect() {
  set_has_rect();
  if (rect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.Crop.rect)
  return rect_;
}
inline ::std::string* Message_Crop::release_rect() {
  clear_has_rect();
  if (rect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rect_;
    rect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_Crop::set_allocated_rect(::std::string* rect) {
  if (rect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rect_;
  }
  if (rect) {
    set_has_rect();
    rect_ = rect;
  } else {
    clear_has_rect();
    rect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Crop.rect)
}

// optional int32 db_imagefatherid = 2;
inline bool Message_Crop::has_db_imagefatherid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_Crop::set_has_db_imagefatherid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_Crop::clear_has_db_imagefatherid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_Crop::clear_db_imagefatherid() {
  db_imagefatherid_ = 0;
  clear_has_db_imagefatherid();
}
inline ::google::protobuf::int32 Message_Crop::db_imagefatherid() const {
  // @@protoc_insertion_point(field_get:motion.Message.Crop.db_imagefatherid)
  return db_imagefatherid_;
}
inline void Message_Crop::set_db_imagefatherid(::google::protobuf::int32 value) {
  set_has_db_imagefatherid();
  db_imagefatherid_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.Crop.db_imagefatherid)
}

// -------------------------------------------------------------------

// Message_Video

// optional string path = 1;
inline bool Message_Video::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_Video::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_Video::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_Video::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& Message_Video::path() const {
  // @@protoc_insertion_point(field_get:motion.Message.Video.path)
  return *path_;
}
inline void Message_Video::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.Video.path)
}
inline void Message_Video::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.Video.path)
}
inline void Message_Video::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.Video.path)
}
inline ::std::string* Message_Video::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.Video.path)
  return path_;
}
inline ::std::string* Message_Video::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_Video::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Video.path)
}

// optional string name = 2;
inline bool Message_Video::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_Video::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_Video::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_Video::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Message_Video::name() const {
  // @@protoc_insertion_point(field_get:motion.Message.Video.name)
  return *name_;
}
inline void Message_Video::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.Video.name)
}
inline void Message_Video::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.Video.name)
}
inline void Message_Video::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.Video.name)
}
inline ::std::string* Message_Video::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.Video.name)
  return name_;
}
inline ::std::string* Message_Video::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_Video::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Video.name)
}

// optional string instancefolder = 3;
inline bool Message_Video::has_instancefolder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message_Video::set_has_instancefolder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message_Video::clear_has_instancefolder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message_Video::clear_instancefolder() {
  if (instancefolder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancefolder_->clear();
  }
  clear_has_instancefolder();
}
inline const ::std::string& Message_Video::instancefolder() const {
  // @@protoc_insertion_point(field_get:motion.Message.Video.instancefolder)
  return *instancefolder_;
}
inline void Message_Video::set_instancefolder(const ::std::string& value) {
  set_has_instancefolder();
  if (instancefolder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancefolder_ = new ::std::string;
  }
  instancefolder_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.Video.instancefolder)
}
inline void Message_Video::set_instancefolder(const char* value) {
  set_has_instancefolder();
  if (instancefolder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancefolder_ = new ::std::string;
  }
  instancefolder_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.Video.instancefolder)
}
inline void Message_Video::set_instancefolder(const char* value, size_t size) {
  set_has_instancefolder();
  if (instancefolder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancefolder_ = new ::std::string;
  }
  instancefolder_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.Video.instancefolder)
}
inline ::std::string* Message_Video::mutable_instancefolder() {
  set_has_instancefolder();
  if (instancefolder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancefolder_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.Video.instancefolder)
  return instancefolder_;
}
inline ::std::string* Message_Video::release_instancefolder() {
  clear_has_instancefolder();
  if (instancefolder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = instancefolder_;
    instancefolder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_Video::set_allocated_instancefolder(::std::string* instancefolder) {
  if (instancefolder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instancefolder_;
  }
  if (instancefolder) {
    set_has_instancefolder();
    instancefolder_ = instancefolder;
  } else {
    clear_has_instancefolder();
    instancefolder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Video.instancefolder)
}

// -------------------------------------------------------------------

// Message

// optional int32 activecam = 1;
inline bool Message::has_activecam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_activecam() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_activecam() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_activecam() {
  activecam_ = 0;
  clear_has_activecam();
}
inline ::google::protobuf::int32 Message::activecam() const {
  // @@protoc_insertion_point(field_get:motion.Message.activecam)
  return activecam_;
}
inline void Message::set_activecam(::google::protobuf::int32 value) {
  set_has_activecam();
  activecam_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.activecam)
}

// required .motion.Message.ActionType type = 2 [default = ENGAGE];
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_type() {
  type_ = 1000;
  clear_has_type();
}
inline ::motion::Message_ActionType Message::type() const {
  // @@protoc_insertion_point(field_get:motion.Message.type)
  return static_cast< ::motion::Message_ActionType >(type_);
}
inline void Message::set_type(::motion::Message_ActionType value) {
  assert(::motion::Message_ActionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.type)
}

// optional string time = 3;
inline bool Message::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_time() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& Message::time() const {
  // @@protoc_insertion_point(field_get:motion.Message.time)
  return *time_;
}
inline void Message::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.time)
}
inline void Message::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.time)
}
inline void Message::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.time)
}
inline ::std::string* Message::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.time)
  return time_;
}
inline ::std::string* Message::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.time)
}

// optional bytes data = 4;
inline bool Message::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Message::data() const {
  // @@protoc_insertion_point(field_get:motion.Message.data)
  return *data_;
}
inline void Message::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.data)
}
inline void Message::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.data)
}
inline void Message::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.data)
}
inline ::std::string* Message::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.data)
  return data_;
}
inline ::std::string* Message::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.data)
}

// optional int32 data_amount = 5;
inline bool Message::has_data_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_data_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_data_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_data_amount() {
  data_amount_ = 0;
  clear_has_data_amount();
}
inline ::google::protobuf::int32 Message::data_amount() const {
  // @@protoc_insertion_point(field_get:motion.Message.data_amount)
  return data_amount_;
}
inline void Message::set_data_amount(::google::protobuf::int32 value) {
  set_has_data_amount();
  data_amount_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.data_amount)
}

// optional int32 data_total = 6;
inline bool Message::has_data_total() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_data_total() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_data_total() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_data_total() {
  data_total_ = 0;
  clear_has_data_total();
}
inline ::google::protobuf::int32 Message::data_total() const {
  // @@protoc_insertion_point(field_get:motion.Message.data_total)
  return data_total_;
}
inline void Message::set_data_total(::google::protobuf::int32 value) {
  set_has_data_total();
  data_total_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.data_total)
}

// optional string serverip = 7;
inline bool Message::has_serverip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Message::set_has_serverip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Message::clear_has_serverip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Message::clear_serverip() {
  if (serverip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverip_->clear();
  }
  clear_has_serverip();
}
inline const ::std::string& Message::serverip() const {
  // @@protoc_insertion_point(field_get:motion.Message.serverip)
  return *serverip_;
}
inline void Message::set_serverip(const ::std::string& value) {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverip_ = new ::std::string;
  }
  serverip_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.serverip)
}
inline void Message::set_serverip(const char* value) {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverip_ = new ::std::string;
  }
  serverip_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.serverip)
}
inline void Message::set_serverip(const char* value, size_t size) {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverip_ = new ::std::string;
  }
  serverip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.serverip)
}
inline ::std::string* Message::mutable_serverip() {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.serverip)
  return serverip_;
}
inline ::std::string* Message::release_serverip() {
  clear_has_serverip();
  if (serverip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverip_;
    serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_serverip(::std::string* serverip) {
  if (serverip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverip_;
  }
  if (serverip) {
    set_has_serverip();
    serverip_ = serverip;
  } else {
    clear_has_serverip();
    serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.serverip)
}

// optional string clientip = 8;
inline bool Message::has_clientip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Message::set_has_clientip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Message::clear_has_clientip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Message::clear_clientip() {
  if (clientip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientip_->clear();
  }
  clear_has_clientip();
}
inline const ::std::string& Message::clientip() const {
  // @@protoc_insertion_point(field_get:motion.Message.clientip)
  return *clientip_;
}
inline void Message::set_clientip(const ::std::string& value) {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientip_ = new ::std::string;
  }
  clientip_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.clientip)
}
inline void Message::set_clientip(const char* value) {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientip_ = new ::std::string;
  }
  clientip_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.clientip)
}
inline void Message::set_clientip(const char* value, size_t size) {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientip_ = new ::std::string;
  }
  clientip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.clientip)
}
inline ::std::string* Message::mutable_clientip() {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.clientip)
  return clientip_;
}
inline ::std::string* Message::release_clientip() {
  clear_has_clientip();
  if (clientip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = clientip_;
    clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_clientip(::std::string* clientip) {
  if (clientip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientip_;
  }
  if (clientip) {
    set_has_clientip();
    clientip_ = clientip;
  } else {
    clear_has_clientip();
    clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.clientip)
}

// optional string devicestarttime = 9;
inline bool Message::has_devicestarttime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Message::set_has_devicestarttime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Message::clear_has_devicestarttime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Message::clear_devicestarttime() {
  if (devicestarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicestarttime_->clear();
  }
  clear_has_devicestarttime();
}
inline const ::std::string& Message::devicestarttime() const {
  // @@protoc_insertion_point(field_get:motion.Message.devicestarttime)
  return *devicestarttime_;
}
inline void Message::set_devicestarttime(const ::std::string& value) {
  set_has_devicestarttime();
  if (devicestarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicestarttime_ = new ::std::string;
  }
  devicestarttime_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.devicestarttime)
}
inline void Message::set_devicestarttime(const char* value) {
  set_has_devicestarttime();
  if (devicestarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicestarttime_ = new ::std::string;
  }
  devicestarttime_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.devicestarttime)
}
inline void Message::set_devicestarttime(const char* value, size_t size) {
  set_has_devicestarttime();
  if (devicestarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicestarttime_ = new ::std::string;
  }
  devicestarttime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.devicestarttime)
}
inline ::std::string* Message::mutable_devicestarttime() {
  set_has_devicestarttime();
  if (devicestarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    devicestarttime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.devicestarttime)
  return devicestarttime_;
}
inline ::std::string* Message::release_devicestarttime() {
  clear_has_devicestarttime();
  if (devicestarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = devicestarttime_;
    devicestarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_devicestarttime(::std::string* devicestarttime) {
  if (devicestarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicestarttime_;
  }
  if (devicestarttime) {
    set_has_devicestarttime();
    devicestarttime_ = devicestarttime;
  } else {
    clear_has_devicestarttime();
    devicestarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.devicestarttime)
}

// repeated .motion.Message.MotionCamera motioncamera = 10;
inline int Message::motioncamera_size() const {
  return motioncamera_.size();
}
inline void Message::clear_motioncamera() {
  motioncamera_.Clear();
}
inline const ::motion::Message_MotionCamera& Message::motioncamera(int index) const {
  // @@protoc_insertion_point(field_get:motion.Message.motioncamera)
  return motioncamera_.Get(index);
}
inline ::motion::Message_MotionCamera* Message::mutable_motioncamera(int index) {
  // @@protoc_insertion_point(field_mutable:motion.Message.motioncamera)
  return motioncamera_.Mutable(index);
}
inline ::motion::Message_MotionCamera* Message::add_motioncamera() {
  // @@protoc_insertion_point(field_add:motion.Message.motioncamera)
  return motioncamera_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionCamera >&
Message::motioncamera() const {
  // @@protoc_insertion_point(field_list:motion.Message.motioncamera)
  return motioncamera_;
}
inline ::google::protobuf::RepeatedPtrField< ::motion::Message_MotionCamera >*
Message::mutable_motioncamera() {
  // @@protoc_insertion_point(field_mutable_list:motion.Message.motioncamera)
  return &motioncamera_;
}

// optional string currmonth = 11;
inline bool Message::has_currmonth() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Message::set_has_currmonth() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Message::clear_has_currmonth() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Message::clear_currmonth() {
  if (currmonth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currmonth_->clear();
  }
  clear_has_currmonth();
}
inline const ::std::string& Message::currmonth() const {
  // @@protoc_insertion_point(field_get:motion.Message.currmonth)
  return *currmonth_;
}
inline void Message::set_currmonth(const ::std::string& value) {
  set_has_currmonth();
  if (currmonth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currmonth_ = new ::std::string;
  }
  currmonth_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.currmonth)
}
inline void Message::set_currmonth(const char* value) {
  set_has_currmonth();
  if (currmonth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currmonth_ = new ::std::string;
  }
  currmonth_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.currmonth)
}
inline void Message::set_currmonth(const char* value, size_t size) {
  set_has_currmonth();
  if (currmonth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currmonth_ = new ::std::string;
  }
  currmonth_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.currmonth)
}
inline ::std::string* Message::mutable_currmonth() {
  set_has_currmonth();
  if (currmonth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currmonth_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.currmonth)
  return currmonth_;
}
inline ::std::string* Message::release_currmonth() {
  clear_has_currmonth();
  if (currmonth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = currmonth_;
    currmonth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_currmonth(::std::string* currmonth) {
  if (currmonth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currmonth_;
  }
  if (currmonth) {
    set_has_currmonth();
    currmonth_ = currmonth;
  } else {
    clear_has_currmonth();
    currmonth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.currmonth)
}

// optional string currday = 12;
inline bool Message::has_currday() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Message::set_has_currday() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Message::clear_has_currday() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Message::clear_currday() {
  if (currday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currday_->clear();
  }
  clear_has_currday();
}
inline const ::std::string& Message::currday() const {
  // @@protoc_insertion_point(field_get:motion.Message.currday)
  return *currday_;
}
inline void Message::set_currday(const ::std::string& value) {
  set_has_currday();
  if (currday_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currday_ = new ::std::string;
  }
  currday_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.currday)
}
inline void Message::set_currday(const char* value) {
  set_has_currday();
  if (currday_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currday_ = new ::std::string;
  }
  currday_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.currday)
}
inline void Message::set_currday(const char* value, size_t size) {
  set_has_currday();
  if (currday_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currday_ = new ::std::string;
  }
  currday_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.currday)
}
inline ::std::string* Message::mutable_currday() {
  set_has_currday();
  if (currday_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currday_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.currday)
  return currday_;
}
inline ::std::string* Message::release_currday() {
  clear_has_currday();
  if (currday_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = currday_;
    currday_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_currday(::std::string* currday) {
  if (currday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currday_;
  }
  if (currday) {
    set_has_currday();
    currday_ = currday;
  } else {
    clear_has_currday();
    currday_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.currday)
}

// optional int32 currcam = 13;
inline bool Message::has_currcam() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Message::set_has_currcam() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Message::clear_has_currcam() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Message::clear_currcam() {
  currcam_ = 0;
  clear_has_currcam();
}
inline ::google::protobuf::int32 Message::currcam() const {
  // @@protoc_insertion_point(field_get:motion.Message.currcam)
  return currcam_;
}
inline void Message::set_currcam(::google::protobuf::int32 value) {
  set_has_currcam();
  currcam_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.currcam)
}

// optional int32 packagesize = 14;
inline bool Message::has_packagesize() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Message::set_has_packagesize() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Message::clear_has_packagesize() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Message::clear_packagesize() {
  packagesize_ = 0;
  clear_has_packagesize();
}
inline ::google::protobuf::int32 Message::packagesize() const {
  // @@protoc_insertion_point(field_get:motion.Message.packagesize)
  return packagesize_;
}
inline void Message::set_packagesize(::google::protobuf::int32 value) {
  set_has_packagesize();
  packagesize_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.packagesize)
}

// optional string imagefilepath = 15;
inline bool Message::has_imagefilepath() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Message::set_has_imagefilepath() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Message::clear_has_imagefilepath() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Message::clear_imagefilepath() {
  if (imagefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagefilepath_->clear();
  }
  clear_has_imagefilepath();
}
inline const ::std::string& Message::imagefilepath() const {
  // @@protoc_insertion_point(field_get:motion.Message.imagefilepath)
  return *imagefilepath_;
}
inline void Message::set_imagefilepath(const ::std::string& value) {
  set_has_imagefilepath();
  if (imagefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagefilepath_ = new ::std::string;
  }
  imagefilepath_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.imagefilepath)
}
inline void Message::set_imagefilepath(const char* value) {
  set_has_imagefilepath();
  if (imagefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagefilepath_ = new ::std::string;
  }
  imagefilepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.imagefilepath)
}
inline void Message::set_imagefilepath(const char* value, size_t size) {
  set_has_imagefilepath();
  if (imagefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagefilepath_ = new ::std::string;
  }
  imagefilepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.imagefilepath)
}
inline ::std::string* Message::mutable_imagefilepath() {
  set_has_imagefilepath();
  if (imagefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagefilepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.imagefilepath)
  return imagefilepath_;
}
inline ::std::string* Message::release_imagefilepath() {
  clear_has_imagefilepath();
  if (imagefilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imagefilepath_;
    imagefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_imagefilepath(::std::string* imagefilepath) {
  if (imagefilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagefilepath_;
  }
  if (imagefilepath) {
    set_has_imagefilepath();
    imagefilepath_ = imagefilepath;
  } else {
    clear_has_imagefilepath();
    imagefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.imagefilepath)
}

// optional string videofilepath = 16;
inline bool Message::has_videofilepath() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Message::set_has_videofilepath() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Message::clear_has_videofilepath() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Message::clear_videofilepath() {
  if (videofilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    videofilepath_->clear();
  }
  clear_has_videofilepath();
}
inline const ::std::string& Message::videofilepath() const {
  // @@protoc_insertion_point(field_get:motion.Message.videofilepath)
  return *videofilepath_;
}
inline void Message::set_videofilepath(const ::std::string& value) {
  set_has_videofilepath();
  if (videofilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    videofilepath_ = new ::std::string;
  }
  videofilepath_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.videofilepath)
}
inline void Message::set_videofilepath(const char* value) {
  set_has_videofilepath();
  if (videofilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    videofilepath_ = new ::std::string;
  }
  videofilepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.videofilepath)
}
inline void Message::set_videofilepath(const char* value, size_t size) {
  set_has_videofilepath();
  if (videofilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    videofilepath_ = new ::std::string;
  }
  videofilepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.videofilepath)
}
inline ::std::string* Message::mutable_videofilepath() {
  set_has_videofilepath();
  if (videofilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    videofilepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.videofilepath)
  return videofilepath_;
}
inline ::std::string* Message::release_videofilepath() {
  clear_has_videofilepath();
  if (videofilepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = videofilepath_;
    videofilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_videofilepath(::std::string* videofilepath) {
  if (videofilepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete videofilepath_;
  }
  if (videofilepath) {
    set_has_videofilepath();
    videofilepath_ = videofilepath;
  } else {
    clear_has_videofilepath();
    videofilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.videofilepath)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace motion

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::motion::Message_ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::motion::Message_ActionType>() {
  return ::motion::Message_ActionType_descriptor();
}
template <> struct is_proto_enum< ::motion::Message_SocketType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::motion::Message_SocketType>() {
  return ::motion::Message_SocketType_descriptor();
}
template <> struct is_proto_enum< ::motion::Message_ProcessType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::motion::Message_ProcessType>() {
  return ::motion::Message_ProcessType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_motion_2eproto__INCLUDED
