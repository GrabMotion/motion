// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motion.proto

#ifndef PROTOBUF_motion_2eproto__INCLUDED
#define PROTOBUF_motion_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace motion {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_motion_2eproto();
void protobuf_AssignDesc_motion_2eproto();
void protobuf_ShutdownFile_motion_2eproto();

class Message;
class Message_Instance;

enum Message_ActionType {
  Message_ActionType_ENGAGE = 1000,
  Message_ActionType_REC_START = 1002,
  Message_ActionType_REC_RUNNING = 1003,
  Message_ActionType_REC_STOP = 1004,
  Message_ActionType_UNENGAGE = 1005,
  Message_ActionType_GET_TIME = 1006,
  Message_ActionType_SET_TIME = 1007,
  Message_ActionType_TIME_SET = 1008,
  Message_ActionType_STRM_START = 1009,
  Message_ActionType_STRM_STOP = 1010,
  Message_ActionType_TAKE_PICTURE = 1011,
  Message_ActionType_DISSCONNECT = 1012,
  Message_ActionType_RESPONSE_OK = 200,
  Message_ActionType_RESPONSE_NEXT = 201,
  Message_ActionType_RESPONSE_END = 202,
  Message_ActionType_REC_HAS_CHANGES = 203,
  Message_ActionType_REC_HAS_INSTANCE = 204
};
bool Message_ActionType_IsValid(int value);
const Message_ActionType Message_ActionType_ActionType_MIN = Message_ActionType_RESPONSE_OK;
const Message_ActionType Message_ActionType_ActionType_MAX = Message_ActionType_DISSCONNECT;
const int Message_ActionType_ActionType_ARRAYSIZE = Message_ActionType_ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_ActionType_descriptor();
inline const ::std::string& Message_ActionType_Name(Message_ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_ActionType_descriptor(), value);
}
inline bool Message_ActionType_Parse(
    const ::std::string& name, Message_ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_ActionType>(
    Message_ActionType_descriptor(), name, value);
}
enum Message_SocketType {
  Message_SocketType_SOCKET_PROTO_TOSTRING = 10,
  Message_SocketType_SOCKET_PROTO_TOARRAY = 11,
  Message_SocketType_SOCKET_PLAIN_TEXT = 12,
  Message_SocketType_SPLITTED_MESSAGE = 13,
  Message_SocketType_SINGLE_MESSAGE = 14,
  Message_SocketType_SOCKET_BUFFER_NANO_SIZE = 1250,
  Message_SocketType_SOCKET_BUFFER_MINI_SIZE = 10000,
  Message_SocketType_SOCKET_BUFFER_SMALL_SIZE = 50000,
  Message_SocketType_SOCKET_BUFFER_MEDIUM_SIZE = 150000,
  Message_SocketType_SOCKET_BUFFER_BIG_SIZE = 200000,
  Message_SocketType_TCP_ECHO_PORT = 5010,
  Message_SocketType_TCP_STREAMING_PORT = 5020,
  Message_SocketType_UDP_PORT = 5030,
  Message_SocketType_TCP_MSG_PORT = 5040
};
bool Message_SocketType_IsValid(int value);
const Message_SocketType Message_SocketType_SocketType_MIN = Message_SocketType_SOCKET_PROTO_TOSTRING;
const Message_SocketType Message_SocketType_SocketType_MAX = Message_SocketType_SOCKET_BUFFER_BIG_SIZE;
const int Message_SocketType_SocketType_ARRAYSIZE = Message_SocketType_SocketType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_SocketType_descriptor();
inline const ::std::string& Message_SocketType_Name(Message_SocketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_SocketType_descriptor(), value);
}
inline bool Message_SocketType_Parse(
    const ::std::string& name, Message_SocketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_SocketType>(
    Message_SocketType_descriptor(), name, value);
}
// ===================================================================

class Message_Instance : public ::google::protobuf::Message {
 public:
  Message_Instance();
  virtual ~Message_Instance();

  Message_Instance(const Message_Instance& from);

  inline Message_Instance& operator=(const Message_Instance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_Instance& default_instance();

  void Swap(Message_Instance* other);

  // implements Message ----------------------------------------------

  Message_Instance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_Instance& from);
  void MergeFrom(const Message_Instance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 idinstance = 1;
  inline bool has_idinstance() const;
  inline void clear_idinstance();
  static const int kIdinstanceFieldNumber = 1;
  inline ::google::protobuf::int32 idinstance() const;
  inline void set_idinstance(::google::protobuf::int32 value);

  // optional string filepath = 2;
  inline bool has_filepath() const;
  inline void clear_filepath();
  static const int kFilepathFieldNumber = 2;
  inline const ::std::string& filepath() const;
  inline void set_filepath(const ::std::string& value);
  inline void set_filepath(const char* value);
  inline void set_filepath(const char* value, size_t size);
  inline ::std::string* mutable_filepath();
  inline ::std::string* release_filepath();
  inline void set_allocated_filepath(::std::string* filepath);

  // optional string instancestart = 3;
  inline bool has_instancestart() const;
  inline void clear_instancestart();
  static const int kInstancestartFieldNumber = 3;
  inline const ::std::string& instancestart() const;
  inline void set_instancestart(const ::std::string& value);
  inline void set_instancestart(const char* value);
  inline void set_instancestart(const char* value, size_t size);
  inline ::std::string* mutable_instancestart();
  inline ::std::string* release_instancestart();
  inline void set_allocated_instancestart(::std::string* instancestart);

  // optional string instanceend = 4;
  inline bool has_instanceend() const;
  inline void clear_instanceend();
  static const int kInstanceendFieldNumber = 4;
  inline const ::std::string& instanceend() const;
  inline void set_instanceend(const ::std::string& value);
  inline void set_instanceend(const char* value);
  inline void set_instanceend(const char* value, size_t size);
  inline ::std::string* mutable_instanceend();
  inline ::std::string* release_instanceend();
  inline void set_allocated_instanceend(::std::string* instanceend);

  // optional string regionfilename = 5;
  inline bool has_regionfilename() const;
  inline void clear_regionfilename();
  static const int kRegionfilenameFieldNumber = 5;
  inline const ::std::string& regionfilename() const;
  inline void set_regionfilename(const ::std::string& value);
  inline void set_regionfilename(const char* value);
  inline void set_regionfilename(const char* value, size_t size);
  inline ::std::string* mutable_regionfilename();
  inline ::std::string* release_regionfilename();
  inline void set_allocated_regionfilename(::std::string* regionfilename);

  // optional int32 instanceamount = 6;
  inline bool has_instanceamount() const;
  inline void clear_instanceamount();
  static const int kInstanceamountFieldNumber = 6;
  inline ::google::protobuf::int32 instanceamount() const;
  inline void set_instanceamount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:motion.Message.Instance)
 private:
  inline void set_has_idinstance();
  inline void clear_has_idinstance();
  inline void set_has_filepath();
  inline void clear_has_filepath();
  inline void set_has_instancestart();
  inline void clear_has_instancestart();
  inline void set_has_instanceend();
  inline void clear_has_instanceend();
  inline void set_has_regionfilename();
  inline void clear_has_regionfilename();
  inline void set_has_instanceamount();
  inline void clear_has_instanceamount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* filepath_;
  ::std::string* instancestart_;
  ::google::protobuf::int32 idinstance_;
  ::google::protobuf::int32 instanceamount_;
  ::std::string* instanceend_;
  ::std::string* regionfilename_;
  friend void  protobuf_AddDesc_motion_2eproto();
  friend void protobuf_AssignDesc_motion_2eproto();
  friend void protobuf_ShutdownFile_motion_2eproto();

  void InitAsDefaultInstance();
  static Message_Instance* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Message_Instance Instance;

  typedef Message_ActionType ActionType;
  static const ActionType ENGAGE = Message_ActionType_ENGAGE;
  static const ActionType REC_START = Message_ActionType_REC_START;
  static const ActionType REC_RUNNING = Message_ActionType_REC_RUNNING;
  static const ActionType REC_STOP = Message_ActionType_REC_STOP;
  static const ActionType UNENGAGE = Message_ActionType_UNENGAGE;
  static const ActionType GET_TIME = Message_ActionType_GET_TIME;
  static const ActionType SET_TIME = Message_ActionType_SET_TIME;
  static const ActionType TIME_SET = Message_ActionType_TIME_SET;
  static const ActionType STRM_START = Message_ActionType_STRM_START;
  static const ActionType STRM_STOP = Message_ActionType_STRM_STOP;
  static const ActionType TAKE_PICTURE = Message_ActionType_TAKE_PICTURE;
  static const ActionType DISSCONNECT = Message_ActionType_DISSCONNECT;
  static const ActionType RESPONSE_OK = Message_ActionType_RESPONSE_OK;
  static const ActionType RESPONSE_NEXT = Message_ActionType_RESPONSE_NEXT;
  static const ActionType RESPONSE_END = Message_ActionType_RESPONSE_END;
  static const ActionType REC_HAS_CHANGES = Message_ActionType_REC_HAS_CHANGES;
  static const ActionType REC_HAS_INSTANCE = Message_ActionType_REC_HAS_INSTANCE;
  static inline bool ActionType_IsValid(int value) {
    return Message_ActionType_IsValid(value);
  }
  static const ActionType ActionType_MIN =
    Message_ActionType_ActionType_MIN;
  static const ActionType ActionType_MAX =
    Message_ActionType_ActionType_MAX;
  static const int ActionType_ARRAYSIZE =
    Message_ActionType_ActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionType_descriptor() {
    return Message_ActionType_descriptor();
  }
  static inline const ::std::string& ActionType_Name(ActionType value) {
    return Message_ActionType_Name(value);
  }
  static inline bool ActionType_Parse(const ::std::string& name,
      ActionType* value) {
    return Message_ActionType_Parse(name, value);
  }

  typedef Message_SocketType SocketType;
  static const SocketType SOCKET_PROTO_TOSTRING = Message_SocketType_SOCKET_PROTO_TOSTRING;
  static const SocketType SOCKET_PROTO_TOARRAY = Message_SocketType_SOCKET_PROTO_TOARRAY;
  static const SocketType SOCKET_PLAIN_TEXT = Message_SocketType_SOCKET_PLAIN_TEXT;
  static const SocketType SPLITTED_MESSAGE = Message_SocketType_SPLITTED_MESSAGE;
  static const SocketType SINGLE_MESSAGE = Message_SocketType_SINGLE_MESSAGE;
  static const SocketType SOCKET_BUFFER_NANO_SIZE = Message_SocketType_SOCKET_BUFFER_NANO_SIZE;
  static const SocketType SOCKET_BUFFER_MINI_SIZE = Message_SocketType_SOCKET_BUFFER_MINI_SIZE;
  static const SocketType SOCKET_BUFFER_SMALL_SIZE = Message_SocketType_SOCKET_BUFFER_SMALL_SIZE;
  static const SocketType SOCKET_BUFFER_MEDIUM_SIZE = Message_SocketType_SOCKET_BUFFER_MEDIUM_SIZE;
  static const SocketType SOCKET_BUFFER_BIG_SIZE = Message_SocketType_SOCKET_BUFFER_BIG_SIZE;
  static const SocketType TCP_ECHO_PORT = Message_SocketType_TCP_ECHO_PORT;
  static const SocketType TCP_STREAMING_PORT = Message_SocketType_TCP_STREAMING_PORT;
  static const SocketType UDP_PORT = Message_SocketType_UDP_PORT;
  static const SocketType TCP_MSG_PORT = Message_SocketType_TCP_MSG_PORT;
  static inline bool SocketType_IsValid(int value) {
    return Message_SocketType_IsValid(value);
  }
  static const SocketType SocketType_MIN =
    Message_SocketType_SocketType_MIN;
  static const SocketType SocketType_MAX =
    Message_SocketType_SocketType_MAX;
  static const int SocketType_ARRAYSIZE =
    Message_SocketType_SocketType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SocketType_descriptor() {
    return Message_SocketType_descriptor();
  }
  static inline const ::std::string& SocketType_Name(SocketType value) {
    return Message_SocketType_Name(value);
  }
  static inline bool SocketType_Parse(const ::std::string& name,
      SocketType* value) {
    return Message_SocketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .motion.Message.ActionType type = 1 [default = ENGAGE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::motion::Message_ActionType type() const;
  inline void set_type(::motion::Message_ActionType value);

  // optional string time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int32 data_amount = 4;
  inline bool has_data_amount() const;
  inline void clear_data_amount();
  static const int kDataAmountFieldNumber = 4;
  inline ::google::protobuf::int32 data_amount() const;
  inline void set_data_amount(::google::protobuf::int32 value);

  // optional int32 data_total = 5;
  inline bool has_data_total() const;
  inline void clear_data_total();
  static const int kDataTotalFieldNumber = 5;
  inline ::google::protobuf::int32 data_total() const;
  inline void set_data_total(::google::protobuf::int32 value);

  // optional string serverip = 6;
  inline bool has_serverip() const;
  inline void clear_serverip();
  static const int kServeripFieldNumber = 6;
  inline const ::std::string& serverip() const;
  inline void set_serverip(const ::std::string& value);
  inline void set_serverip(const char* value);
  inline void set_serverip(const char* value, size_t size);
  inline ::std::string* mutable_serverip();
  inline ::std::string* release_serverip();
  inline void set_allocated_serverip(::std::string* serverip);

  // optional string clientip = 7;
  inline bool has_clientip() const;
  inline void clear_clientip();
  static const int kClientipFieldNumber = 7;
  inline const ::std::string& clientip() const;
  inline void set_clientip(const ::std::string& value);
  inline void set_clientip(const char* value);
  inline void set_clientip(const char* value, size_t size);
  inline ::std::string* mutable_clientip();
  inline ::std::string* release_clientip();
  inline void set_allocated_clientip(::std::string* clientip);

  // optional string payload = 8;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 8;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const char* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // optional bool recognizing = 11;
  inline bool has_recognizing() const;
  inline void clear_recognizing();
  static const int kRecognizingFieldNumber = 11;
  inline bool recognizing() const;
  inline void set_recognizing(bool value);

  // repeated .motion.Message.Instance instance = 12;
  inline int instance_size() const;
  inline void clear_instance();
  static const int kInstanceFieldNumber = 12;
  inline const ::motion::Message_Instance& instance(int index) const;
  inline ::motion::Message_Instance* mutable_instance(int index);
  inline ::motion::Message_Instance* add_instance();
  inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_Instance >&
      instance() const;
  inline ::google::protobuf::RepeatedPtrField< ::motion::Message_Instance >*
      mutable_instance();

  // optional bool storeimage = 13;
  inline bool has_storeimage() const;
  inline void clear_storeimage();
  static const int kStoreimageFieldNumber = 13;
  inline bool storeimage() const;
  inline void set_storeimage(bool value);

  // optional bool storecrop = 14;
  inline bool has_storecrop() const;
  inline void clear_storecrop();
  static const int kStorecropFieldNumber = 14;
  inline bool storecrop() const;
  inline void set_storecrop(bool value);

  // optional string codename = 15;
  inline bool has_codename() const;
  inline void clear_codename();
  static const int kCodenameFieldNumber = 15;
  inline const ::std::string& codename() const;
  inline void set_codename(const ::std::string& value);
  inline void set_codename(const char* value);
  inline void set_codename(const char* value, size_t size);
  inline ::std::string* mutable_codename();
  inline ::std::string* release_codename();
  inline void set_allocated_codename(::std::string* codename);

  // optional bytes regioncoords = 16;
  inline bool has_regioncoords() const;
  inline void clear_regioncoords();
  static const int kRegioncoordsFieldNumber = 16;
  inline const ::std::string& regioncoords() const;
  inline void set_regioncoords(const ::std::string& value);
  inline void set_regioncoords(const char* value);
  inline void set_regioncoords(const void* value, size_t size);
  inline ::std::string* mutable_regioncoords();
  inline ::std::string* release_regioncoords();
  inline void set_allocated_regioncoords(::std::string* regioncoords);

  // optional string starttime = 17;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 17;
  inline const ::std::string& starttime() const;
  inline void set_starttime(const ::std::string& value);
  inline void set_starttime(const char* value);
  inline void set_starttime(const char* value, size_t size);
  inline ::std::string* mutable_starttime();
  inline ::std::string* release_starttime();
  inline void set_allocated_starttime(::std::string* starttime);

  // optional bool region = 18;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 18;
  inline bool region() const;
  inline void set_region(bool value);

  // optional int32 numberofchanges = 20;
  inline bool has_numberofchanges() const;
  inline void clear_numberofchanges();
  static const int kNumberofchangesFieldNumber = 20;
  inline ::google::protobuf::int32 numberofchanges() const;
  inline void set_numberofchanges(::google::protobuf::int32 value);

  // optional bool engaged = 21;
  inline bool has_engaged() const;
  inline void clear_engaged();
  static const int kEngagedFieldNumber = 21;
  inline bool engaged() const;
  inline void set_engaged(bool value);

  // optional int32 amount = 22;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 22;
  inline ::google::protobuf::int32 amount() const;
  inline void set_amount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:motion.Message)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_data_amount();
  inline void clear_has_data_amount();
  inline void set_has_data_total();
  inline void clear_has_data_total();
  inline void set_has_serverip();
  inline void clear_has_serverip();
  inline void set_has_clientip();
  inline void clear_has_clientip();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_recognizing();
  inline void clear_has_recognizing();
  inline void set_has_storeimage();
  inline void clear_has_storeimage();
  inline void set_has_storecrop();
  inline void clear_has_storecrop();
  inline void set_has_codename();
  inline void clear_has_codename();
  inline void set_has_regioncoords();
  inline void clear_has_regioncoords();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_numberofchanges();
  inline void clear_has_numberofchanges();
  inline void set_has_engaged();
  inline void clear_has_engaged();
  inline void set_has_amount();
  inline void clear_has_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* time_;
  int type_;
  ::google::protobuf::int32 data_amount_;
  ::std::string* data_;
  ::std::string* serverip_;
  ::std::string* clientip_;
  ::std::string* payload_;
  ::google::protobuf::RepeatedPtrField< ::motion::Message_Instance > instance_;
  ::google::protobuf::int32 data_total_;
  bool recognizing_;
  bool storeimage_;
  bool storecrop_;
  bool region_;
  ::std::string* codename_;
  ::std::string* regioncoords_;
  ::std::string* starttime_;
  ::google::protobuf::int32 numberofchanges_;
  bool engaged_;
  ::google::protobuf::int32 amount_;
  friend void  protobuf_AddDesc_motion_2eproto();
  friend void protobuf_AssignDesc_motion_2eproto();
  friend void protobuf_ShutdownFile_motion_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Message_Instance

// required int32 idinstance = 1;
inline bool Message_Instance::has_idinstance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_Instance::set_has_idinstance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_Instance::clear_has_idinstance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_Instance::clear_idinstance() {
  idinstance_ = 0;
  clear_has_idinstance();
}
inline ::google::protobuf::int32 Message_Instance::idinstance() const {
  // @@protoc_insertion_point(field_get:motion.Message.Instance.idinstance)
  return idinstance_;
}
inline void Message_Instance::set_idinstance(::google::protobuf::int32 value) {
  set_has_idinstance();
  idinstance_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.Instance.idinstance)
}

// optional string filepath = 2;
inline bool Message_Instance::has_filepath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_Instance::set_has_filepath() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_Instance::clear_has_filepath() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_Instance::clear_filepath() {
  if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_->clear();
  }
  clear_has_filepath();
}
inline const ::std::string& Message_Instance::filepath() const {
  // @@protoc_insertion_point(field_get:motion.Message.Instance.filepath)
  return *filepath_;
}
inline void Message_Instance::set_filepath(const ::std::string& value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.Instance.filepath)
}
inline void Message_Instance::set_filepath(const char* value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.Instance.filepath)
}
inline void Message_Instance::set_filepath(const char* value, size_t size) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.Instance.filepath)
}
inline ::std::string* Message_Instance::mutable_filepath() {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.Instance.filepath)
  return filepath_;
}
inline ::std::string* Message_Instance::release_filepath() {
  clear_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filepath_;
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_Instance::set_allocated_filepath(::std::string* filepath) {
  if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filepath_;
  }
  if (filepath) {
    set_has_filepath();
    filepath_ = filepath;
  } else {
    clear_has_filepath();
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Instance.filepath)
}

// optional string instancestart = 3;
inline bool Message_Instance::has_instancestart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message_Instance::set_has_instancestart() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message_Instance::clear_has_instancestart() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message_Instance::clear_instancestart() {
  if (instancestart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancestart_->clear();
  }
  clear_has_instancestart();
}
inline const ::std::string& Message_Instance::instancestart() const {
  // @@protoc_insertion_point(field_get:motion.Message.Instance.instancestart)
  return *instancestart_;
}
inline void Message_Instance::set_instancestart(const ::std::string& value) {
  set_has_instancestart();
  if (instancestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancestart_ = new ::std::string;
  }
  instancestart_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.Instance.instancestart)
}
inline void Message_Instance::set_instancestart(const char* value) {
  set_has_instancestart();
  if (instancestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancestart_ = new ::std::string;
  }
  instancestart_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.Instance.instancestart)
}
inline void Message_Instance::set_instancestart(const char* value, size_t size) {
  set_has_instancestart();
  if (instancestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancestart_ = new ::std::string;
  }
  instancestart_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.Instance.instancestart)
}
inline ::std::string* Message_Instance::mutable_instancestart() {
  set_has_instancestart();
  if (instancestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instancestart_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.Instance.instancestart)
  return instancestart_;
}
inline ::std::string* Message_Instance::release_instancestart() {
  clear_has_instancestart();
  if (instancestart_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = instancestart_;
    instancestart_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_Instance::set_allocated_instancestart(::std::string* instancestart) {
  if (instancestart_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instancestart_;
  }
  if (instancestart) {
    set_has_instancestart();
    instancestart_ = instancestart;
  } else {
    clear_has_instancestart();
    instancestart_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Instance.instancestart)
}

// optional string instanceend = 4;
inline bool Message_Instance::has_instanceend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message_Instance::set_has_instanceend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message_Instance::clear_has_instanceend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message_Instance::clear_instanceend() {
  if (instanceend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instanceend_->clear();
  }
  clear_has_instanceend();
}
inline const ::std::string& Message_Instance::instanceend() const {
  // @@protoc_insertion_point(field_get:motion.Message.Instance.instanceend)
  return *instanceend_;
}
inline void Message_Instance::set_instanceend(const ::std::string& value) {
  set_has_instanceend();
  if (instanceend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instanceend_ = new ::std::string;
  }
  instanceend_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.Instance.instanceend)
}
inline void Message_Instance::set_instanceend(const char* value) {
  set_has_instanceend();
  if (instanceend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instanceend_ = new ::std::string;
  }
  instanceend_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.Instance.instanceend)
}
inline void Message_Instance::set_instanceend(const char* value, size_t size) {
  set_has_instanceend();
  if (instanceend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instanceend_ = new ::std::string;
  }
  instanceend_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.Instance.instanceend)
}
inline ::std::string* Message_Instance::mutable_instanceend() {
  set_has_instanceend();
  if (instanceend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instanceend_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.Instance.instanceend)
  return instanceend_;
}
inline ::std::string* Message_Instance::release_instanceend() {
  clear_has_instanceend();
  if (instanceend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = instanceend_;
    instanceend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_Instance::set_allocated_instanceend(::std::string* instanceend) {
  if (instanceend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instanceend_;
  }
  if (instanceend) {
    set_has_instanceend();
    instanceend_ = instanceend;
  } else {
    clear_has_instanceend();
    instanceend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Instance.instanceend)
}

// optional string regionfilename = 5;
inline bool Message_Instance::has_regionfilename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message_Instance::set_has_regionfilename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message_Instance::clear_has_regionfilename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message_Instance::clear_regionfilename() {
  if (regionfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regionfilename_->clear();
  }
  clear_has_regionfilename();
}
inline const ::std::string& Message_Instance::regionfilename() const {
  // @@protoc_insertion_point(field_get:motion.Message.Instance.regionfilename)
  return *regionfilename_;
}
inline void Message_Instance::set_regionfilename(const ::std::string& value) {
  set_has_regionfilename();
  if (regionfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regionfilename_ = new ::std::string;
  }
  regionfilename_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.Instance.regionfilename)
}
inline void Message_Instance::set_regionfilename(const char* value) {
  set_has_regionfilename();
  if (regionfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regionfilename_ = new ::std::string;
  }
  regionfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.Instance.regionfilename)
}
inline void Message_Instance::set_regionfilename(const char* value, size_t size) {
  set_has_regionfilename();
  if (regionfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regionfilename_ = new ::std::string;
  }
  regionfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.Instance.regionfilename)
}
inline ::std::string* Message_Instance::mutable_regionfilename() {
  set_has_regionfilename();
  if (regionfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regionfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.Instance.regionfilename)
  return regionfilename_;
}
inline ::std::string* Message_Instance::release_regionfilename() {
  clear_has_regionfilename();
  if (regionfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = regionfilename_;
    regionfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message_Instance::set_allocated_regionfilename(::std::string* regionfilename) {
  if (regionfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete regionfilename_;
  }
  if (regionfilename) {
    set_has_regionfilename();
    regionfilename_ = regionfilename;
  } else {
    clear_has_regionfilename();
    regionfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.Instance.regionfilename)
}

// optional int32 instanceamount = 6;
inline bool Message_Instance::has_instanceamount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message_Instance::set_has_instanceamount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message_Instance::clear_has_instanceamount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message_Instance::clear_instanceamount() {
  instanceamount_ = 0;
  clear_has_instanceamount();
}
inline ::google::protobuf::int32 Message_Instance::instanceamount() const {
  // @@protoc_insertion_point(field_get:motion.Message.Instance.instanceamount)
  return instanceamount_;
}
inline void Message_Instance::set_instanceamount(::google::protobuf::int32 value) {
  set_has_instanceamount();
  instanceamount_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.Instance.instanceamount)
}

// -------------------------------------------------------------------

// Message

// required .motion.Message.ActionType type = 1 [default = ENGAGE];
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_type() {
  type_ = 1000;
  clear_has_type();
}
inline ::motion::Message_ActionType Message::type() const {
  // @@protoc_insertion_point(field_get:motion.Message.type)
  return static_cast< ::motion::Message_ActionType >(type_);
}
inline void Message::set_type(::motion::Message_ActionType value) {
  assert(::motion::Message_ActionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.type)
}

// optional string time = 2;
inline bool Message::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_time() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& Message::time() const {
  // @@protoc_insertion_point(field_get:motion.Message.time)
  return *time_;
}
inline void Message::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.time)
}
inline void Message::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.time)
}
inline void Message::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.time)
}
inline ::std::string* Message::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.time)
  return time_;
}
inline ::std::string* Message::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.time)
}

// optional bytes data = 3;
inline bool Message::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Message::data() const {
  // @@protoc_insertion_point(field_get:motion.Message.data)
  return *data_;
}
inline void Message::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.data)
}
inline void Message::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.data)
}
inline void Message::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.data)
}
inline ::std::string* Message::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.data)
  return data_;
}
inline ::std::string* Message::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.data)
}

// optional int32 data_amount = 4;
inline bool Message::has_data_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_data_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_data_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_data_amount() {
  data_amount_ = 0;
  clear_has_data_amount();
}
inline ::google::protobuf::int32 Message::data_amount() const {
  // @@protoc_insertion_point(field_get:motion.Message.data_amount)
  return data_amount_;
}
inline void Message::set_data_amount(::google::protobuf::int32 value) {
  set_has_data_amount();
  data_amount_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.data_amount)
}

// optional int32 data_total = 5;
inline bool Message::has_data_total() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_data_total() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_data_total() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_data_total() {
  data_total_ = 0;
  clear_has_data_total();
}
inline ::google::protobuf::int32 Message::data_total() const {
  // @@protoc_insertion_point(field_get:motion.Message.data_total)
  return data_total_;
}
inline void Message::set_data_total(::google::protobuf::int32 value) {
  set_has_data_total();
  data_total_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.data_total)
}

// optional string serverip = 6;
inline bool Message::has_serverip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_serverip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_serverip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_serverip() {
  if (serverip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverip_->clear();
  }
  clear_has_serverip();
}
inline const ::std::string& Message::serverip() const {
  // @@protoc_insertion_point(field_get:motion.Message.serverip)
  return *serverip_;
}
inline void Message::set_serverip(const ::std::string& value) {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverip_ = new ::std::string;
  }
  serverip_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.serverip)
}
inline void Message::set_serverip(const char* value) {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverip_ = new ::std::string;
  }
  serverip_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.serverip)
}
inline void Message::set_serverip(const char* value, size_t size) {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverip_ = new ::std::string;
  }
  serverip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.serverip)
}
inline ::std::string* Message::mutable_serverip() {
  set_has_serverip();
  if (serverip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.serverip)
  return serverip_;
}
inline ::std::string* Message::release_serverip() {
  clear_has_serverip();
  if (serverip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverip_;
    serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_serverip(::std::string* serverip) {
  if (serverip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverip_;
  }
  if (serverip) {
    set_has_serverip();
    serverip_ = serverip;
  } else {
    clear_has_serverip();
    serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.serverip)
}

// optional string clientip = 7;
inline bool Message::has_clientip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Message::set_has_clientip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Message::clear_has_clientip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Message::clear_clientip() {
  if (clientip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientip_->clear();
  }
  clear_has_clientip();
}
inline const ::std::string& Message::clientip() const {
  // @@protoc_insertion_point(field_get:motion.Message.clientip)
  return *clientip_;
}
inline void Message::set_clientip(const ::std::string& value) {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientip_ = new ::std::string;
  }
  clientip_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.clientip)
}
inline void Message::set_clientip(const char* value) {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientip_ = new ::std::string;
  }
  clientip_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.clientip)
}
inline void Message::set_clientip(const char* value, size_t size) {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientip_ = new ::std::string;
  }
  clientip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.clientip)
}
inline ::std::string* Message::mutable_clientip() {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.clientip)
  return clientip_;
}
inline ::std::string* Message::release_clientip() {
  clear_has_clientip();
  if (clientip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = clientip_;
    clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_clientip(::std::string* clientip) {
  if (clientip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientip_;
  }
  if (clientip) {
    set_has_clientip();
    clientip_ = clientip;
  } else {
    clear_has_clientip();
    clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.clientip)
}

// optional string payload = 8;
inline bool Message::has_payload() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Message::set_has_payload() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Message::clear_has_payload() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Message::clear_payload() {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& Message::payload() const {
  // @@protoc_insertion_point(field_get:motion.Message.payload)
  return *payload_;
}
inline void Message::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.payload)
}
inline void Message::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.payload)
}
inline void Message::set_payload(const char* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.payload)
}
inline ::std::string* Message::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.payload)
  return payload_;
}
inline ::std::string* Message::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.payload)
}

// optional bool recognizing = 11;
inline bool Message::has_recognizing() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Message::set_has_recognizing() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Message::clear_has_recognizing() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Message::clear_recognizing() {
  recognizing_ = false;
  clear_has_recognizing();
}
inline bool Message::recognizing() const {
  // @@protoc_insertion_point(field_get:motion.Message.recognizing)
  return recognizing_;
}
inline void Message::set_recognizing(bool value) {
  set_has_recognizing();
  recognizing_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.recognizing)
}

// repeated .motion.Message.Instance instance = 12;
inline int Message::instance_size() const {
  return instance_.size();
}
inline void Message::clear_instance() {
  instance_.Clear();
}
inline const ::motion::Message_Instance& Message::instance(int index) const {
  // @@protoc_insertion_point(field_get:motion.Message.instance)
  return instance_.Get(index);
}
inline ::motion::Message_Instance* Message::mutable_instance(int index) {
  // @@protoc_insertion_point(field_mutable:motion.Message.instance)
  return instance_.Mutable(index);
}
inline ::motion::Message_Instance* Message::add_instance() {
  // @@protoc_insertion_point(field_add:motion.Message.instance)
  return instance_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::motion::Message_Instance >&
Message::instance() const {
  // @@protoc_insertion_point(field_list:motion.Message.instance)
  return instance_;
}
inline ::google::protobuf::RepeatedPtrField< ::motion::Message_Instance >*
Message::mutable_instance() {
  // @@protoc_insertion_point(field_mutable_list:motion.Message.instance)
  return &instance_;
}

// optional bool storeimage = 13;
inline bool Message::has_storeimage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Message::set_has_storeimage() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Message::clear_has_storeimage() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Message::clear_storeimage() {
  storeimage_ = false;
  clear_has_storeimage();
}
inline bool Message::storeimage() const {
  // @@protoc_insertion_point(field_get:motion.Message.storeimage)
  return storeimage_;
}
inline void Message::set_storeimage(bool value) {
  set_has_storeimage();
  storeimage_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.storeimage)
}

// optional bool storecrop = 14;
inline bool Message::has_storecrop() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Message::set_has_storecrop() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Message::clear_has_storecrop() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Message::clear_storecrop() {
  storecrop_ = false;
  clear_has_storecrop();
}
inline bool Message::storecrop() const {
  // @@protoc_insertion_point(field_get:motion.Message.storecrop)
  return storecrop_;
}
inline void Message::set_storecrop(bool value) {
  set_has_storecrop();
  storecrop_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.storecrop)
}

// optional string codename = 15;
inline bool Message::has_codename() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Message::set_has_codename() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Message::clear_has_codename() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Message::clear_codename() {
  if (codename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codename_->clear();
  }
  clear_has_codename();
}
inline const ::std::string& Message::codename() const {
  // @@protoc_insertion_point(field_get:motion.Message.codename)
  return *codename_;
}
inline void Message::set_codename(const ::std::string& value) {
  set_has_codename();
  if (codename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codename_ = new ::std::string;
  }
  codename_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.codename)
}
inline void Message::set_codename(const char* value) {
  set_has_codename();
  if (codename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codename_ = new ::std::string;
  }
  codename_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.codename)
}
inline void Message::set_codename(const char* value, size_t size) {
  set_has_codename();
  if (codename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codename_ = new ::std::string;
  }
  codename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.codename)
}
inline ::std::string* Message::mutable_codename() {
  set_has_codename();
  if (codename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.codename)
  return codename_;
}
inline ::std::string* Message::release_codename() {
  clear_has_codename();
  if (codename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = codename_;
    codename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_codename(::std::string* codename) {
  if (codename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codename_;
  }
  if (codename) {
    set_has_codename();
    codename_ = codename;
  } else {
    clear_has_codename();
    codename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.codename)
}

// optional bytes regioncoords = 16;
inline bool Message::has_regioncoords() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Message::set_has_regioncoords() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Message::clear_has_regioncoords() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Message::clear_regioncoords() {
  if (regioncoords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regioncoords_->clear();
  }
  clear_has_regioncoords();
}
inline const ::std::string& Message::regioncoords() const {
  // @@protoc_insertion_point(field_get:motion.Message.regioncoords)
  return *regioncoords_;
}
inline void Message::set_regioncoords(const ::std::string& value) {
  set_has_regioncoords();
  if (regioncoords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regioncoords_ = new ::std::string;
  }
  regioncoords_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.regioncoords)
}
inline void Message::set_regioncoords(const char* value) {
  set_has_regioncoords();
  if (regioncoords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regioncoords_ = new ::std::string;
  }
  regioncoords_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.regioncoords)
}
inline void Message::set_regioncoords(const void* value, size_t size) {
  set_has_regioncoords();
  if (regioncoords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regioncoords_ = new ::std::string;
  }
  regioncoords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.regioncoords)
}
inline ::std::string* Message::mutable_regioncoords() {
  set_has_regioncoords();
  if (regioncoords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    regioncoords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.regioncoords)
  return regioncoords_;
}
inline ::std::string* Message::release_regioncoords() {
  clear_has_regioncoords();
  if (regioncoords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = regioncoords_;
    regioncoords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_regioncoords(::std::string* regioncoords) {
  if (regioncoords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete regioncoords_;
  }
  if (regioncoords) {
    set_has_regioncoords();
    regioncoords_ = regioncoords;
  } else {
    clear_has_regioncoords();
    regioncoords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.regioncoords)
}

// optional string starttime = 17;
inline bool Message::has_starttime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Message::set_has_starttime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Message::clear_has_starttime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Message::clear_starttime() {
  if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starttime_->clear();
  }
  clear_has_starttime();
}
inline const ::std::string& Message::starttime() const {
  // @@protoc_insertion_point(field_get:motion.Message.starttime)
  return *starttime_;
}
inline void Message::set_starttime(const ::std::string& value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
  // @@protoc_insertion_point(field_set:motion.Message.starttime)
}
inline void Message::set_starttime(const char* value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
  // @@protoc_insertion_point(field_set_char:motion.Message.starttime)
}
inline void Message::set_starttime(const char* value, size_t size) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:motion.Message.starttime)
}
inline ::std::string* Message::mutable_starttime() {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starttime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:motion.Message.starttime)
  return starttime_;
}
inline ::std::string* Message::release_starttime() {
  clear_has_starttime();
  if (starttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = starttime_;
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_starttime(::std::string* starttime) {
  if (starttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starttime_;
  }
  if (starttime) {
    set_has_starttime();
    starttime_ = starttime;
  } else {
    clear_has_starttime();
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:motion.Message.starttime)
}

// optional bool region = 18;
inline bool Message::has_region() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Message::set_has_region() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Message::clear_has_region() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Message::clear_region() {
  region_ = false;
  clear_has_region();
}
inline bool Message::region() const {
  // @@protoc_insertion_point(field_get:motion.Message.region)
  return region_;
}
inline void Message::set_region(bool value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.region)
}

// optional int32 numberofchanges = 20;
inline bool Message::has_numberofchanges() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Message::set_has_numberofchanges() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Message::clear_has_numberofchanges() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Message::clear_numberofchanges() {
  numberofchanges_ = 0;
  clear_has_numberofchanges();
}
inline ::google::protobuf::int32 Message::numberofchanges() const {
  // @@protoc_insertion_point(field_get:motion.Message.numberofchanges)
  return numberofchanges_;
}
inline void Message::set_numberofchanges(::google::protobuf::int32 value) {
  set_has_numberofchanges();
  numberofchanges_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.numberofchanges)
}

// optional bool engaged = 21;
inline bool Message::has_engaged() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Message::set_has_engaged() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Message::clear_has_engaged() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Message::clear_engaged() {
  engaged_ = false;
  clear_has_engaged();
}
inline bool Message::engaged() const {
  // @@protoc_insertion_point(field_get:motion.Message.engaged)
  return engaged_;
}
inline void Message::set_engaged(bool value) {
  set_has_engaged();
  engaged_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.engaged)
}

// optional int32 amount = 22;
inline bool Message::has_amount() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Message::set_has_amount() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Message::clear_has_amount() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Message::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline ::google::protobuf::int32 Message::amount() const {
  // @@protoc_insertion_point(field_get:motion.Message.amount)
  return amount_;
}
inline void Message::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:motion.Message.amount)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace motion

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::motion::Message_ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::motion::Message_ActionType>() {
  return ::motion::Message_ActionType_descriptor();
}
template <> struct is_proto_enum< ::motion::Message_SocketType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::motion::Message_SocketType>() {
  return ::motion::Message_SocketType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_motion_2eproto__INCLUDED
