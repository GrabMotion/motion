// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motion.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "motion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace motion {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_ActionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Recognition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Recognition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Instance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Instance_reflection_ = NULL;
const ::google::protobuf::Descriptor* Region_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Region_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_motion_2eproto() {
  protobuf_AddDesc_motion_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "motion.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, tcpport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, udpport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msgport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, serverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, clientip_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_ActionType_descriptor_ = Message_descriptor_->enum_type(0);
  Recognition_descriptor_ = file->message_type(1);
  static const int Recognition_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognition, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognition, setstoreimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognition, setsendamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognition, setsendfilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognition, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognition, filepath_),
  };
  Recognition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Recognition_descriptor_,
      Recognition::default_instance_,
      Recognition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recognition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Recognition));
  Instance_descriptor_ = file->message_type(2);
  static const int Instance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, idinstance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, end_),
  };
  Instance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Instance_descriptor_,
      Instance::default_instance_,
      Instance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Instance));
  Region_descriptor_ = file->message_type(3);
  static const int Region_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, xml_content_),
  };
  Region_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Region_descriptor_,
      Region::default_instance_,
      Region_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Region));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_motion_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Recognition_descriptor_, &Recognition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Instance_descriptor_, &Instance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Region_descriptor_, &Region::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_motion_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Recognition::default_instance_;
  delete Recognition_reflection_;
  delete Instance::default_instance_;
  delete Instance_reflection_;
  delete Region::default_instance_;
  delete Region_reflection_;
}

void protobuf_AddDesc_motion_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014motion.proto\022\006motion\"\230\005\n\007Message\0221\n\004ty"
    "pe\030\001 \002(\0162\032.motion.Message.ActionType:\007CO"
    "NNECT\022\014\n\004time\030\002 \001(\t\022\r\n\005width\030\003 \001(\005\022\016\n\006he"
    "ight\030\004 \001(\005\022\014\n\004data\030\005 \001(\014\022:\n\007tcpport\030\006 \002("
    "\0162\032.motion.Message.ActionType:\rTCP_ECHO_"
    "PORT\0225\n\007udpport\030\007 \002(\0162\032.motion.Message.A"
    "ctionType:\010UDP_PORT\0229\n\007msgport\030\010 \002(\0162\032.m"
    "otion.Message.ActionType:\014TCP_MSG_PORT\022\020"
    "\n\010serverip\030\t \002(\t\022\020\n\010clientip\030\n \002(\t\"\314\002\n\nA"
    "ctionType\022\014\n\007CONNECT\020\350\007\022\023\n\016STOP_STREAMIN"
    "G\020\352\007\022\024\n\017PAUSE_STREAMING\020\353\007\022\026\n\021START_RECO"
    "GNITION\020\354\007\022\025\n\020STOP_RECOGNITION\020\355\007\022\020\n\013DIS"
    "SCONNECT\020\356\007\022\r\n\010GET_TIME\020\357\007\022\r\n\010SET_TIME\020\360"
    "\007\022\r\n\010TIME_SET\020\361\007\022\024\n\017AMOUNT_DETECTED\020\362\007\022\024"
    "\n\017FILE_RECOGNIZED\020\363\007\022\014\n\007GET_MAT\020\364\007\022\014\n\007SE"
    "T_MAT\020\365\007\022\022\n\rTCP_ECHO_PORT\020\222\'\022\r\n\010UDP_PORT"
    "\020\234\'\022\031\n\024STREAMING_VIDEO_PORT\020\246\'\022\021\n\014TCP_MS"
    "G_PORT\020\260\'\"\210\001\n\013Recognition\022\020\n\010instance\030\001 "
    "\002(\005\022\025\n\rsetStoreImage\030\002 \001(\010\022\025\n\rsetSendAmo"
    "unt\030\003 \001(\010\022\027\n\017setSendFilePath\030\004 \001(\010\022\016\n\006am"
    "ount\030\005 \001(\t\022\020\n\010filePath\030\006 \001(\t\":\n\010Instance"
    "\022\022\n\nidInstance\030\001 \002(\005\022\r\n\005start\030\002 \002(\t\022\013\n\003e"
    "nd\030\003 \002(\t\"/\n\006Region\022\020\n\010fileName\030\001 \002(\t\022\023\n\013"
    "xml_content\030\002 \002(\t", 937);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "motion.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Recognition::default_instance_ = new Recognition();
  Instance::default_instance_ = new Instance();
  Region::default_instance_ = new Region();
  Message::default_instance_->InitAsDefaultInstance();
  Recognition::default_instance_->InitAsDefaultInstance();
  Instance::default_instance_->InitAsDefaultInstance();
  Region::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_motion_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_motion_2eproto {
  StaticDescriptorInitializer_motion_2eproto() {
    protobuf_AddDesc_motion_2eproto();
  }
} static_descriptor_initializer_motion_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_ActionType_descriptor_;
}
bool Message_ActionType_IsValid(int value) {
  switch(value) {
    case 1000:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 5010:
    case 5020:
    case 5030:
    case 5040:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_ActionType Message::CONNECT;
const Message_ActionType Message::STOP_STREAMING;
const Message_ActionType Message::PAUSE_STREAMING;
const Message_ActionType Message::START_RECOGNITION;
const Message_ActionType Message::STOP_RECOGNITION;
const Message_ActionType Message::DISSCONNECT;
const Message_ActionType Message::GET_TIME;
const Message_ActionType Message::SET_TIME;
const Message_ActionType Message::TIME_SET;
const Message_ActionType Message::AMOUNT_DETECTED;
const Message_ActionType Message::FILE_RECOGNIZED;
const Message_ActionType Message::GET_MAT;
const Message_ActionType Message::SET_MAT;
const Message_ActionType Message::TCP_ECHO_PORT;
const Message_ActionType Message::UDP_PORT;
const Message_ActionType Message::STREAMING_VIDEO_PORT;
const Message_ActionType Message::TCP_MSG_PORT;
const Message_ActionType Message::ActionType_MIN;
const Message_ActionType Message::ActionType_MAX;
const int Message::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message::kTypeFieldNumber;
const int Message::kTimeFieldNumber;
const int Message::kWidthFieldNumber;
const int Message::kHeightFieldNumber;
const int Message::kDataFieldNumber;
const int Message::kTcpportFieldNumber;
const int Message::kUdpportFieldNumber;
const int Message::kMsgportFieldNumber;
const int Message::kServeripFieldNumber;
const int Message::kClientipFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Message)
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Message)
}

void Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1000;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tcpport_ = 5010;
  udpport_ = 5020;
  msgport_ = 5040;
  serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:motion.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (serverip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverip_;
  }
  if (clientip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientip_;
  }
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = 1000;
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
    width_ = 0;
    height_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    tcpport_ = 5010;
    udpport_ = 5020;
    msgport_ = 5040;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_serverip()) {
      if (serverip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverip_->clear();
      }
    }
    if (has_clientip()) {
      if (clientip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .motion.Message.ActionType type = 1 [default = CONNECT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::motion::Message_ActionType_IsValid(value)) {
            set_type(static_cast< ::motion::Message_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // optional string time = 2;
      case 2: {
        if (tag == 18) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tcpport;
        break;
      }

      // required .motion.Message.ActionType tcpport = 6 [default = TCP_ECHO_PORT];
      case 6: {
        if (tag == 48) {
         parse_tcpport:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::motion::Message_ActionType_IsValid(value)) {
            set_tcpport(static_cast< ::motion::Message_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_udpport;
        break;
      }

      // required .motion.Message.ActionType udpport = 7 [default = UDP_PORT];
      case 7: {
        if (tag == 56) {
         parse_udpport:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::motion::Message_ActionType_IsValid(value)) {
            set_udpport(static_cast< ::motion::Message_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_msgport;
        break;
      }

      // required .motion.Message.ActionType msgport = 8 [default = TCP_MSG_PORT];
      case 8: {
        if (tag == 64) {
         parse_msgport:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::motion::Message_ActionType_IsValid(value)) {
            set_msgport(static_cast< ::motion::Message_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_serverip;
        break;
      }

      // required string serverip = 9;
      case 9: {
        if (tag == 74) {
         parse_serverip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverip().data(), this->serverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_clientip;
        break;
      }

      // required string clientip = 10;
      case 10: {
        if (tag == 82) {
         parse_clientip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientip().data(), this->clientip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Message)
  // required .motion.Message.ActionType type = 1 [default = CONNECT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->time(), output);
  }

  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // required .motion.Message.ActionType tcpport = 6 [default = TCP_ECHO_PORT];
  if (has_tcpport()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->tcpport(), output);
  }

  // required .motion.Message.ActionType udpport = 7 [default = UDP_PORT];
  if (has_udpport()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->udpport(), output);
  }

  // required .motion.Message.ActionType msgport = 8 [default = TCP_MSG_PORT];
  if (has_msgport()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->msgport(), output);
  }

  // required string serverip = 9;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->serverip(), output);
  }

  // required string clientip = 10;
  if (has_clientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientip().data(), this->clientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->clientip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Message)
  // required .motion.Message.ActionType type = 1 [default = CONNECT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time(), target);
  }

  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // required .motion.Message.ActionType tcpport = 6 [default = TCP_ECHO_PORT];
  if (has_tcpport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->tcpport(), target);
  }

  // required .motion.Message.ActionType udpport = 7 [default = UDP_PORT];
  if (has_udpport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->udpport(), target);
  }

  // required .motion.Message.ActionType msgport = 8 [default = TCP_MSG_PORT];
  if (has_msgport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->msgport(), target);
  }

  // required string serverip = 9;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->serverip(), target);
  }

  // required string clientip = 10;
  if (has_clientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientip().data(), this->clientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->clientip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .motion.Message.ActionType type = 1 [default = CONNECT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required .motion.Message.ActionType tcpport = 6 [default = TCP_ECHO_PORT];
    if (has_tcpport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcpport());
    }

    // required .motion.Message.ActionType udpport = 7 [default = UDP_PORT];
    if (has_udpport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->udpport());
    }

    // required .motion.Message.ActionType msgport = 8 [default = TCP_MSG_PORT];
    if (has_msgport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgport());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string serverip = 9;
    if (has_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverip());
    }

    // required string clientip = 10;
    if (has_clientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_tcpport()) {
      set_tcpport(from.tcpport());
    }
    if (from.has_udpport()) {
      set_udpport(from.udpport());
    }
    if (from.has_msgport()) {
      set_msgport(from.msgport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_serverip()) {
      set_serverip(from.serverip());
    }
    if (from.has_clientip()) {
      set_clientip(from.clientip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003e1) != 0x000003e1) return false;

  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(data_, other->data_);
    std::swap(tcpport_, other->tcpport_);
    std::swap(udpport_, other->udpport_);
    std::swap(msgport_, other->msgport_);
    std::swap(serverip_, other->serverip_);
    std::swap(clientip_, other->clientip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Recognition::kInstanceFieldNumber;
const int Recognition::kSetStoreImageFieldNumber;
const int Recognition::kSetSendAmountFieldNumber;
const int Recognition::kSetSendFilePathFieldNumber;
const int Recognition::kAmountFieldNumber;
const int Recognition::kFilePathFieldNumber;
#endif  // !_MSC_VER

Recognition::Recognition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Recognition)
}

void Recognition::InitAsDefaultInstance() {
}

Recognition::Recognition(const Recognition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Recognition)
}

void Recognition::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instance_ = 0;
  setstoreimage_ = false;
  setsendamount_ = false;
  setsendfilepath_ = false;
  amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Recognition::~Recognition() {
  // @@protoc_insertion_point(destructor:motion.Recognition)
  SharedDtor();
}

void Recognition::SharedDtor() {
  if (amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete amount_;
  }
  if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filepath_;
  }
  if (this != default_instance_) {
  }
}

void Recognition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Recognition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Recognition_descriptor_;
}

const Recognition& Recognition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Recognition* Recognition::default_instance_ = NULL;

Recognition* Recognition::New() const {
  return new Recognition;
}

void Recognition::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Recognition*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(instance_, setsendfilepath_);
    if (has_amount()) {
      if (amount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        amount_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filepath_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Recognition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Recognition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 instance = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
          set_has_instance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_setStoreImage;
        break;
      }

      // optional bool setStoreImage = 2;
      case 2: {
        if (tag == 16) {
         parse_setStoreImage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setstoreimage_)));
          set_has_setstoreimage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_setSendAmount;
        break;
      }

      // optional bool setSendAmount = 3;
      case 3: {
        if (tag == 24) {
         parse_setSendAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setsendamount_)));
          set_has_setsendamount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_setSendFilePath;
        break;
      }

      // optional bool setSendFilePath = 4;
      case 4: {
        if (tag == 32) {
         parse_setSendFilePath:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setsendfilepath_)));
          set_has_setsendfilepath();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_amount;
        break;
      }

      // optional string amount = 5;
      case 5: {
        if (tag == 42) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "amount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_filePath;
        break;
      }

      // optional string filePath = 6;
      case 6: {
        if (tag == 50) {
         parse_filePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Recognition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Recognition)
  return false;
#undef DO_
}

void Recognition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Recognition)
  // required int32 instance = 1;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance(), output);
  }

  // optional bool setStoreImage = 2;
  if (has_setstoreimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->setstoreimage(), output);
  }

  // optional bool setSendAmount = 3;
  if (has_setsendamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->setsendamount(), output);
  }

  // optional bool setSendFilePath = 4;
  if (has_setsendfilepath()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->setsendfilepath(), output);
  }

  // optional string amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->amount(), output);
  }

  // optional string filePath = 6;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filepath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Recognition)
}

::google::protobuf::uint8* Recognition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Recognition)
  // required int32 instance = 1;
  if (has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance(), target);
  }

  // optional bool setStoreImage = 2;
  if (has_setstoreimage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->setstoreimage(), target);
  }

  // optional bool setSendAmount = 3;
  if (has_setsendamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->setsendamount(), target);
  }

  // optional bool setSendFilePath = 4;
  if (has_setsendfilepath()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->setsendfilepath(), target);
  }

  // optional string amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->amount(), target);
  }

  // optional string filePath = 6;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filepath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Recognition)
  return target;
}

int Recognition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 instance = 1;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance());
    }

    // optional bool setStoreImage = 2;
    if (has_setstoreimage()) {
      total_size += 1 + 1;
    }

    // optional bool setSendAmount = 3;
    if (has_setsendamount()) {
      total_size += 1 + 1;
    }

    // optional bool setSendFilePath = 4;
    if (has_setsendfilepath()) {
      total_size += 1 + 1;
    }

    // optional string amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amount());
    }

    // optional string filePath = 6;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Recognition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Recognition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Recognition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Recognition::MergeFrom(const Recognition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance()) {
      set_instance(from.instance());
    }
    if (from.has_setstoreimage()) {
      set_setstoreimage(from.setstoreimage());
    }
    if (from.has_setsendamount()) {
      set_setsendamount(from.setsendamount());
    }
    if (from.has_setsendfilepath()) {
      set_setsendfilepath(from.setsendfilepath());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Recognition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Recognition::CopyFrom(const Recognition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recognition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Recognition::Swap(Recognition* other) {
  if (other != this) {
    std::swap(instance_, other->instance_);
    std::swap(setstoreimage_, other->setstoreimage_);
    std::swap(setsendamount_, other->setsendamount_);
    std::swap(setsendfilepath_, other->setsendfilepath_);
    std::swap(amount_, other->amount_);
    std::swap(filepath_, other->filepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Recognition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Recognition_descriptor_;
  metadata.reflection = Recognition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Instance::kIdInstanceFieldNumber;
const int Instance::kStartFieldNumber;
const int Instance::kEndFieldNumber;
#endif  // !_MSC_VER

Instance::Instance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Instance)
}

void Instance::InitAsDefaultInstance() {
}

Instance::Instance(const Instance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Instance)
}

void Instance::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  idinstance_ = 0;
  start_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instance::~Instance() {
  // @@protoc_insertion_point(destructor:motion.Instance)
  SharedDtor();
}

void Instance::SharedDtor() {
  if (start_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_;
  }
  if (end_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_;
  }
  if (this != default_instance_) {
  }
}

void Instance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instance_descriptor_;
}

const Instance& Instance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Instance* Instance::default_instance_ = NULL;

Instance* Instance::New() const {
  return new Instance;
}

void Instance::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    idinstance_ = 0;
    if (has_start()) {
      if (start_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_->clear();
      }
    }
    if (has_end()) {
      if (end_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Instance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Instance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 idInstance = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idinstance_)));
          set_has_idinstance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start;
        break;
      }

      // required string start = 2;
      case 2: {
        if (tag == 18) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start().data(), this->start().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "start");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end;
        break;
      }

      // required string end = 3;
      case 3: {
        if (tag == 26) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->end().data(), this->end().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "end");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Instance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Instance)
  return false;
#undef DO_
}

void Instance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Instance)
  // required int32 idInstance = 1;
  if (has_idinstance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idinstance(), output);
  }

  // required string start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start().data(), this->start().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "start");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->start(), output);
  }

  // required string end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end().data(), this->end().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "end");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Instance)
}

::google::protobuf::uint8* Instance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Instance)
  // required int32 idInstance = 1;
  if (has_idinstance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idinstance(), target);
  }

  // required string start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start().data(), this->start().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "start");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->start(), target);
  }

  // required string end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end().data(), this->end().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "end");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Instance)
  return target;
}

int Instance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 idInstance = 1;
    if (has_idinstance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idinstance());
    }

    // required string start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start());
    }

    // required string end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Instance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Instance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Instance::MergeFrom(const Instance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idinstance()) {
      set_idinstance(from.idinstance());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Instance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instance::CopyFrom(const Instance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Instance::Swap(Instance* other) {
  if (other != this) {
    std::swap(idinstance_, other->idinstance_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Instance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Instance_descriptor_;
  metadata.reflection = Instance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Region::kFileNameFieldNumber;
const int Region::kXmlContentFieldNumber;
#endif  // !_MSC_VER

Region::Region()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motion.Region)
}

void Region::InitAsDefaultInstance() {
}

Region::Region(const Region& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motion.Region)
}

void Region::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xml_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Region::~Region() {
  // @@protoc_insertion_point(destructor:motion.Region)
  SharedDtor();
}

void Region::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (xml_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xml_content_;
  }
  if (this != default_instance_) {
  }
}

void Region::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Region::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Region_descriptor_;
}

const Region& Region::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_2eproto();
  return *default_instance_;
}

Region* Region::default_instance_ = NULL;

Region* Region::New() const {
  return new Region;
}

void Region::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_xml_content()) {
      if (xml_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        xml_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Region::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motion.Region)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xml_content;
        break;
      }

      // required string xml_content = 2;
      case 2: {
        if (tag == 18) {
         parse_xml_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xml_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xml_content().data(), this->xml_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xml_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motion.Region)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motion.Region)
  return false;
#undef DO_
}

void Region::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motion.Region)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // required string xml_content = 2;
  if (has_xml_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xml_content().data(), this->xml_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xml_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->xml_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motion.Region)
}

::google::protobuf::uint8* Region::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motion.Region)
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // required string xml_content = 2;
  if (has_xml_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xml_content().data(), this->xml_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xml_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->xml_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motion.Region)
  return target;
}

int Region::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required string xml_content = 2;
    if (has_xml_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xml_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Region::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Region* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Region*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Region::MergeFrom(const Region& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_xml_content()) {
      set_xml_content(from.xml_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Region::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Region::CopyFrom(const Region& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Region::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Region::Swap(Region* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(xml_content_, other->xml_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Region::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Region_descriptor_;
  metadata.reflection = Region_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace motion

// @@protoc_insertion_point(global_scope)
