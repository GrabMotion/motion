// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: printing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "printing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace print {

namespace {

const ::google::protobuf::Descriptor* Order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Order_reflection_ = NULL;
const ::google::protobuf::Descriptor* Order_PrintOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Order_PrintOrder_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Order_ActionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_printing_2eproto() {
  protobuf_AddDesc_printing_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "printing.proto");
  GOOGLE_CHECK(file != NULL);
  Order_descriptor_ = file->message_type(0);
  static const int Order_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, dining_table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, printorder_),
  };
  Order_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Order_descriptor_,
      Order::default_instance_,
      Order_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Order));
  Order_PrintOrder_descriptor_ = Order_descriptor_->nested_type(0);
  static const int Order_PrintOrder_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order_PrintOrder, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order_PrintOrder, menu_item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order_PrintOrder, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order_PrintOrder, timeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order_PrintOrder, updated_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order_PrintOrder, code_),
  };
  Order_PrintOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Order_PrintOrder_descriptor_,
      Order_PrintOrder::default_instance_,
      Order_PrintOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order_PrintOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order_PrintOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Order_PrintOrder));
  Order_ActionType_descriptor_ = Order_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_printing_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Order_descriptor_, &Order::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Order_PrintOrder_descriptor_, &Order_PrintOrder::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_printing_2eproto() {
  delete Order::default_instance_;
  delete Order_reflection_;
  delete Order_PrintOrder::default_instance_;
  delete Order_PrintOrder_reflection_;
}

void protobuf_AddDesc_printing_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016printing.proto\022\005print\"\266\002\n\005Order\022\027\n\017din"
    "ing_table_id\030\001 \001(\005\022,\n\004type\030\002 \002(\0162\027.print"
    ".Order.ActionType:\005PRINT\022\014\n\004time\030\003 \001(\t\022+"
    "\n\nprintorder\030\004 \003(\0132\027.print.Order.PrintOr"
    "der\032u\n\nPrintOrder\022\n\n\002id\030\001 \001(\005\022\026\n\016menu_it"
    "em_name\030\002 \001(\t\022\020\n\010quantity\030\003 \001(\t\022\017\n\007timee"
    "nd\030\004 \001(\t\022\022\n\nupdated_at\030\005 \001(\t\022\014\n\004code\030\006 \001"
    "(\005\"4\n\nActionType\022\n\n\005PRINT\020\347\007\022\013\n\006ENGAGE\020\350"
    "\007\022\r\n\010GET_TIME\020\351\007", 336);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "printing.proto", &protobuf_RegisterTypes);
  Order::default_instance_ = new Order();
  Order_PrintOrder::default_instance_ = new Order_PrintOrder();
  Order::default_instance_->InitAsDefaultInstance();
  Order_PrintOrder::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_printing_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_printing_2eproto {
  StaticDescriptorInitializer_printing_2eproto() {
    protobuf_AddDesc_printing_2eproto();
  }
} static_descriptor_initializer_printing_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Order_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Order_ActionType_descriptor_;
}
bool Order_ActionType_IsValid(int value) {
  switch(value) {
    case 999:
    case 1000:
    case 1001:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Order_ActionType Order::PRINT;
const Order_ActionType Order::ENGAGE;
const Order_ActionType Order::GET_TIME;
const Order_ActionType Order::ActionType_MIN;
const Order_ActionType Order::ActionType_MAX;
const int Order::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Order_PrintOrder::kIdFieldNumber;
const int Order_PrintOrder::kMenuItemNameFieldNumber;
const int Order_PrintOrder::kQuantityFieldNumber;
const int Order_PrintOrder::kTimeendFieldNumber;
const int Order_PrintOrder::kUpdatedAtFieldNumber;
const int Order_PrintOrder::kCodeFieldNumber;
#endif  // !_MSC_VER

Order_PrintOrder::Order_PrintOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:print.Order.PrintOrder)
}

void Order_PrintOrder::InitAsDefaultInstance() {
}

Order_PrintOrder::Order_PrintOrder(const Order_PrintOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:print.Order.PrintOrder)
}

void Order_PrintOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  menu_item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updated_at_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Order_PrintOrder::~Order_PrintOrder() {
  // @@protoc_insertion_point(destructor:print.Order.PrintOrder)
  SharedDtor();
}

void Order_PrintOrder::SharedDtor() {
  if (menu_item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete menu_item_name_;
  }
  if (quantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quantity_;
  }
  if (timeend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timeend_;
  }
  if (updated_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updated_at_;
  }
  if (this != default_instance_) {
  }
}

void Order_PrintOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Order_PrintOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Order_PrintOrder_descriptor_;
}

const Order_PrintOrder& Order_PrintOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printing_2eproto();
  return *default_instance_;
}

Order_PrintOrder* Order_PrintOrder::default_instance_ = NULL;

Order_PrintOrder* Order_PrintOrder::New() const {
  return new Order_PrintOrder;
}

void Order_PrintOrder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Order_PrintOrder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, code_);
    if (has_menu_item_name()) {
      if (menu_item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        menu_item_name_->clear();
      }
    }
    if (has_quantity()) {
      if (quantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quantity_->clear();
      }
    }
    if (has_timeend()) {
      if (timeend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timeend_->clear();
      }
    }
    if (has_updated_at()) {
      if (updated_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        updated_at_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Order_PrintOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:print.Order.PrintOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_menu_item_name;
        break;
      }

      // optional string menu_item_name = 2;
      case 2: {
        if (tag == 18) {
         parse_menu_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_menu_item_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->menu_item_name().data(), this->menu_item_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "menu_item_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_quantity;
        break;
      }

      // optional string quantity = 3;
      case 3: {
        if (tag == 26) {
         parse_quantity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quantity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quantity().data(), this->quantity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quantity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_timeend;
        break;
      }

      // optional string timeend = 4;
      case 4: {
        if (tag == 34) {
         parse_timeend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timeend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timeend().data(), this->timeend().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timeend");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_updated_at;
        break;
      }

      // optional string updated_at = 5;
      case 5: {
        if (tag == 42) {
         parse_updated_at:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_at()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->updated_at().data(), this->updated_at().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "updated_at");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_code;
        break;
      }

      // optional int32 code = 6;
      case 6: {
        if (tag == 48) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:print.Order.PrintOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:print.Order.PrintOrder)
  return false;
#undef DO_
}

void Order_PrintOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:print.Order.PrintOrder)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string menu_item_name = 2;
  if (has_menu_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->menu_item_name().data(), this->menu_item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "menu_item_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->menu_item_name(), output);
  }

  // optional string quantity = 3;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quantity().data(), this->quantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quantity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->quantity(), output);
  }

  // optional string timeend = 4;
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timeend().data(), this->timeend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timeend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->timeend(), output);
  }

  // optional string updated_at = 5;
  if (has_updated_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updated_at().data(), this->updated_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "updated_at");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->updated_at(), output);
  }

  // optional int32 code = 6;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:print.Order.PrintOrder)
}

::google::protobuf::uint8* Order_PrintOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:print.Order.PrintOrder)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string menu_item_name = 2;
  if (has_menu_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->menu_item_name().data(), this->menu_item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "menu_item_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->menu_item_name(), target);
  }

  // optional string quantity = 3;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quantity().data(), this->quantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quantity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->quantity(), target);
  }

  // optional string timeend = 4;
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timeend().data(), this->timeend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timeend");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->timeend(), target);
  }

  // optional string updated_at = 5;
  if (has_updated_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updated_at().data(), this->updated_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "updated_at");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->updated_at(), target);
  }

  // optional int32 code = 6;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:print.Order.PrintOrder)
  return target;
}

int Order_PrintOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string menu_item_name = 2;
    if (has_menu_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->menu_item_name());
    }

    // optional string quantity = 3;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quantity());
    }

    // optional string timeend = 4;
    if (has_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timeend());
    }

    // optional string updated_at = 5;
    if (has_updated_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_at());
    }

    // optional int32 code = 6;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Order_PrintOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Order_PrintOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Order_PrintOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Order_PrintOrder::MergeFrom(const Order_PrintOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_menu_item_name()) {
      set_menu_item_name(from.menu_item_name());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_timeend()) {
      set_timeend(from.timeend());
    }
    if (from.has_updated_at()) {
      set_updated_at(from.updated_at());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Order_PrintOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order_PrintOrder::CopyFrom(const Order_PrintOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order_PrintOrder::IsInitialized() const {

  return true;
}

void Order_PrintOrder::Swap(Order_PrintOrder* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(menu_item_name_, other->menu_item_name_);
    std::swap(quantity_, other->quantity_);
    std::swap(timeend_, other->timeend_);
    std::swap(updated_at_, other->updated_at_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Order_PrintOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Order_PrintOrder_descriptor_;
  metadata.reflection = Order_PrintOrder_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Order::kDiningTableIdFieldNumber;
const int Order::kTypeFieldNumber;
const int Order::kTimeFieldNumber;
const int Order::kPrintorderFieldNumber;
#endif  // !_MSC_VER

Order::Order()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:print.Order)
}

void Order::InitAsDefaultInstance() {
}

Order::Order(const Order& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:print.Order)
}

void Order::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dining_table_id_ = 0;
  type_ = 999;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:print.Order)
  SharedDtor();
}

void Order::SharedDtor() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Order_descriptor_;
}

const Order& Order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printing_2eproto();
  return *default_instance_;
}

Order* Order::default_instance_ = NULL;

Order* Order::New() const {
  return new Order;
}

void Order::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    dining_table_id_ = 0;
    type_ = 999;
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
  }
  printorder_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:print.Order)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dining_table_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dining_table_id_)));
          set_has_dining_table_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .print.Order.ActionType type = 2 [default = PRINT];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::print::Order_ActionType_IsValid(value)) {
            set_type(static_cast< ::print::Order_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_time;
        break;
      }

      // optional string time = 3;
      case 3: {
        if (tag == 26) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_printorder;
        break;
      }

      // repeated .print.Order.PrintOrder printorder = 4;
      case 4: {
        if (tag == 34) {
         parse_printorder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_printorder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_printorder;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:print.Order)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:print.Order)
  return false;
#undef DO_
}

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:print.Order)
  // optional int32 dining_table_id = 1;
  if (has_dining_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dining_table_id(), output);
  }

  // required .print.Order.ActionType type = 2 [default = PRINT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->time(), output);
  }

  // repeated .print.Order.PrintOrder printorder = 4;
  for (int i = 0; i < this->printorder_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->printorder(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:print.Order)
}

::google::protobuf::uint8* Order::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:print.Order)
  // optional int32 dining_table_id = 1;
  if (has_dining_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dining_table_id(), target);
  }

  // required .print.Order.ActionType type = 2 [default = PRINT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->time(), target);
  }

  // repeated .print.Order.PrintOrder printorder = 4;
  for (int i = 0; i < this->printorder_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->printorder(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:print.Order)
  return target;
}

int Order::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dining_table_id = 1;
    if (has_dining_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dining_table_id());
    }

    // required .print.Order.ActionType type = 2 [default = PRINT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

  }
  // repeated .print.Order.PrintOrder printorder = 4;
  total_size += 1 * this->printorder_size();
  for (int i = 0; i < this->printorder_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->printorder(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Order* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Order*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
  GOOGLE_CHECK_NE(&from, this);
  printorder_.MergeFrom(from.printorder_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dining_table_id()) {
      set_dining_table_id(from.dining_table_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Order::Swap(Order* other) {
  if (other != this) {
    std::swap(dining_table_id_, other->dining_table_id_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    printorder_.Swap(&other->printorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Order_descriptor_;
  metadata.reflection = Order_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace print

// @@protoc_insertion_point(global_scope)
