// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: printing.proto

#ifndef PROTOBUF_printing_2eproto__INCLUDED
#define PROTOBUF_printing_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace print {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_printing_2eproto();
void protobuf_AssignDesc_printing_2eproto();
void protobuf_ShutdownFile_printing_2eproto();

class Order;
class Order_PrintOrder;

enum Order_ActionType {
  Order_ActionType_PRINT = 999,
  Order_ActionType_ENGAGE = 1000,
  Order_ActionType_GET_TIME = 1001
};
bool Order_ActionType_IsValid(int value);
const Order_ActionType Order_ActionType_ActionType_MIN = Order_ActionType_PRINT;
const Order_ActionType Order_ActionType_ActionType_MAX = Order_ActionType_GET_TIME;
const int Order_ActionType_ActionType_ARRAYSIZE = Order_ActionType_ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Order_ActionType_descriptor();
inline const ::std::string& Order_ActionType_Name(Order_ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Order_ActionType_descriptor(), value);
}
inline bool Order_ActionType_Parse(
    const ::std::string& name, Order_ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Order_ActionType>(
    Order_ActionType_descriptor(), name, value);
}
// ===================================================================

class Order_PrintOrder : public ::google::protobuf::Message {
 public:
  Order_PrintOrder();
  virtual ~Order_PrintOrder();

  Order_PrintOrder(const Order_PrintOrder& from);

  inline Order_PrintOrder& operator=(const Order_PrintOrder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Order_PrintOrder& default_instance();

  void Swap(Order_PrintOrder* other);

  // implements Message ----------------------------------------------

  Order_PrintOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Order_PrintOrder& from);
  void MergeFrom(const Order_PrintOrder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string menu_item_name = 2;
  inline bool has_menu_item_name() const;
  inline void clear_menu_item_name();
  static const int kMenuItemNameFieldNumber = 2;
  inline const ::std::string& menu_item_name() const;
  inline void set_menu_item_name(const ::std::string& value);
  inline void set_menu_item_name(const char* value);
  inline void set_menu_item_name(const char* value, size_t size);
  inline ::std::string* mutable_menu_item_name();
  inline ::std::string* release_menu_item_name();
  inline void set_allocated_menu_item_name(::std::string* menu_item_name);

  // optional string quantity = 3;
  inline bool has_quantity() const;
  inline void clear_quantity();
  static const int kQuantityFieldNumber = 3;
  inline const ::std::string& quantity() const;
  inline void set_quantity(const ::std::string& value);
  inline void set_quantity(const char* value);
  inline void set_quantity(const char* value, size_t size);
  inline ::std::string* mutable_quantity();
  inline ::std::string* release_quantity();
  inline void set_allocated_quantity(::std::string* quantity);

  // optional string timeend = 4;
  inline bool has_timeend() const;
  inline void clear_timeend();
  static const int kTimeendFieldNumber = 4;
  inline const ::std::string& timeend() const;
  inline void set_timeend(const ::std::string& value);
  inline void set_timeend(const char* value);
  inline void set_timeend(const char* value, size_t size);
  inline ::std::string* mutable_timeend();
  inline ::std::string* release_timeend();
  inline void set_allocated_timeend(::std::string* timeend);

  // optional string updated_at = 5;
  inline bool has_updated_at() const;
  inline void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 5;
  inline const ::std::string& updated_at() const;
  inline void set_updated_at(const ::std::string& value);
  inline void set_updated_at(const char* value);
  inline void set_updated_at(const char* value, size_t size);
  inline ::std::string* mutable_updated_at();
  inline ::std::string* release_updated_at();
  inline void set_allocated_updated_at(::std::string* updated_at);

  // optional int32 code = 6;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 6;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:print.Order.PrintOrder)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_menu_item_name();
  inline void clear_has_menu_item_name();
  inline void set_has_quantity();
  inline void clear_has_quantity();
  inline void set_has_timeend();
  inline void clear_has_timeend();
  inline void set_has_updated_at();
  inline void clear_has_updated_at();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* menu_item_name_;
  ::std::string* quantity_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 code_;
  ::std::string* timeend_;
  ::std::string* updated_at_;
  friend void  protobuf_AddDesc_printing_2eproto();
  friend void protobuf_AssignDesc_printing_2eproto();
  friend void protobuf_ShutdownFile_printing_2eproto();

  void InitAsDefaultInstance();
  static Order_PrintOrder* default_instance_;
};
// -------------------------------------------------------------------

class Order : public ::google::protobuf::Message {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Order& default_instance();

  void Swap(Order* other);

  // implements Message ----------------------------------------------

  Order* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Order_PrintOrder PrintOrder;

  typedef Order_ActionType ActionType;
  static const ActionType PRINT = Order_ActionType_PRINT;
  static const ActionType ENGAGE = Order_ActionType_ENGAGE;
  static const ActionType GET_TIME = Order_ActionType_GET_TIME;
  static inline bool ActionType_IsValid(int value) {
    return Order_ActionType_IsValid(value);
  }
  static const ActionType ActionType_MIN =
    Order_ActionType_ActionType_MIN;
  static const ActionType ActionType_MAX =
    Order_ActionType_ActionType_MAX;
  static const int ActionType_ARRAYSIZE =
    Order_ActionType_ActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionType_descriptor() {
    return Order_ActionType_descriptor();
  }
  static inline const ::std::string& ActionType_Name(ActionType value) {
    return Order_ActionType_Name(value);
  }
  static inline bool ActionType_Parse(const ::std::string& name,
      ActionType* value) {
    return Order_ActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 dining_table_id = 1;
  inline bool has_dining_table_id() const;
  inline void clear_dining_table_id();
  static const int kDiningTableIdFieldNumber = 1;
  inline ::google::protobuf::int32 dining_table_id() const;
  inline void set_dining_table_id(::google::protobuf::int32 value);

  // required .print.Order.ActionType type = 2 [default = PRINT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::print::Order_ActionType type() const;
  inline void set_type(::print::Order_ActionType value);

  // optional string time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // repeated .print.Order.PrintOrder printorder = 4;
  inline int printorder_size() const;
  inline void clear_printorder();
  static const int kPrintorderFieldNumber = 4;
  inline const ::print::Order_PrintOrder& printorder(int index) const;
  inline ::print::Order_PrintOrder* mutable_printorder(int index);
  inline ::print::Order_PrintOrder* add_printorder();
  inline const ::google::protobuf::RepeatedPtrField< ::print::Order_PrintOrder >&
      printorder() const;
  inline ::google::protobuf::RepeatedPtrField< ::print::Order_PrintOrder >*
      mutable_printorder();

  // @@protoc_insertion_point(class_scope:print.Order)
 private:
  inline void set_has_dining_table_id();
  inline void clear_has_dining_table_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 dining_table_id_;
  int type_;
  ::std::string* time_;
  ::google::protobuf::RepeatedPtrField< ::print::Order_PrintOrder > printorder_;
  friend void  protobuf_AddDesc_printing_2eproto();
  friend void protobuf_AssignDesc_printing_2eproto();
  friend void protobuf_ShutdownFile_printing_2eproto();

  void InitAsDefaultInstance();
  static Order* default_instance_;
};
// ===================================================================


// ===================================================================

// Order_PrintOrder

// optional int32 id = 1;
inline bool Order_PrintOrder::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Order_PrintOrder::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Order_PrintOrder::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Order_PrintOrder::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Order_PrintOrder::id() const {
  // @@protoc_insertion_point(field_get:print.Order.PrintOrder.id)
  return id_;
}
inline void Order_PrintOrder::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:print.Order.PrintOrder.id)
}

// optional string menu_item_name = 2;
inline bool Order_PrintOrder::has_menu_item_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Order_PrintOrder::set_has_menu_item_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Order_PrintOrder::clear_has_menu_item_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Order_PrintOrder::clear_menu_item_name() {
  if (menu_item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    menu_item_name_->clear();
  }
  clear_has_menu_item_name();
}
inline const ::std::string& Order_PrintOrder::menu_item_name() const {
  // @@protoc_insertion_point(field_get:print.Order.PrintOrder.menu_item_name)
  return *menu_item_name_;
}
inline void Order_PrintOrder::set_menu_item_name(const ::std::string& value) {
  set_has_menu_item_name();
  if (menu_item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    menu_item_name_ = new ::std::string;
  }
  menu_item_name_->assign(value);
  // @@protoc_insertion_point(field_set:print.Order.PrintOrder.menu_item_name)
}
inline void Order_PrintOrder::set_menu_item_name(const char* value) {
  set_has_menu_item_name();
  if (menu_item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    menu_item_name_ = new ::std::string;
  }
  menu_item_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:print.Order.PrintOrder.menu_item_name)
}
inline void Order_PrintOrder::set_menu_item_name(const char* value, size_t size) {
  set_has_menu_item_name();
  if (menu_item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    menu_item_name_ = new ::std::string;
  }
  menu_item_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:print.Order.PrintOrder.menu_item_name)
}
inline ::std::string* Order_PrintOrder::mutable_menu_item_name() {
  set_has_menu_item_name();
  if (menu_item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    menu_item_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:print.Order.PrintOrder.menu_item_name)
  return menu_item_name_;
}
inline ::std::string* Order_PrintOrder::release_menu_item_name() {
  clear_has_menu_item_name();
  if (menu_item_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = menu_item_name_;
    menu_item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Order_PrintOrder::set_allocated_menu_item_name(::std::string* menu_item_name) {
  if (menu_item_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete menu_item_name_;
  }
  if (menu_item_name) {
    set_has_menu_item_name();
    menu_item_name_ = menu_item_name;
  } else {
    clear_has_menu_item_name();
    menu_item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:print.Order.PrintOrder.menu_item_name)
}

// optional string quantity = 3;
inline bool Order_PrintOrder::has_quantity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Order_PrintOrder::set_has_quantity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Order_PrintOrder::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Order_PrintOrder::clear_quantity() {
  if (quantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quantity_->clear();
  }
  clear_has_quantity();
}
inline const ::std::string& Order_PrintOrder::quantity() const {
  // @@protoc_insertion_point(field_get:print.Order.PrintOrder.quantity)
  return *quantity_;
}
inline void Order_PrintOrder::set_quantity(const ::std::string& value) {
  set_has_quantity();
  if (quantity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quantity_ = new ::std::string;
  }
  quantity_->assign(value);
  // @@protoc_insertion_point(field_set:print.Order.PrintOrder.quantity)
}
inline void Order_PrintOrder::set_quantity(const char* value) {
  set_has_quantity();
  if (quantity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quantity_ = new ::std::string;
  }
  quantity_->assign(value);
  // @@protoc_insertion_point(field_set_char:print.Order.PrintOrder.quantity)
}
inline void Order_PrintOrder::set_quantity(const char* value, size_t size) {
  set_has_quantity();
  if (quantity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quantity_ = new ::std::string;
  }
  quantity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:print.Order.PrintOrder.quantity)
}
inline ::std::string* Order_PrintOrder::mutable_quantity() {
  set_has_quantity();
  if (quantity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quantity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:print.Order.PrintOrder.quantity)
  return quantity_;
}
inline ::std::string* Order_PrintOrder::release_quantity() {
  clear_has_quantity();
  if (quantity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = quantity_;
    quantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Order_PrintOrder::set_allocated_quantity(::std::string* quantity) {
  if (quantity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quantity_;
  }
  if (quantity) {
    set_has_quantity();
    quantity_ = quantity;
  } else {
    clear_has_quantity();
    quantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:print.Order.PrintOrder.quantity)
}

// optional string timeend = 4;
inline bool Order_PrintOrder::has_timeend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Order_PrintOrder::set_has_timeend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Order_PrintOrder::clear_has_timeend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Order_PrintOrder::clear_timeend() {
  if (timeend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timeend_->clear();
  }
  clear_has_timeend();
}
inline const ::std::string& Order_PrintOrder::timeend() const {
  // @@protoc_insertion_point(field_get:print.Order.PrintOrder.timeend)
  return *timeend_;
}
inline void Order_PrintOrder::set_timeend(const ::std::string& value) {
  set_has_timeend();
  if (timeend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timeend_ = new ::std::string;
  }
  timeend_->assign(value);
  // @@protoc_insertion_point(field_set:print.Order.PrintOrder.timeend)
}
inline void Order_PrintOrder::set_timeend(const char* value) {
  set_has_timeend();
  if (timeend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timeend_ = new ::std::string;
  }
  timeend_->assign(value);
  // @@protoc_insertion_point(field_set_char:print.Order.PrintOrder.timeend)
}
inline void Order_PrintOrder::set_timeend(const char* value, size_t size) {
  set_has_timeend();
  if (timeend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timeend_ = new ::std::string;
  }
  timeend_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:print.Order.PrintOrder.timeend)
}
inline ::std::string* Order_PrintOrder::mutable_timeend() {
  set_has_timeend();
  if (timeend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timeend_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:print.Order.PrintOrder.timeend)
  return timeend_;
}
inline ::std::string* Order_PrintOrder::release_timeend() {
  clear_has_timeend();
  if (timeend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = timeend_;
    timeend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Order_PrintOrder::set_allocated_timeend(::std::string* timeend) {
  if (timeend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timeend_;
  }
  if (timeend) {
    set_has_timeend();
    timeend_ = timeend;
  } else {
    clear_has_timeend();
    timeend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:print.Order.PrintOrder.timeend)
}

// optional string updated_at = 5;
inline bool Order_PrintOrder::has_updated_at() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Order_PrintOrder::set_has_updated_at() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Order_PrintOrder::clear_has_updated_at() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Order_PrintOrder::clear_updated_at() {
  if (updated_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updated_at_->clear();
  }
  clear_has_updated_at();
}
inline const ::std::string& Order_PrintOrder::updated_at() const {
  // @@protoc_insertion_point(field_get:print.Order.PrintOrder.updated_at)
  return *updated_at_;
}
inline void Order_PrintOrder::set_updated_at(const ::std::string& value) {
  set_has_updated_at();
  if (updated_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updated_at_ = new ::std::string;
  }
  updated_at_->assign(value);
  // @@protoc_insertion_point(field_set:print.Order.PrintOrder.updated_at)
}
inline void Order_PrintOrder::set_updated_at(const char* value) {
  set_has_updated_at();
  if (updated_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updated_at_ = new ::std::string;
  }
  updated_at_->assign(value);
  // @@protoc_insertion_point(field_set_char:print.Order.PrintOrder.updated_at)
}
inline void Order_PrintOrder::set_updated_at(const char* value, size_t size) {
  set_has_updated_at();
  if (updated_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updated_at_ = new ::std::string;
  }
  updated_at_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:print.Order.PrintOrder.updated_at)
}
inline ::std::string* Order_PrintOrder::mutable_updated_at() {
  set_has_updated_at();
  if (updated_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    updated_at_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:print.Order.PrintOrder.updated_at)
  return updated_at_;
}
inline ::std::string* Order_PrintOrder::release_updated_at() {
  clear_has_updated_at();
  if (updated_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = updated_at_;
    updated_at_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Order_PrintOrder::set_allocated_updated_at(::std::string* updated_at) {
  if (updated_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updated_at_;
  }
  if (updated_at) {
    set_has_updated_at();
    updated_at_ = updated_at;
  } else {
    clear_has_updated_at();
    updated_at_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:print.Order.PrintOrder.updated_at)
}

// optional int32 code = 6;
inline bool Order_PrintOrder::has_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Order_PrintOrder::set_has_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Order_PrintOrder::clear_has_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Order_PrintOrder::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Order_PrintOrder::code() const {
  // @@protoc_insertion_point(field_get:print.Order.PrintOrder.code)
  return code_;
}
inline void Order_PrintOrder::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:print.Order.PrintOrder.code)
}

// -------------------------------------------------------------------

// Order

// optional int32 dining_table_id = 1;
inline bool Order::has_dining_table_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Order::set_has_dining_table_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Order::clear_has_dining_table_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Order::clear_dining_table_id() {
  dining_table_id_ = 0;
  clear_has_dining_table_id();
}
inline ::google::protobuf::int32 Order::dining_table_id() const {
  // @@protoc_insertion_point(field_get:print.Order.dining_table_id)
  return dining_table_id_;
}
inline void Order::set_dining_table_id(::google::protobuf::int32 value) {
  set_has_dining_table_id();
  dining_table_id_ = value;
  // @@protoc_insertion_point(field_set:print.Order.dining_table_id)
}

// required .print.Order.ActionType type = 2 [default = PRINT];
inline bool Order::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Order::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Order::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Order::clear_type() {
  type_ = 999;
  clear_has_type();
}
inline ::print::Order_ActionType Order::type() const {
  // @@protoc_insertion_point(field_get:print.Order.type)
  return static_cast< ::print::Order_ActionType >(type_);
}
inline void Order::set_type(::print::Order_ActionType value) {
  assert(::print::Order_ActionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:print.Order.type)
}

// optional string time = 3;
inline bool Order::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Order::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Order::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Order::clear_time() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& Order::time() const {
  // @@protoc_insertion_point(field_get:print.Order.time)
  return *time_;
}
inline void Order::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set:print.Order.time)
}
inline void Order::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set_char:print.Order.time)
}
inline void Order::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:print.Order.time)
}
inline ::std::string* Order::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:print.Order.time)
  return time_;
}
inline ::std::string* Order::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Order::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:print.Order.time)
}

// repeated .print.Order.PrintOrder printorder = 4;
inline int Order::printorder_size() const {
  return printorder_.size();
}
inline void Order::clear_printorder() {
  printorder_.Clear();
}
inline const ::print::Order_PrintOrder& Order::printorder(int index) const {
  // @@protoc_insertion_point(field_get:print.Order.printorder)
  return printorder_.Get(index);
}
inline ::print::Order_PrintOrder* Order::mutable_printorder(int index) {
  // @@protoc_insertion_point(field_mutable:print.Order.printorder)
  return printorder_.Mutable(index);
}
inline ::print::Order_PrintOrder* Order::add_printorder() {
  // @@protoc_insertion_point(field_add:print.Order.printorder)
  return printorder_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::print::Order_PrintOrder >&
Order::printorder() const {
  // @@protoc_insertion_point(field_list:print.Order.printorder)
  return printorder_;
}
inline ::google::protobuf::RepeatedPtrField< ::print::Order_PrintOrder >*
Order::mutable_printorder() {
  // @@protoc_insertion_point(field_mutable_list:print.Order.printorder)
  return &printorder_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace print

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::print::Order_ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::print::Order_ActionType>() {
  return ::print::Order_ActionType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_printing_2eproto__INCLUDED
